
alici_devre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004970  08004970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004970  08004970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08004984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004984  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a191  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abc  00000000  00000000  0002a1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f39  00000000  00000000  0002cf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bea2  00000000  00000000  00040ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b473  00000000  00000000  0004cd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c81de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002560  00000000  00000000  000c8230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004898 	.word	0x08004898

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004898 	.word	0x08004898

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_d2uiz>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2200      	movs	r2, #0
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <__aeabi_d2uiz+0x38>)
 80003f2:	0004      	movs	r4, r0
 80003f4:	000d      	movs	r5, r1
 80003f6:	f001 fa0b 	bl	8001810 <__aeabi_dcmpge>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d104      	bne.n	8000408 <__aeabi_d2uiz+0x1c>
 80003fe:	0020      	movs	r0, r4
 8000400:	0029      	movs	r1, r5
 8000402:	f001 f953 	bl	80016ac <__aeabi_d2iz>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__aeabi_d2uiz+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	0020      	movs	r0, r4
 800040e:	0029      	movs	r1, r5
 8000410:	f000 fdba 	bl	8000f88 <__aeabi_dsub>
 8000414:	f001 f94a 	bl	80016ac <__aeabi_d2iz>
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	061b      	lsls	r3, r3, #24
 800041c:	469c      	mov	ip, r3
 800041e:	4460      	add	r0, ip
 8000420:	e7f1      	b.n	8000406 <__aeabi_d2uiz+0x1a>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	41e00000 	.word	0x41e00000

08000428 <__aeabi_i2f>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	2800      	cmp	r0, #0
 800042c:	d013      	beq.n	8000456 <__aeabi_i2f+0x2e>
 800042e:	17c3      	asrs	r3, r0, #31
 8000430:	18c6      	adds	r6, r0, r3
 8000432:	405e      	eors	r6, r3
 8000434:	0fc4      	lsrs	r4, r0, #31
 8000436:	0030      	movs	r0, r6
 8000438:	f001 f9f4 	bl	8001824 <__clzsi2>
 800043c:	239e      	movs	r3, #158	; 0x9e
 800043e:	0005      	movs	r5, r0
 8000440:	1a1b      	subs	r3, r3, r0
 8000442:	2b96      	cmp	r3, #150	; 0x96
 8000444:	dc0f      	bgt.n	8000466 <__aeabi_i2f+0x3e>
 8000446:	2808      	cmp	r0, #8
 8000448:	dd01      	ble.n	800044e <__aeabi_i2f+0x26>
 800044a:	3d08      	subs	r5, #8
 800044c:	40ae      	lsls	r6, r5
 800044e:	0276      	lsls	r6, r6, #9
 8000450:	0a76      	lsrs	r6, r6, #9
 8000452:	b2d8      	uxtb	r0, r3
 8000454:	e002      	b.n	800045c <__aeabi_i2f+0x34>
 8000456:	2400      	movs	r4, #0
 8000458:	2000      	movs	r0, #0
 800045a:	2600      	movs	r6, #0
 800045c:	05c0      	lsls	r0, r0, #23
 800045e:	4330      	orrs	r0, r6
 8000460:	07e4      	lsls	r4, r4, #31
 8000462:	4320      	orrs	r0, r4
 8000464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000466:	2b99      	cmp	r3, #153	; 0x99
 8000468:	dd0c      	ble.n	8000484 <__aeabi_i2f+0x5c>
 800046a:	2205      	movs	r2, #5
 800046c:	0031      	movs	r1, r6
 800046e:	1a12      	subs	r2, r2, r0
 8000470:	40d1      	lsrs	r1, r2
 8000472:	000a      	movs	r2, r1
 8000474:	0001      	movs	r1, r0
 8000476:	0030      	movs	r0, r6
 8000478:	311b      	adds	r1, #27
 800047a:	4088      	lsls	r0, r1
 800047c:	1e41      	subs	r1, r0, #1
 800047e:	4188      	sbcs	r0, r1
 8000480:	4302      	orrs	r2, r0
 8000482:	0016      	movs	r6, r2
 8000484:	2d05      	cmp	r5, #5
 8000486:	dc12      	bgt.n	80004ae <__aeabi_i2f+0x86>
 8000488:	0031      	movs	r1, r6
 800048a:	4f0d      	ldr	r7, [pc, #52]	; (80004c0 <__aeabi_i2f+0x98>)
 800048c:	4039      	ands	r1, r7
 800048e:	0772      	lsls	r2, r6, #29
 8000490:	d009      	beq.n	80004a6 <__aeabi_i2f+0x7e>
 8000492:	200f      	movs	r0, #15
 8000494:	4030      	ands	r0, r6
 8000496:	2804      	cmp	r0, #4
 8000498:	d005      	beq.n	80004a6 <__aeabi_i2f+0x7e>
 800049a:	3104      	adds	r1, #4
 800049c:	014a      	lsls	r2, r1, #5
 800049e:	d502      	bpl.n	80004a6 <__aeabi_i2f+0x7e>
 80004a0:	239f      	movs	r3, #159	; 0x9f
 80004a2:	4039      	ands	r1, r7
 80004a4:	1b5b      	subs	r3, r3, r5
 80004a6:	0189      	lsls	r1, r1, #6
 80004a8:	0a4e      	lsrs	r6, r1, #9
 80004aa:	b2d8      	uxtb	r0, r3
 80004ac:	e7d6      	b.n	800045c <__aeabi_i2f+0x34>
 80004ae:	1f6a      	subs	r2, r5, #5
 80004b0:	4096      	lsls	r6, r2
 80004b2:	0031      	movs	r1, r6
 80004b4:	4f02      	ldr	r7, [pc, #8]	; (80004c0 <__aeabi_i2f+0x98>)
 80004b6:	4039      	ands	r1, r7
 80004b8:	0772      	lsls	r2, r6, #29
 80004ba:	d0f4      	beq.n	80004a6 <__aeabi_i2f+0x7e>
 80004bc:	e7e9      	b.n	8000492 <__aeabi_i2f+0x6a>
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	fbffffff 	.word	0xfbffffff

080004c4 <__aeabi_ddiv>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	4657      	mov	r7, sl
 80004c8:	464e      	mov	r6, r9
 80004ca:	4645      	mov	r5, r8
 80004cc:	46de      	mov	lr, fp
 80004ce:	b5e0      	push	{r5, r6, r7, lr}
 80004d0:	4681      	mov	r9, r0
 80004d2:	0005      	movs	r5, r0
 80004d4:	030c      	lsls	r4, r1, #12
 80004d6:	0048      	lsls	r0, r1, #1
 80004d8:	4692      	mov	sl, r2
 80004da:	001f      	movs	r7, r3
 80004dc:	b085      	sub	sp, #20
 80004de:	0b24      	lsrs	r4, r4, #12
 80004e0:	0d40      	lsrs	r0, r0, #21
 80004e2:	0fce      	lsrs	r6, r1, #31
 80004e4:	2800      	cmp	r0, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_ddiv+0x26>
 80004e8:	e156      	b.n	8000798 <__aeabi_ddiv+0x2d4>
 80004ea:	4bd4      	ldr	r3, [pc, #848]	; (800083c <__aeabi_ddiv+0x378>)
 80004ec:	4298      	cmp	r0, r3
 80004ee:	d100      	bne.n	80004f2 <__aeabi_ddiv+0x2e>
 80004f0:	e172      	b.n	80007d8 <__aeabi_ddiv+0x314>
 80004f2:	0f6b      	lsrs	r3, r5, #29
 80004f4:	00e4      	lsls	r4, r4, #3
 80004f6:	431c      	orrs	r4, r3
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	041b      	lsls	r3, r3, #16
 80004fc:	4323      	orrs	r3, r4
 80004fe:	4698      	mov	r8, r3
 8000500:	4bcf      	ldr	r3, [pc, #828]	; (8000840 <__aeabi_ddiv+0x37c>)
 8000502:	00ed      	lsls	r5, r5, #3
 8000504:	469b      	mov	fp, r3
 8000506:	2300      	movs	r3, #0
 8000508:	4699      	mov	r9, r3
 800050a:	4483      	add	fp, r0
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	033c      	lsls	r4, r7, #12
 8000510:	007b      	lsls	r3, r7, #1
 8000512:	4650      	mov	r0, sl
 8000514:	0b24      	lsrs	r4, r4, #12
 8000516:	0d5b      	lsrs	r3, r3, #21
 8000518:	0fff      	lsrs	r7, r7, #31
 800051a:	2b00      	cmp	r3, #0
 800051c:	d100      	bne.n	8000520 <__aeabi_ddiv+0x5c>
 800051e:	e11f      	b.n	8000760 <__aeabi_ddiv+0x29c>
 8000520:	4ac6      	ldr	r2, [pc, #792]	; (800083c <__aeabi_ddiv+0x378>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d100      	bne.n	8000528 <__aeabi_ddiv+0x64>
 8000526:	e162      	b.n	80007ee <__aeabi_ddiv+0x32a>
 8000528:	49c5      	ldr	r1, [pc, #788]	; (8000840 <__aeabi_ddiv+0x37c>)
 800052a:	0f42      	lsrs	r2, r0, #29
 800052c:	468c      	mov	ip, r1
 800052e:	00e4      	lsls	r4, r4, #3
 8000530:	4659      	mov	r1, fp
 8000532:	4314      	orrs	r4, r2
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	4463      	add	r3, ip
 8000538:	0412      	lsls	r2, r2, #16
 800053a:	1acb      	subs	r3, r1, r3
 800053c:	4314      	orrs	r4, r2
 800053e:	469b      	mov	fp, r3
 8000540:	00c2      	lsls	r2, r0, #3
 8000542:	2000      	movs	r0, #0
 8000544:	0033      	movs	r3, r6
 8000546:	407b      	eors	r3, r7
 8000548:	469a      	mov	sl, r3
 800054a:	464b      	mov	r3, r9
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d827      	bhi.n	80005a0 <__aeabi_ddiv+0xdc>
 8000550:	49bc      	ldr	r1, [pc, #752]	; (8000844 <__aeabi_ddiv+0x380>)
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	58cb      	ldr	r3, [r1, r3]
 8000556:	469f      	mov	pc, r3
 8000558:	46b2      	mov	sl, r6
 800055a:	9b00      	ldr	r3, [sp, #0]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d016      	beq.n	800058e <__aeabi_ddiv+0xca>
 8000560:	2b03      	cmp	r3, #3
 8000562:	d100      	bne.n	8000566 <__aeabi_ddiv+0xa2>
 8000564:	e28e      	b.n	8000a84 <__aeabi_ddiv+0x5c0>
 8000566:	2b01      	cmp	r3, #1
 8000568:	d000      	beq.n	800056c <__aeabi_ddiv+0xa8>
 800056a:	e0d9      	b.n	8000720 <__aeabi_ddiv+0x25c>
 800056c:	2300      	movs	r3, #0
 800056e:	2400      	movs	r4, #0
 8000570:	2500      	movs	r5, #0
 8000572:	4652      	mov	r2, sl
 8000574:	051b      	lsls	r3, r3, #20
 8000576:	4323      	orrs	r3, r4
 8000578:	07d2      	lsls	r2, r2, #31
 800057a:	4313      	orrs	r3, r2
 800057c:	0028      	movs	r0, r5
 800057e:	0019      	movs	r1, r3
 8000580:	b005      	add	sp, #20
 8000582:	bcf0      	pop	{r4, r5, r6, r7}
 8000584:	46bb      	mov	fp, r7
 8000586:	46b2      	mov	sl, r6
 8000588:	46a9      	mov	r9, r5
 800058a:	46a0      	mov	r8, r4
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058e:	2400      	movs	r4, #0
 8000590:	2500      	movs	r5, #0
 8000592:	4baa      	ldr	r3, [pc, #680]	; (800083c <__aeabi_ddiv+0x378>)
 8000594:	e7ed      	b.n	8000572 <__aeabi_ddiv+0xae>
 8000596:	46ba      	mov	sl, r7
 8000598:	46a0      	mov	r8, r4
 800059a:	0015      	movs	r5, r2
 800059c:	9000      	str	r0, [sp, #0]
 800059e:	e7dc      	b.n	800055a <__aeabi_ddiv+0x96>
 80005a0:	4544      	cmp	r4, r8
 80005a2:	d200      	bcs.n	80005a6 <__aeabi_ddiv+0xe2>
 80005a4:	e1c7      	b.n	8000936 <__aeabi_ddiv+0x472>
 80005a6:	d100      	bne.n	80005aa <__aeabi_ddiv+0xe6>
 80005a8:	e1c2      	b.n	8000930 <__aeabi_ddiv+0x46c>
 80005aa:	2301      	movs	r3, #1
 80005ac:	425b      	negs	r3, r3
 80005ae:	469c      	mov	ip, r3
 80005b0:	002e      	movs	r6, r5
 80005b2:	4640      	mov	r0, r8
 80005b4:	2500      	movs	r5, #0
 80005b6:	44e3      	add	fp, ip
 80005b8:	0223      	lsls	r3, r4, #8
 80005ba:	0e14      	lsrs	r4, r2, #24
 80005bc:	431c      	orrs	r4, r3
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	4699      	mov	r9, r3
 80005c2:	0423      	lsls	r3, r4, #16
 80005c4:	0c1f      	lsrs	r7, r3, #16
 80005c6:	0212      	lsls	r2, r2, #8
 80005c8:	4649      	mov	r1, r9
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	9701      	str	r7, [sp, #4]
 80005ce:	f7ff fe1d 	bl	800020c <__aeabi_uidivmod>
 80005d2:	0002      	movs	r2, r0
 80005d4:	437a      	muls	r2, r7
 80005d6:	040b      	lsls	r3, r1, #16
 80005d8:	0c31      	lsrs	r1, r6, #16
 80005da:	4680      	mov	r8, r0
 80005dc:	4319      	orrs	r1, r3
 80005de:	428a      	cmp	r2, r1
 80005e0:	d907      	bls.n	80005f2 <__aeabi_ddiv+0x12e>
 80005e2:	2301      	movs	r3, #1
 80005e4:	425b      	negs	r3, r3
 80005e6:	469c      	mov	ip, r3
 80005e8:	1909      	adds	r1, r1, r4
 80005ea:	44e0      	add	r8, ip
 80005ec:	428c      	cmp	r4, r1
 80005ee:	d800      	bhi.n	80005f2 <__aeabi_ddiv+0x12e>
 80005f0:	e207      	b.n	8000a02 <__aeabi_ddiv+0x53e>
 80005f2:	1a88      	subs	r0, r1, r2
 80005f4:	4649      	mov	r1, r9
 80005f6:	f7ff fe09 	bl	800020c <__aeabi_uidivmod>
 80005fa:	0409      	lsls	r1, r1, #16
 80005fc:	468c      	mov	ip, r1
 80005fe:	0431      	lsls	r1, r6, #16
 8000600:	4666      	mov	r6, ip
 8000602:	9a01      	ldr	r2, [sp, #4]
 8000604:	0c09      	lsrs	r1, r1, #16
 8000606:	4342      	muls	r2, r0
 8000608:	0003      	movs	r3, r0
 800060a:	4331      	orrs	r1, r6
 800060c:	428a      	cmp	r2, r1
 800060e:	d904      	bls.n	800061a <__aeabi_ddiv+0x156>
 8000610:	1909      	adds	r1, r1, r4
 8000612:	3b01      	subs	r3, #1
 8000614:	428c      	cmp	r4, r1
 8000616:	d800      	bhi.n	800061a <__aeabi_ddiv+0x156>
 8000618:	e1ed      	b.n	80009f6 <__aeabi_ddiv+0x532>
 800061a:	1a88      	subs	r0, r1, r2
 800061c:	4642      	mov	r2, r8
 800061e:	0412      	lsls	r2, r2, #16
 8000620:	431a      	orrs	r2, r3
 8000622:	4690      	mov	r8, r2
 8000624:	4641      	mov	r1, r8
 8000626:	9b00      	ldr	r3, [sp, #0]
 8000628:	040e      	lsls	r6, r1, #16
 800062a:	0c1b      	lsrs	r3, r3, #16
 800062c:	001f      	movs	r7, r3
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	9b00      	ldr	r3, [sp, #0]
 8000632:	0c36      	lsrs	r6, r6, #16
 8000634:	041b      	lsls	r3, r3, #16
 8000636:	0c19      	lsrs	r1, r3, #16
 8000638:	000b      	movs	r3, r1
 800063a:	4373      	muls	r3, r6
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	437e      	muls	r6, r7
 8000640:	9103      	str	r1, [sp, #12]
 8000642:	4351      	muls	r1, r2
 8000644:	437a      	muls	r2, r7
 8000646:	0c1f      	lsrs	r7, r3, #16
 8000648:	46bc      	mov	ip, r7
 800064a:	1876      	adds	r6, r6, r1
 800064c:	4466      	add	r6, ip
 800064e:	42b1      	cmp	r1, r6
 8000650:	d903      	bls.n	800065a <__aeabi_ddiv+0x196>
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	0249      	lsls	r1, r1, #9
 8000656:	468c      	mov	ip, r1
 8000658:	4462      	add	r2, ip
 800065a:	0c31      	lsrs	r1, r6, #16
 800065c:	188a      	adds	r2, r1, r2
 800065e:	0431      	lsls	r1, r6, #16
 8000660:	041e      	lsls	r6, r3, #16
 8000662:	0c36      	lsrs	r6, r6, #16
 8000664:	198e      	adds	r6, r1, r6
 8000666:	4290      	cmp	r0, r2
 8000668:	d302      	bcc.n	8000670 <__aeabi_ddiv+0x1ac>
 800066a:	d112      	bne.n	8000692 <__aeabi_ddiv+0x1ce>
 800066c:	42b5      	cmp	r5, r6
 800066e:	d210      	bcs.n	8000692 <__aeabi_ddiv+0x1ce>
 8000670:	4643      	mov	r3, r8
 8000672:	1e59      	subs	r1, r3, #1
 8000674:	9b00      	ldr	r3, [sp, #0]
 8000676:	469c      	mov	ip, r3
 8000678:	4465      	add	r5, ip
 800067a:	001f      	movs	r7, r3
 800067c:	429d      	cmp	r5, r3
 800067e:	419b      	sbcs	r3, r3
 8000680:	425b      	negs	r3, r3
 8000682:	191b      	adds	r3, r3, r4
 8000684:	18c0      	adds	r0, r0, r3
 8000686:	4284      	cmp	r4, r0
 8000688:	d200      	bcs.n	800068c <__aeabi_ddiv+0x1c8>
 800068a:	e1a0      	b.n	80009ce <__aeabi_ddiv+0x50a>
 800068c:	d100      	bne.n	8000690 <__aeabi_ddiv+0x1cc>
 800068e:	e19b      	b.n	80009c8 <__aeabi_ddiv+0x504>
 8000690:	4688      	mov	r8, r1
 8000692:	1bae      	subs	r6, r5, r6
 8000694:	42b5      	cmp	r5, r6
 8000696:	41ad      	sbcs	r5, r5
 8000698:	1a80      	subs	r0, r0, r2
 800069a:	426d      	negs	r5, r5
 800069c:	1b40      	subs	r0, r0, r5
 800069e:	4284      	cmp	r4, r0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_ddiv+0x1e0>
 80006a2:	e1d5      	b.n	8000a50 <__aeabi_ddiv+0x58c>
 80006a4:	4649      	mov	r1, r9
 80006a6:	f7ff fdb1 	bl	800020c <__aeabi_uidivmod>
 80006aa:	9a01      	ldr	r2, [sp, #4]
 80006ac:	040b      	lsls	r3, r1, #16
 80006ae:	4342      	muls	r2, r0
 80006b0:	0c31      	lsrs	r1, r6, #16
 80006b2:	0005      	movs	r5, r0
 80006b4:	4319      	orrs	r1, r3
 80006b6:	428a      	cmp	r2, r1
 80006b8:	d900      	bls.n	80006bc <__aeabi_ddiv+0x1f8>
 80006ba:	e16c      	b.n	8000996 <__aeabi_ddiv+0x4d2>
 80006bc:	1a88      	subs	r0, r1, r2
 80006be:	4649      	mov	r1, r9
 80006c0:	f7ff fda4 	bl	800020c <__aeabi_uidivmod>
 80006c4:	9a01      	ldr	r2, [sp, #4]
 80006c6:	0436      	lsls	r6, r6, #16
 80006c8:	4342      	muls	r2, r0
 80006ca:	0409      	lsls	r1, r1, #16
 80006cc:	0c36      	lsrs	r6, r6, #16
 80006ce:	0003      	movs	r3, r0
 80006d0:	430e      	orrs	r6, r1
 80006d2:	42b2      	cmp	r2, r6
 80006d4:	d900      	bls.n	80006d8 <__aeabi_ddiv+0x214>
 80006d6:	e153      	b.n	8000980 <__aeabi_ddiv+0x4bc>
 80006d8:	9803      	ldr	r0, [sp, #12]
 80006da:	1ab6      	subs	r6, r6, r2
 80006dc:	0002      	movs	r2, r0
 80006de:	042d      	lsls	r5, r5, #16
 80006e0:	431d      	orrs	r5, r3
 80006e2:	9f02      	ldr	r7, [sp, #8]
 80006e4:	042b      	lsls	r3, r5, #16
 80006e6:	0c1b      	lsrs	r3, r3, #16
 80006e8:	435a      	muls	r2, r3
 80006ea:	437b      	muls	r3, r7
 80006ec:	469c      	mov	ip, r3
 80006ee:	0c29      	lsrs	r1, r5, #16
 80006f0:	4348      	muls	r0, r1
 80006f2:	0c13      	lsrs	r3, r2, #16
 80006f4:	4484      	add	ip, r0
 80006f6:	4463      	add	r3, ip
 80006f8:	4379      	muls	r1, r7
 80006fa:	4298      	cmp	r0, r3
 80006fc:	d903      	bls.n	8000706 <__aeabi_ddiv+0x242>
 80006fe:	2080      	movs	r0, #128	; 0x80
 8000700:	0240      	lsls	r0, r0, #9
 8000702:	4684      	mov	ip, r0
 8000704:	4461      	add	r1, ip
 8000706:	0c18      	lsrs	r0, r3, #16
 8000708:	0412      	lsls	r2, r2, #16
 800070a:	041b      	lsls	r3, r3, #16
 800070c:	0c12      	lsrs	r2, r2, #16
 800070e:	1841      	adds	r1, r0, r1
 8000710:	189b      	adds	r3, r3, r2
 8000712:	428e      	cmp	r6, r1
 8000714:	d200      	bcs.n	8000718 <__aeabi_ddiv+0x254>
 8000716:	e0ff      	b.n	8000918 <__aeabi_ddiv+0x454>
 8000718:	d100      	bne.n	800071c <__aeabi_ddiv+0x258>
 800071a:	e0fa      	b.n	8000912 <__aeabi_ddiv+0x44e>
 800071c:	2301      	movs	r3, #1
 800071e:	431d      	orrs	r5, r3
 8000720:	4a49      	ldr	r2, [pc, #292]	; (8000848 <__aeabi_ddiv+0x384>)
 8000722:	445a      	add	r2, fp
 8000724:	2a00      	cmp	r2, #0
 8000726:	dc00      	bgt.n	800072a <__aeabi_ddiv+0x266>
 8000728:	e0aa      	b.n	8000880 <__aeabi_ddiv+0x3bc>
 800072a:	076b      	lsls	r3, r5, #29
 800072c:	d000      	beq.n	8000730 <__aeabi_ddiv+0x26c>
 800072e:	e13d      	b.n	80009ac <__aeabi_ddiv+0x4e8>
 8000730:	08ed      	lsrs	r5, r5, #3
 8000732:	4643      	mov	r3, r8
 8000734:	01db      	lsls	r3, r3, #7
 8000736:	d506      	bpl.n	8000746 <__aeabi_ddiv+0x282>
 8000738:	4642      	mov	r2, r8
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <__aeabi_ddiv+0x388>)
 800073c:	401a      	ands	r2, r3
 800073e:	4690      	mov	r8, r2
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	00d2      	lsls	r2, r2, #3
 8000744:	445a      	add	r2, fp
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <__aeabi_ddiv+0x38c>)
 8000748:	429a      	cmp	r2, r3
 800074a:	dd00      	ble.n	800074e <__aeabi_ddiv+0x28a>
 800074c:	e71f      	b.n	800058e <__aeabi_ddiv+0xca>
 800074e:	4643      	mov	r3, r8
 8000750:	075b      	lsls	r3, r3, #29
 8000752:	431d      	orrs	r5, r3
 8000754:	4643      	mov	r3, r8
 8000756:	0552      	lsls	r2, r2, #21
 8000758:	025c      	lsls	r4, r3, #9
 800075a:	0b24      	lsrs	r4, r4, #12
 800075c:	0d53      	lsrs	r3, r2, #21
 800075e:	e708      	b.n	8000572 <__aeabi_ddiv+0xae>
 8000760:	4652      	mov	r2, sl
 8000762:	4322      	orrs	r2, r4
 8000764:	d100      	bne.n	8000768 <__aeabi_ddiv+0x2a4>
 8000766:	e07b      	b.n	8000860 <__aeabi_ddiv+0x39c>
 8000768:	2c00      	cmp	r4, #0
 800076a:	d100      	bne.n	800076e <__aeabi_ddiv+0x2aa>
 800076c:	e0fa      	b.n	8000964 <__aeabi_ddiv+0x4a0>
 800076e:	0020      	movs	r0, r4
 8000770:	f001 f858 	bl	8001824 <__clzsi2>
 8000774:	0002      	movs	r2, r0
 8000776:	3a0b      	subs	r2, #11
 8000778:	231d      	movs	r3, #29
 800077a:	0001      	movs	r1, r0
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	4652      	mov	r2, sl
 8000780:	3908      	subs	r1, #8
 8000782:	40da      	lsrs	r2, r3
 8000784:	408c      	lsls	r4, r1
 8000786:	4314      	orrs	r4, r2
 8000788:	4652      	mov	r2, sl
 800078a:	408a      	lsls	r2, r1
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <__aeabi_ddiv+0x390>)
 800078e:	4458      	add	r0, fp
 8000790:	469b      	mov	fp, r3
 8000792:	4483      	add	fp, r0
 8000794:	2000      	movs	r0, #0
 8000796:	e6d5      	b.n	8000544 <__aeabi_ddiv+0x80>
 8000798:	464b      	mov	r3, r9
 800079a:	4323      	orrs	r3, r4
 800079c:	4698      	mov	r8, r3
 800079e:	d044      	beq.n	800082a <__aeabi_ddiv+0x366>
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_ddiv+0x2e2>
 80007a4:	e0ce      	b.n	8000944 <__aeabi_ddiv+0x480>
 80007a6:	0020      	movs	r0, r4
 80007a8:	f001 f83c 	bl	8001824 <__clzsi2>
 80007ac:	0001      	movs	r1, r0
 80007ae:	0002      	movs	r2, r0
 80007b0:	390b      	subs	r1, #11
 80007b2:	231d      	movs	r3, #29
 80007b4:	1a5b      	subs	r3, r3, r1
 80007b6:	4649      	mov	r1, r9
 80007b8:	0010      	movs	r0, r2
 80007ba:	40d9      	lsrs	r1, r3
 80007bc:	3808      	subs	r0, #8
 80007be:	4084      	lsls	r4, r0
 80007c0:	000b      	movs	r3, r1
 80007c2:	464d      	mov	r5, r9
 80007c4:	4323      	orrs	r3, r4
 80007c6:	4698      	mov	r8, r3
 80007c8:	4085      	lsls	r5, r0
 80007ca:	4823      	ldr	r0, [pc, #140]	; (8000858 <__aeabi_ddiv+0x394>)
 80007cc:	1a83      	subs	r3, r0, r2
 80007ce:	469b      	mov	fp, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	4699      	mov	r9, r3
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	e69a      	b.n	800050e <__aeabi_ddiv+0x4a>
 80007d8:	464b      	mov	r3, r9
 80007da:	4323      	orrs	r3, r4
 80007dc:	4698      	mov	r8, r3
 80007de:	d11d      	bne.n	800081c <__aeabi_ddiv+0x358>
 80007e0:	2308      	movs	r3, #8
 80007e2:	4699      	mov	r9, r3
 80007e4:	3b06      	subs	r3, #6
 80007e6:	2500      	movs	r5, #0
 80007e8:	4683      	mov	fp, r0
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	e68f      	b.n	800050e <__aeabi_ddiv+0x4a>
 80007ee:	4652      	mov	r2, sl
 80007f0:	4322      	orrs	r2, r4
 80007f2:	d109      	bne.n	8000808 <__aeabi_ddiv+0x344>
 80007f4:	2302      	movs	r3, #2
 80007f6:	4649      	mov	r1, r9
 80007f8:	4319      	orrs	r1, r3
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <__aeabi_ddiv+0x398>)
 80007fc:	4689      	mov	r9, r1
 80007fe:	469c      	mov	ip, r3
 8000800:	2400      	movs	r4, #0
 8000802:	2002      	movs	r0, #2
 8000804:	44e3      	add	fp, ip
 8000806:	e69d      	b.n	8000544 <__aeabi_ddiv+0x80>
 8000808:	2303      	movs	r3, #3
 800080a:	464a      	mov	r2, r9
 800080c:	431a      	orrs	r2, r3
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <__aeabi_ddiv+0x398>)
 8000810:	4691      	mov	r9, r2
 8000812:	469c      	mov	ip, r3
 8000814:	4652      	mov	r2, sl
 8000816:	2003      	movs	r0, #3
 8000818:	44e3      	add	fp, ip
 800081a:	e693      	b.n	8000544 <__aeabi_ddiv+0x80>
 800081c:	230c      	movs	r3, #12
 800081e:	4699      	mov	r9, r3
 8000820:	3b09      	subs	r3, #9
 8000822:	46a0      	mov	r8, r4
 8000824:	4683      	mov	fp, r0
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	e671      	b.n	800050e <__aeabi_ddiv+0x4a>
 800082a:	2304      	movs	r3, #4
 800082c:	4699      	mov	r9, r3
 800082e:	2300      	movs	r3, #0
 8000830:	469b      	mov	fp, r3
 8000832:	3301      	adds	r3, #1
 8000834:	2500      	movs	r5, #0
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	e669      	b.n	800050e <__aeabi_ddiv+0x4a>
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	000007ff 	.word	0x000007ff
 8000840:	fffffc01 	.word	0xfffffc01
 8000844:	080048b0 	.word	0x080048b0
 8000848:	000003ff 	.word	0x000003ff
 800084c:	feffffff 	.word	0xfeffffff
 8000850:	000007fe 	.word	0x000007fe
 8000854:	000003f3 	.word	0x000003f3
 8000858:	fffffc0d 	.word	0xfffffc0d
 800085c:	fffff801 	.word	0xfffff801
 8000860:	4649      	mov	r1, r9
 8000862:	2301      	movs	r3, #1
 8000864:	4319      	orrs	r1, r3
 8000866:	4689      	mov	r9, r1
 8000868:	2400      	movs	r4, #0
 800086a:	2001      	movs	r0, #1
 800086c:	e66a      	b.n	8000544 <__aeabi_ddiv+0x80>
 800086e:	2300      	movs	r3, #0
 8000870:	2480      	movs	r4, #128	; 0x80
 8000872:	469a      	mov	sl, r3
 8000874:	2500      	movs	r5, #0
 8000876:	4b8a      	ldr	r3, [pc, #552]	; (8000aa0 <__aeabi_ddiv+0x5dc>)
 8000878:	0324      	lsls	r4, r4, #12
 800087a:	e67a      	b.n	8000572 <__aeabi_ddiv+0xae>
 800087c:	2501      	movs	r5, #1
 800087e:	426d      	negs	r5, r5
 8000880:	2301      	movs	r3, #1
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	2b38      	cmp	r3, #56	; 0x38
 8000886:	dd00      	ble.n	800088a <__aeabi_ddiv+0x3c6>
 8000888:	e670      	b.n	800056c <__aeabi_ddiv+0xa8>
 800088a:	2b1f      	cmp	r3, #31
 800088c:	dc00      	bgt.n	8000890 <__aeabi_ddiv+0x3cc>
 800088e:	e0bf      	b.n	8000a10 <__aeabi_ddiv+0x54c>
 8000890:	211f      	movs	r1, #31
 8000892:	4249      	negs	r1, r1
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	4641      	mov	r1, r8
 8000898:	40d1      	lsrs	r1, r2
 800089a:	000a      	movs	r2, r1
 800089c:	2b20      	cmp	r3, #32
 800089e:	d004      	beq.n	80008aa <__aeabi_ddiv+0x3e6>
 80008a0:	4641      	mov	r1, r8
 80008a2:	4b80      	ldr	r3, [pc, #512]	; (8000aa4 <__aeabi_ddiv+0x5e0>)
 80008a4:	445b      	add	r3, fp
 80008a6:	4099      	lsls	r1, r3
 80008a8:	430d      	orrs	r5, r1
 80008aa:	1e6b      	subs	r3, r5, #1
 80008ac:	419d      	sbcs	r5, r3
 80008ae:	2307      	movs	r3, #7
 80008b0:	432a      	orrs	r2, r5
 80008b2:	001d      	movs	r5, r3
 80008b4:	2400      	movs	r4, #0
 80008b6:	4015      	ands	r5, r2
 80008b8:	4213      	tst	r3, r2
 80008ba:	d100      	bne.n	80008be <__aeabi_ddiv+0x3fa>
 80008bc:	e0d4      	b.n	8000a68 <__aeabi_ddiv+0x5a4>
 80008be:	210f      	movs	r1, #15
 80008c0:	2300      	movs	r3, #0
 80008c2:	4011      	ands	r1, r2
 80008c4:	2904      	cmp	r1, #4
 80008c6:	d100      	bne.n	80008ca <__aeabi_ddiv+0x406>
 80008c8:	e0cb      	b.n	8000a62 <__aeabi_ddiv+0x59e>
 80008ca:	1d11      	adds	r1, r2, #4
 80008cc:	4291      	cmp	r1, r2
 80008ce:	4192      	sbcs	r2, r2
 80008d0:	4252      	negs	r2, r2
 80008d2:	189b      	adds	r3, r3, r2
 80008d4:	000a      	movs	r2, r1
 80008d6:	0219      	lsls	r1, r3, #8
 80008d8:	d400      	bmi.n	80008dc <__aeabi_ddiv+0x418>
 80008da:	e0c2      	b.n	8000a62 <__aeabi_ddiv+0x59e>
 80008dc:	2301      	movs	r3, #1
 80008de:	2400      	movs	r4, #0
 80008e0:	2500      	movs	r5, #0
 80008e2:	e646      	b.n	8000572 <__aeabi_ddiv+0xae>
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	4641      	mov	r1, r8
 80008e8:	031b      	lsls	r3, r3, #12
 80008ea:	4219      	tst	r1, r3
 80008ec:	d008      	beq.n	8000900 <__aeabi_ddiv+0x43c>
 80008ee:	421c      	tst	r4, r3
 80008f0:	d106      	bne.n	8000900 <__aeabi_ddiv+0x43c>
 80008f2:	431c      	orrs	r4, r3
 80008f4:	0324      	lsls	r4, r4, #12
 80008f6:	46ba      	mov	sl, r7
 80008f8:	0015      	movs	r5, r2
 80008fa:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <__aeabi_ddiv+0x5dc>)
 80008fc:	0b24      	lsrs	r4, r4, #12
 80008fe:	e638      	b.n	8000572 <__aeabi_ddiv+0xae>
 8000900:	2480      	movs	r4, #128	; 0x80
 8000902:	4643      	mov	r3, r8
 8000904:	0324      	lsls	r4, r4, #12
 8000906:	431c      	orrs	r4, r3
 8000908:	0324      	lsls	r4, r4, #12
 800090a:	46b2      	mov	sl, r6
 800090c:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <__aeabi_ddiv+0x5dc>)
 800090e:	0b24      	lsrs	r4, r4, #12
 8000910:	e62f      	b.n	8000572 <__aeabi_ddiv+0xae>
 8000912:	2b00      	cmp	r3, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_ddiv+0x454>
 8000916:	e703      	b.n	8000720 <__aeabi_ddiv+0x25c>
 8000918:	19a6      	adds	r6, r4, r6
 800091a:	1e68      	subs	r0, r5, #1
 800091c:	42a6      	cmp	r6, r4
 800091e:	d200      	bcs.n	8000922 <__aeabi_ddiv+0x45e>
 8000920:	e08d      	b.n	8000a3e <__aeabi_ddiv+0x57a>
 8000922:	428e      	cmp	r6, r1
 8000924:	d200      	bcs.n	8000928 <__aeabi_ddiv+0x464>
 8000926:	e0a3      	b.n	8000a70 <__aeabi_ddiv+0x5ac>
 8000928:	d100      	bne.n	800092c <__aeabi_ddiv+0x468>
 800092a:	e0b3      	b.n	8000a94 <__aeabi_ddiv+0x5d0>
 800092c:	0005      	movs	r5, r0
 800092e:	e6f5      	b.n	800071c <__aeabi_ddiv+0x258>
 8000930:	42aa      	cmp	r2, r5
 8000932:	d900      	bls.n	8000936 <__aeabi_ddiv+0x472>
 8000934:	e639      	b.n	80005aa <__aeabi_ddiv+0xe6>
 8000936:	4643      	mov	r3, r8
 8000938:	07de      	lsls	r6, r3, #31
 800093a:	0858      	lsrs	r0, r3, #1
 800093c:	086b      	lsrs	r3, r5, #1
 800093e:	431e      	orrs	r6, r3
 8000940:	07ed      	lsls	r5, r5, #31
 8000942:	e639      	b.n	80005b8 <__aeabi_ddiv+0xf4>
 8000944:	4648      	mov	r0, r9
 8000946:	f000 ff6d 	bl	8001824 <__clzsi2>
 800094a:	0001      	movs	r1, r0
 800094c:	0002      	movs	r2, r0
 800094e:	3115      	adds	r1, #21
 8000950:	3220      	adds	r2, #32
 8000952:	291c      	cmp	r1, #28
 8000954:	dc00      	bgt.n	8000958 <__aeabi_ddiv+0x494>
 8000956:	e72c      	b.n	80007b2 <__aeabi_ddiv+0x2ee>
 8000958:	464b      	mov	r3, r9
 800095a:	3808      	subs	r0, #8
 800095c:	4083      	lsls	r3, r0
 800095e:	2500      	movs	r5, #0
 8000960:	4698      	mov	r8, r3
 8000962:	e732      	b.n	80007ca <__aeabi_ddiv+0x306>
 8000964:	f000 ff5e 	bl	8001824 <__clzsi2>
 8000968:	0003      	movs	r3, r0
 800096a:	001a      	movs	r2, r3
 800096c:	3215      	adds	r2, #21
 800096e:	3020      	adds	r0, #32
 8000970:	2a1c      	cmp	r2, #28
 8000972:	dc00      	bgt.n	8000976 <__aeabi_ddiv+0x4b2>
 8000974:	e700      	b.n	8000778 <__aeabi_ddiv+0x2b4>
 8000976:	4654      	mov	r4, sl
 8000978:	3b08      	subs	r3, #8
 800097a:	2200      	movs	r2, #0
 800097c:	409c      	lsls	r4, r3
 800097e:	e705      	b.n	800078c <__aeabi_ddiv+0x2c8>
 8000980:	1936      	adds	r6, r6, r4
 8000982:	3b01      	subs	r3, #1
 8000984:	42b4      	cmp	r4, r6
 8000986:	d900      	bls.n	800098a <__aeabi_ddiv+0x4c6>
 8000988:	e6a6      	b.n	80006d8 <__aeabi_ddiv+0x214>
 800098a:	42b2      	cmp	r2, r6
 800098c:	d800      	bhi.n	8000990 <__aeabi_ddiv+0x4cc>
 800098e:	e6a3      	b.n	80006d8 <__aeabi_ddiv+0x214>
 8000990:	1e83      	subs	r3, r0, #2
 8000992:	1936      	adds	r6, r6, r4
 8000994:	e6a0      	b.n	80006d8 <__aeabi_ddiv+0x214>
 8000996:	1909      	adds	r1, r1, r4
 8000998:	3d01      	subs	r5, #1
 800099a:	428c      	cmp	r4, r1
 800099c:	d900      	bls.n	80009a0 <__aeabi_ddiv+0x4dc>
 800099e:	e68d      	b.n	80006bc <__aeabi_ddiv+0x1f8>
 80009a0:	428a      	cmp	r2, r1
 80009a2:	d800      	bhi.n	80009a6 <__aeabi_ddiv+0x4e2>
 80009a4:	e68a      	b.n	80006bc <__aeabi_ddiv+0x1f8>
 80009a6:	1e85      	subs	r5, r0, #2
 80009a8:	1909      	adds	r1, r1, r4
 80009aa:	e687      	b.n	80006bc <__aeabi_ddiv+0x1f8>
 80009ac:	230f      	movs	r3, #15
 80009ae:	402b      	ands	r3, r5
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d100      	bne.n	80009b6 <__aeabi_ddiv+0x4f2>
 80009b4:	e6bc      	b.n	8000730 <__aeabi_ddiv+0x26c>
 80009b6:	2305      	movs	r3, #5
 80009b8:	425b      	negs	r3, r3
 80009ba:	42ab      	cmp	r3, r5
 80009bc:	419b      	sbcs	r3, r3
 80009be:	3504      	adds	r5, #4
 80009c0:	425b      	negs	r3, r3
 80009c2:	08ed      	lsrs	r5, r5, #3
 80009c4:	4498      	add	r8, r3
 80009c6:	e6b4      	b.n	8000732 <__aeabi_ddiv+0x26e>
 80009c8:	42af      	cmp	r7, r5
 80009ca:	d900      	bls.n	80009ce <__aeabi_ddiv+0x50a>
 80009cc:	e660      	b.n	8000690 <__aeabi_ddiv+0x1cc>
 80009ce:	4282      	cmp	r2, r0
 80009d0:	d804      	bhi.n	80009dc <__aeabi_ddiv+0x518>
 80009d2:	d000      	beq.n	80009d6 <__aeabi_ddiv+0x512>
 80009d4:	e65c      	b.n	8000690 <__aeabi_ddiv+0x1cc>
 80009d6:	42ae      	cmp	r6, r5
 80009d8:	d800      	bhi.n	80009dc <__aeabi_ddiv+0x518>
 80009da:	e659      	b.n	8000690 <__aeabi_ddiv+0x1cc>
 80009dc:	2302      	movs	r3, #2
 80009de:	425b      	negs	r3, r3
 80009e0:	469c      	mov	ip, r3
 80009e2:	9b00      	ldr	r3, [sp, #0]
 80009e4:	44e0      	add	r8, ip
 80009e6:	469c      	mov	ip, r3
 80009e8:	4465      	add	r5, ip
 80009ea:	429d      	cmp	r5, r3
 80009ec:	419b      	sbcs	r3, r3
 80009ee:	425b      	negs	r3, r3
 80009f0:	191b      	adds	r3, r3, r4
 80009f2:	18c0      	adds	r0, r0, r3
 80009f4:	e64d      	b.n	8000692 <__aeabi_ddiv+0x1ce>
 80009f6:	428a      	cmp	r2, r1
 80009f8:	d800      	bhi.n	80009fc <__aeabi_ddiv+0x538>
 80009fa:	e60e      	b.n	800061a <__aeabi_ddiv+0x156>
 80009fc:	1e83      	subs	r3, r0, #2
 80009fe:	1909      	adds	r1, r1, r4
 8000a00:	e60b      	b.n	800061a <__aeabi_ddiv+0x156>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	d800      	bhi.n	8000a08 <__aeabi_ddiv+0x544>
 8000a06:	e5f4      	b.n	80005f2 <__aeabi_ddiv+0x12e>
 8000a08:	1e83      	subs	r3, r0, #2
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	1909      	adds	r1, r1, r4
 8000a0e:	e5f0      	b.n	80005f2 <__aeabi_ddiv+0x12e>
 8000a10:	4925      	ldr	r1, [pc, #148]	; (8000aa8 <__aeabi_ddiv+0x5e4>)
 8000a12:	0028      	movs	r0, r5
 8000a14:	4459      	add	r1, fp
 8000a16:	408d      	lsls	r5, r1
 8000a18:	4642      	mov	r2, r8
 8000a1a:	408a      	lsls	r2, r1
 8000a1c:	1e69      	subs	r1, r5, #1
 8000a1e:	418d      	sbcs	r5, r1
 8000a20:	4641      	mov	r1, r8
 8000a22:	40d8      	lsrs	r0, r3
 8000a24:	40d9      	lsrs	r1, r3
 8000a26:	4302      	orrs	r2, r0
 8000a28:	432a      	orrs	r2, r5
 8000a2a:	000b      	movs	r3, r1
 8000a2c:	0751      	lsls	r1, r2, #29
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_ddiv+0x56e>
 8000a30:	e751      	b.n	80008d6 <__aeabi_ddiv+0x412>
 8000a32:	210f      	movs	r1, #15
 8000a34:	4011      	ands	r1, r2
 8000a36:	2904      	cmp	r1, #4
 8000a38:	d000      	beq.n	8000a3c <__aeabi_ddiv+0x578>
 8000a3a:	e746      	b.n	80008ca <__aeabi_ddiv+0x406>
 8000a3c:	e74b      	b.n	80008d6 <__aeabi_ddiv+0x412>
 8000a3e:	0005      	movs	r5, r0
 8000a40:	428e      	cmp	r6, r1
 8000a42:	d000      	beq.n	8000a46 <__aeabi_ddiv+0x582>
 8000a44:	e66a      	b.n	800071c <__aeabi_ddiv+0x258>
 8000a46:	9a00      	ldr	r2, [sp, #0]
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_ddiv+0x58a>
 8000a4c:	e666      	b.n	800071c <__aeabi_ddiv+0x258>
 8000a4e:	e667      	b.n	8000720 <__aeabi_ddiv+0x25c>
 8000a50:	4a16      	ldr	r2, [pc, #88]	; (8000aac <__aeabi_ddiv+0x5e8>)
 8000a52:	445a      	add	r2, fp
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	dc00      	bgt.n	8000a5a <__aeabi_ddiv+0x596>
 8000a58:	e710      	b.n	800087c <__aeabi_ddiv+0x3b8>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	2500      	movs	r5, #0
 8000a5e:	4498      	add	r8, r3
 8000a60:	e667      	b.n	8000732 <__aeabi_ddiv+0x26e>
 8000a62:	075d      	lsls	r5, r3, #29
 8000a64:	025b      	lsls	r3, r3, #9
 8000a66:	0b1c      	lsrs	r4, r3, #12
 8000a68:	08d2      	lsrs	r2, r2, #3
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4315      	orrs	r5, r2
 8000a6e:	e580      	b.n	8000572 <__aeabi_ddiv+0xae>
 8000a70:	9800      	ldr	r0, [sp, #0]
 8000a72:	3d02      	subs	r5, #2
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	4282      	cmp	r2, r0
 8000a78:	41bf      	sbcs	r7, r7
 8000a7a:	427f      	negs	r7, r7
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	1936      	adds	r6, r6, r4
 8000a80:	9200      	str	r2, [sp, #0]
 8000a82:	e7dd      	b.n	8000a40 <__aeabi_ddiv+0x57c>
 8000a84:	2480      	movs	r4, #128	; 0x80
 8000a86:	4643      	mov	r3, r8
 8000a88:	0324      	lsls	r4, r4, #12
 8000a8a:	431c      	orrs	r4, r3
 8000a8c:	0324      	lsls	r4, r4, #12
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__aeabi_ddiv+0x5dc>)
 8000a90:	0b24      	lsrs	r4, r4, #12
 8000a92:	e56e      	b.n	8000572 <__aeabi_ddiv+0xae>
 8000a94:	9a00      	ldr	r2, [sp, #0]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d3ea      	bcc.n	8000a70 <__aeabi_ddiv+0x5ac>
 8000a9a:	0005      	movs	r5, r0
 8000a9c:	e7d3      	b.n	8000a46 <__aeabi_ddiv+0x582>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	0000043e 	.word	0x0000043e
 8000aa8:	0000041e 	.word	0x0000041e
 8000aac:	000003ff 	.word	0x000003ff

08000ab0 <__aeabi_dmul>:
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	4657      	mov	r7, sl
 8000ab4:	464e      	mov	r6, r9
 8000ab6:	4645      	mov	r5, r8
 8000ab8:	46de      	mov	lr, fp
 8000aba:	b5e0      	push	{r5, r6, r7, lr}
 8000abc:	4698      	mov	r8, r3
 8000abe:	030c      	lsls	r4, r1, #12
 8000ac0:	004b      	lsls	r3, r1, #1
 8000ac2:	0006      	movs	r6, r0
 8000ac4:	4692      	mov	sl, r2
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	0b24      	lsrs	r4, r4, #12
 8000aca:	0d5b      	lsrs	r3, r3, #21
 8000acc:	0fcf      	lsrs	r7, r1, #31
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dmul+0x24>
 8000ad2:	e15c      	b.n	8000d8e <__aeabi_dmul+0x2de>
 8000ad4:	4ad9      	ldr	r2, [pc, #868]	; (8000e3c <__aeabi_dmul+0x38c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dmul+0x2c>
 8000ada:	e175      	b.n	8000dc8 <__aeabi_dmul+0x318>
 8000adc:	0f42      	lsrs	r2, r0, #29
 8000ade:	00e4      	lsls	r4, r4, #3
 8000ae0:	4314      	orrs	r4, r2
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0412      	lsls	r2, r2, #16
 8000ae6:	4314      	orrs	r4, r2
 8000ae8:	4ad5      	ldr	r2, [pc, #852]	; (8000e40 <__aeabi_dmul+0x390>)
 8000aea:	00c5      	lsls	r5, r0, #3
 8000aec:	4694      	mov	ip, r2
 8000aee:	4463      	add	r3, ip
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2300      	movs	r3, #0
 8000af4:	4699      	mov	r9, r3
 8000af6:	469b      	mov	fp, r3
 8000af8:	4643      	mov	r3, r8
 8000afa:	4642      	mov	r2, r8
 8000afc:	031e      	lsls	r6, r3, #12
 8000afe:	0fd2      	lsrs	r2, r2, #31
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4650      	mov	r0, sl
 8000b04:	4690      	mov	r8, r2
 8000b06:	0b36      	lsrs	r6, r6, #12
 8000b08:	0d5b      	lsrs	r3, r3, #21
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dmul+0x5e>
 8000b0c:	e120      	b.n	8000d50 <__aeabi_dmul+0x2a0>
 8000b0e:	4acb      	ldr	r2, [pc, #812]	; (8000e3c <__aeabi_dmul+0x38c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dmul+0x66>
 8000b14:	e162      	b.n	8000ddc <__aeabi_dmul+0x32c>
 8000b16:	49ca      	ldr	r1, [pc, #808]	; (8000e40 <__aeabi_dmul+0x390>)
 8000b18:	0f42      	lsrs	r2, r0, #29
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	9900      	ldr	r1, [sp, #0]
 8000b1e:	4463      	add	r3, ip
 8000b20:	00f6      	lsls	r6, r6, #3
 8000b22:	468c      	mov	ip, r1
 8000b24:	4316      	orrs	r6, r2
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	449c      	add	ip, r3
 8000b2a:	0412      	lsls	r2, r2, #16
 8000b2c:	4663      	mov	r3, ip
 8000b2e:	4316      	orrs	r6, r2
 8000b30:	00c2      	lsls	r2, r0, #3
 8000b32:	2000      	movs	r0, #0
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	9900      	ldr	r1, [sp, #0]
 8000b38:	4643      	mov	r3, r8
 8000b3a:	3101      	adds	r1, #1
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	4649      	mov	r1, r9
 8000b40:	407b      	eors	r3, r7
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	290f      	cmp	r1, #15
 8000b46:	d826      	bhi.n	8000b96 <__aeabi_dmul+0xe6>
 8000b48:	4bbe      	ldr	r3, [pc, #760]	; (8000e44 <__aeabi_dmul+0x394>)
 8000b4a:	0089      	lsls	r1, r1, #2
 8000b4c:	5859      	ldr	r1, [r3, r1]
 8000b4e:	468f      	mov	pc, r1
 8000b50:	4643      	mov	r3, r8
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	0034      	movs	r4, r6
 8000b56:	0015      	movs	r5, r2
 8000b58:	4683      	mov	fp, r0
 8000b5a:	465b      	mov	r3, fp
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d016      	beq.n	8000b8e <__aeabi_dmul+0xde>
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dmul+0xb6>
 8000b64:	e203      	b.n	8000f6e <__aeabi_dmul+0x4be>
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d000      	beq.n	8000b6c <__aeabi_dmul+0xbc>
 8000b6a:	e0cd      	b.n	8000d08 <__aeabi_dmul+0x258>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2400      	movs	r4, #0
 8000b70:	2500      	movs	r5, #0
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	0512      	lsls	r2, r2, #20
 8000b76:	4322      	orrs	r2, r4
 8000b78:	07db      	lsls	r3, r3, #31
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	0028      	movs	r0, r5
 8000b7e:	0011      	movs	r1, r2
 8000b80:	b007      	add	sp, #28
 8000b82:	bcf0      	pop	{r4, r5, r6, r7}
 8000b84:	46bb      	mov	fp, r7
 8000b86:	46b2      	mov	sl, r6
 8000b88:	46a9      	mov	r9, r5
 8000b8a:	46a0      	mov	r8, r4
 8000b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b8e:	2400      	movs	r4, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	4aaa      	ldr	r2, [pc, #680]	; (8000e3c <__aeabi_dmul+0x38c>)
 8000b94:	e7ed      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000b96:	0c28      	lsrs	r0, r5, #16
 8000b98:	042d      	lsls	r5, r5, #16
 8000b9a:	0c2d      	lsrs	r5, r5, #16
 8000b9c:	002b      	movs	r3, r5
 8000b9e:	0c11      	lsrs	r1, r2, #16
 8000ba0:	0412      	lsls	r2, r2, #16
 8000ba2:	0c12      	lsrs	r2, r2, #16
 8000ba4:	4353      	muls	r3, r2
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	002f      	movs	r7, r5
 8000bac:	4343      	muls	r3, r0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	434f      	muls	r7, r1
 8000bb2:	444f      	add	r7, r9
 8000bb4:	46bb      	mov	fp, r7
 8000bb6:	4647      	mov	r7, r8
 8000bb8:	000b      	movs	r3, r1
 8000bba:	0c3f      	lsrs	r7, r7, #16
 8000bbc:	46ba      	mov	sl, r7
 8000bbe:	4343      	muls	r3, r0
 8000bc0:	44da      	add	sl, fp
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	45d1      	cmp	r9, sl
 8000bc6:	d904      	bls.n	8000bd2 <__aeabi_dmul+0x122>
 8000bc8:	2780      	movs	r7, #128	; 0x80
 8000bca:	027f      	lsls	r7, r7, #9
 8000bcc:	46b9      	mov	r9, r7
 8000bce:	444b      	add	r3, r9
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	4653      	mov	r3, sl
 8000bd4:	0c1b      	lsrs	r3, r3, #16
 8000bd6:	469b      	mov	fp, r3
 8000bd8:	4653      	mov	r3, sl
 8000bda:	041f      	lsls	r7, r3, #16
 8000bdc:	4643      	mov	r3, r8
 8000bde:	041b      	lsls	r3, r3, #16
 8000be0:	0c1b      	lsrs	r3, r3, #16
 8000be2:	4698      	mov	r8, r3
 8000be4:	003b      	movs	r3, r7
 8000be6:	4443      	add	r3, r8
 8000be8:	9304      	str	r3, [sp, #16]
 8000bea:	0c33      	lsrs	r3, r6, #16
 8000bec:	0436      	lsls	r6, r6, #16
 8000bee:	0c36      	lsrs	r6, r6, #16
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	4343      	muls	r3, r0
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	4343      	muls	r3, r0
 8000bfc:	002f      	movs	r7, r5
 8000bfe:	469a      	mov	sl, r3
 8000c00:	4643      	mov	r3, r8
 8000c02:	4377      	muls	r7, r6
 8000c04:	435d      	muls	r5, r3
 8000c06:	0c38      	lsrs	r0, r7, #16
 8000c08:	444d      	add	r5, r9
 8000c0a:	1945      	adds	r5, r0, r5
 8000c0c:	45a9      	cmp	r9, r5
 8000c0e:	d903      	bls.n	8000c18 <__aeabi_dmul+0x168>
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	025b      	lsls	r3, r3, #9
 8000c14:	4699      	mov	r9, r3
 8000c16:	44ca      	add	sl, r9
 8000c18:	043f      	lsls	r7, r7, #16
 8000c1a:	0c28      	lsrs	r0, r5, #16
 8000c1c:	0c3f      	lsrs	r7, r7, #16
 8000c1e:	042d      	lsls	r5, r5, #16
 8000c20:	19ed      	adds	r5, r5, r7
 8000c22:	0c27      	lsrs	r7, r4, #16
 8000c24:	0424      	lsls	r4, r4, #16
 8000c26:	0c24      	lsrs	r4, r4, #16
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0020      	movs	r0, r4
 8000c2c:	4350      	muls	r0, r2
 8000c2e:	437a      	muls	r2, r7
 8000c30:	4691      	mov	r9, r2
 8000c32:	003a      	movs	r2, r7
 8000c34:	4453      	add	r3, sl
 8000c36:	9305      	str	r3, [sp, #20]
 8000c38:	0c03      	lsrs	r3, r0, #16
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	434a      	muls	r2, r1
 8000c3e:	4361      	muls	r1, r4
 8000c40:	4449      	add	r1, r9
 8000c42:	4451      	add	r1, sl
 8000c44:	44ab      	add	fp, r5
 8000c46:	4589      	cmp	r9, r1
 8000c48:	d903      	bls.n	8000c52 <__aeabi_dmul+0x1a2>
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	4699      	mov	r9, r3
 8000c50:	444a      	add	r2, r9
 8000c52:	0400      	lsls	r0, r0, #16
 8000c54:	0c0b      	lsrs	r3, r1, #16
 8000c56:	0c00      	lsrs	r0, r0, #16
 8000c58:	0409      	lsls	r1, r1, #16
 8000c5a:	1809      	adds	r1, r1, r0
 8000c5c:	0020      	movs	r0, r4
 8000c5e:	4699      	mov	r9, r3
 8000c60:	4643      	mov	r3, r8
 8000c62:	4370      	muls	r0, r6
 8000c64:	435c      	muls	r4, r3
 8000c66:	437e      	muls	r6, r7
 8000c68:	435f      	muls	r7, r3
 8000c6a:	0c03      	lsrs	r3, r0, #16
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	19a4      	adds	r4, r4, r6
 8000c70:	4444      	add	r4, r8
 8000c72:	444a      	add	r2, r9
 8000c74:	9703      	str	r7, [sp, #12]
 8000c76:	42a6      	cmp	r6, r4
 8000c78:	d904      	bls.n	8000c84 <__aeabi_dmul+0x1d4>
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	025b      	lsls	r3, r3, #9
 8000c7e:	4698      	mov	r8, r3
 8000c80:	4447      	add	r7, r8
 8000c82:	9703      	str	r7, [sp, #12]
 8000c84:	0423      	lsls	r3, r4, #16
 8000c86:	9e02      	ldr	r6, [sp, #8]
 8000c88:	469a      	mov	sl, r3
 8000c8a:	9b05      	ldr	r3, [sp, #20]
 8000c8c:	445e      	add	r6, fp
 8000c8e:	4698      	mov	r8, r3
 8000c90:	42ae      	cmp	r6, r5
 8000c92:	41ad      	sbcs	r5, r5
 8000c94:	1876      	adds	r6, r6, r1
 8000c96:	428e      	cmp	r6, r1
 8000c98:	4189      	sbcs	r1, r1
 8000c9a:	0400      	lsls	r0, r0, #16
 8000c9c:	0c00      	lsrs	r0, r0, #16
 8000c9e:	4450      	add	r0, sl
 8000ca0:	4440      	add	r0, r8
 8000ca2:	426d      	negs	r5, r5
 8000ca4:	1947      	adds	r7, r0, r5
 8000ca6:	46b8      	mov	r8, r7
 8000ca8:	4693      	mov	fp, r2
 8000caa:	4249      	negs	r1, r1
 8000cac:	4689      	mov	r9, r1
 8000cae:	44c3      	add	fp, r8
 8000cb0:	44d9      	add	r9, fp
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	4180      	sbcs	r0, r0
 8000cb6:	45a8      	cmp	r8, r5
 8000cb8:	41ad      	sbcs	r5, r5
 8000cba:	4593      	cmp	fp, r2
 8000cbc:	4192      	sbcs	r2, r2
 8000cbe:	4589      	cmp	r9, r1
 8000cc0:	4189      	sbcs	r1, r1
 8000cc2:	426d      	negs	r5, r5
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	4328      	orrs	r0, r5
 8000cc8:	0c24      	lsrs	r4, r4, #16
 8000cca:	4252      	negs	r2, r2
 8000ccc:	4249      	negs	r1, r1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	9b03      	ldr	r3, [sp, #12]
 8000cd2:	1900      	adds	r0, r0, r4
 8000cd4:	1880      	adds	r0, r0, r2
 8000cd6:	18c7      	adds	r7, r0, r3
 8000cd8:	464b      	mov	r3, r9
 8000cda:	0ddc      	lsrs	r4, r3, #23
 8000cdc:	9b04      	ldr	r3, [sp, #16]
 8000cde:	0275      	lsls	r5, r6, #9
 8000ce0:	431d      	orrs	r5, r3
 8000ce2:	1e6a      	subs	r2, r5, #1
 8000ce4:	4195      	sbcs	r5, r2
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	0df6      	lsrs	r6, r6, #23
 8000cea:	027f      	lsls	r7, r7, #9
 8000cec:	4335      	orrs	r5, r6
 8000cee:	025a      	lsls	r2, r3, #9
 8000cf0:	433c      	orrs	r4, r7
 8000cf2:	4315      	orrs	r5, r2
 8000cf4:	01fb      	lsls	r3, r7, #7
 8000cf6:	d400      	bmi.n	8000cfa <__aeabi_dmul+0x24a>
 8000cf8:	e11c      	b.n	8000f34 <__aeabi_dmul+0x484>
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	086a      	lsrs	r2, r5, #1
 8000cfe:	400d      	ands	r5, r1
 8000d00:	4315      	orrs	r5, r2
 8000d02:	07e2      	lsls	r2, r4, #31
 8000d04:	4315      	orrs	r5, r2
 8000d06:	0864      	lsrs	r4, r4, #1
 8000d08:	494f      	ldr	r1, [pc, #316]	; (8000e48 <__aeabi_dmul+0x398>)
 8000d0a:	4461      	add	r1, ip
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_dmul+0x262>
 8000d10:	e0b0      	b.n	8000e74 <__aeabi_dmul+0x3c4>
 8000d12:	076b      	lsls	r3, r5, #29
 8000d14:	d009      	beq.n	8000d2a <__aeabi_dmul+0x27a>
 8000d16:	220f      	movs	r2, #15
 8000d18:	402a      	ands	r2, r5
 8000d1a:	2a04      	cmp	r2, #4
 8000d1c:	d005      	beq.n	8000d2a <__aeabi_dmul+0x27a>
 8000d1e:	1d2a      	adds	r2, r5, #4
 8000d20:	42aa      	cmp	r2, r5
 8000d22:	41ad      	sbcs	r5, r5
 8000d24:	426d      	negs	r5, r5
 8000d26:	1964      	adds	r4, r4, r5
 8000d28:	0015      	movs	r5, r2
 8000d2a:	01e3      	lsls	r3, r4, #7
 8000d2c:	d504      	bpl.n	8000d38 <__aeabi_dmul+0x288>
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <__aeabi_dmul+0x39c>)
 8000d32:	00c9      	lsls	r1, r1, #3
 8000d34:	4014      	ands	r4, r2
 8000d36:	4461      	add	r1, ip
 8000d38:	4a45      	ldr	r2, [pc, #276]	; (8000e50 <__aeabi_dmul+0x3a0>)
 8000d3a:	4291      	cmp	r1, r2
 8000d3c:	dd00      	ble.n	8000d40 <__aeabi_dmul+0x290>
 8000d3e:	e726      	b.n	8000b8e <__aeabi_dmul+0xde>
 8000d40:	0762      	lsls	r2, r4, #29
 8000d42:	08ed      	lsrs	r5, r5, #3
 8000d44:	0264      	lsls	r4, r4, #9
 8000d46:	0549      	lsls	r1, r1, #21
 8000d48:	4315      	orrs	r5, r2
 8000d4a:	0b24      	lsrs	r4, r4, #12
 8000d4c:	0d4a      	lsrs	r2, r1, #21
 8000d4e:	e710      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000d50:	4652      	mov	r2, sl
 8000d52:	4332      	orrs	r2, r6
 8000d54:	d100      	bne.n	8000d58 <__aeabi_dmul+0x2a8>
 8000d56:	e07f      	b.n	8000e58 <__aeabi_dmul+0x3a8>
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dmul+0x2ae>
 8000d5c:	e0dc      	b.n	8000f18 <__aeabi_dmul+0x468>
 8000d5e:	0030      	movs	r0, r6
 8000d60:	f000 fd60 	bl	8001824 <__clzsi2>
 8000d64:	0002      	movs	r2, r0
 8000d66:	3a0b      	subs	r2, #11
 8000d68:	231d      	movs	r3, #29
 8000d6a:	0001      	movs	r1, r0
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	4652      	mov	r2, sl
 8000d70:	3908      	subs	r1, #8
 8000d72:	40da      	lsrs	r2, r3
 8000d74:	408e      	lsls	r6, r1
 8000d76:	4316      	orrs	r6, r2
 8000d78:	4652      	mov	r2, sl
 8000d7a:	408a      	lsls	r2, r1
 8000d7c:	9b00      	ldr	r3, [sp, #0]
 8000d7e:	4935      	ldr	r1, [pc, #212]	; (8000e54 <__aeabi_dmul+0x3a4>)
 8000d80:	1a18      	subs	r0, r3, r0
 8000d82:	0003      	movs	r3, r0
 8000d84:	468c      	mov	ip, r1
 8000d86:	4463      	add	r3, ip
 8000d88:	2000      	movs	r0, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	e6d3      	b.n	8000b36 <__aeabi_dmul+0x86>
 8000d8e:	0025      	movs	r5, r4
 8000d90:	4305      	orrs	r5, r0
 8000d92:	d04a      	beq.n	8000e2a <__aeabi_dmul+0x37a>
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_dmul+0x2ea>
 8000d98:	e0b0      	b.n	8000efc <__aeabi_dmul+0x44c>
 8000d9a:	0020      	movs	r0, r4
 8000d9c:	f000 fd42 	bl	8001824 <__clzsi2>
 8000da0:	0001      	movs	r1, r0
 8000da2:	0002      	movs	r2, r0
 8000da4:	390b      	subs	r1, #11
 8000da6:	231d      	movs	r3, #29
 8000da8:	0010      	movs	r0, r2
 8000daa:	1a5b      	subs	r3, r3, r1
 8000dac:	0031      	movs	r1, r6
 8000dae:	0035      	movs	r5, r6
 8000db0:	3808      	subs	r0, #8
 8000db2:	4084      	lsls	r4, r0
 8000db4:	40d9      	lsrs	r1, r3
 8000db6:	4085      	lsls	r5, r0
 8000db8:	430c      	orrs	r4, r1
 8000dba:	4826      	ldr	r0, [pc, #152]	; (8000e54 <__aeabi_dmul+0x3a4>)
 8000dbc:	1a83      	subs	r3, r0, r2
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	e697      	b.n	8000af8 <__aeabi_dmul+0x48>
 8000dc8:	0005      	movs	r5, r0
 8000dca:	4325      	orrs	r5, r4
 8000dcc:	d126      	bne.n	8000e1c <__aeabi_dmul+0x36c>
 8000dce:	2208      	movs	r2, #8
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	4691      	mov	r9, r2
 8000dd8:	469b      	mov	fp, r3
 8000dda:	e68d      	b.n	8000af8 <__aeabi_dmul+0x48>
 8000ddc:	4652      	mov	r2, sl
 8000dde:	9b00      	ldr	r3, [sp, #0]
 8000de0:	4332      	orrs	r2, r6
 8000de2:	d110      	bne.n	8000e06 <__aeabi_dmul+0x356>
 8000de4:	4915      	ldr	r1, [pc, #84]	; (8000e3c <__aeabi_dmul+0x38c>)
 8000de6:	2600      	movs	r6, #0
 8000de8:	468c      	mov	ip, r1
 8000dea:	4463      	add	r3, ip
 8000dec:	4649      	mov	r1, r9
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2302      	movs	r3, #2
 8000df2:	4319      	orrs	r1, r3
 8000df4:	4689      	mov	r9, r1
 8000df6:	2002      	movs	r0, #2
 8000df8:	e69d      	b.n	8000b36 <__aeabi_dmul+0x86>
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	9701      	str	r7, [sp, #4]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d000      	beq.n	8000e04 <__aeabi_dmul+0x354>
 8000e02:	e6ad      	b.n	8000b60 <__aeabi_dmul+0xb0>
 8000e04:	e6c3      	b.n	8000b8e <__aeabi_dmul+0xde>
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <__aeabi_dmul+0x38c>)
 8000e08:	2003      	movs	r0, #3
 8000e0a:	4694      	mov	ip, r2
 8000e0c:	4463      	add	r3, ip
 8000e0e:	464a      	mov	r2, r9
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2303      	movs	r3, #3
 8000e14:	431a      	orrs	r2, r3
 8000e16:	4691      	mov	r9, r2
 8000e18:	4652      	mov	r2, sl
 8000e1a:	e68c      	b.n	8000b36 <__aeabi_dmul+0x86>
 8000e1c:	220c      	movs	r2, #12
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2303      	movs	r3, #3
 8000e22:	0005      	movs	r5, r0
 8000e24:	4691      	mov	r9, r2
 8000e26:	469b      	mov	fp, r3
 8000e28:	e666      	b.n	8000af8 <__aeabi_dmul+0x48>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	2400      	movs	r4, #0
 8000e36:	469b      	mov	fp, r3
 8000e38:	e65e      	b.n	8000af8 <__aeabi_dmul+0x48>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	000007ff 	.word	0x000007ff
 8000e40:	fffffc01 	.word	0xfffffc01
 8000e44:	080048f0 	.word	0x080048f0
 8000e48:	000003ff 	.word	0x000003ff
 8000e4c:	feffffff 	.word	0xfeffffff
 8000e50:	000007fe 	.word	0x000007fe
 8000e54:	fffffc0d 	.word	0xfffffc0d
 8000e58:	4649      	mov	r1, r9
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	4319      	orrs	r1, r3
 8000e5e:	4689      	mov	r9, r1
 8000e60:	2600      	movs	r6, #0
 8000e62:	2001      	movs	r0, #1
 8000e64:	e667      	b.n	8000b36 <__aeabi_dmul+0x86>
 8000e66:	2300      	movs	r3, #0
 8000e68:	2480      	movs	r4, #128	; 0x80
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <__aeabi_dmul+0x4cc>)
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	0324      	lsls	r4, r4, #12
 8000e72:	e67e      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000e74:	2001      	movs	r0, #1
 8000e76:	1a40      	subs	r0, r0, r1
 8000e78:	2838      	cmp	r0, #56	; 0x38
 8000e7a:	dd00      	ble.n	8000e7e <__aeabi_dmul+0x3ce>
 8000e7c:	e676      	b.n	8000b6c <__aeabi_dmul+0xbc>
 8000e7e:	281f      	cmp	r0, #31
 8000e80:	dd5b      	ble.n	8000f3a <__aeabi_dmul+0x48a>
 8000e82:	221f      	movs	r2, #31
 8000e84:	0023      	movs	r3, r4
 8000e86:	4252      	negs	r2, r2
 8000e88:	1a51      	subs	r1, r2, r1
 8000e8a:	40cb      	lsrs	r3, r1
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	2820      	cmp	r0, #32
 8000e90:	d003      	beq.n	8000e9a <__aeabi_dmul+0x3ea>
 8000e92:	4a3b      	ldr	r2, [pc, #236]	; (8000f80 <__aeabi_dmul+0x4d0>)
 8000e94:	4462      	add	r2, ip
 8000e96:	4094      	lsls	r4, r2
 8000e98:	4325      	orrs	r5, r4
 8000e9a:	1e6a      	subs	r2, r5, #1
 8000e9c:	4195      	sbcs	r5, r2
 8000e9e:	002a      	movs	r2, r5
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	000d      	movs	r5, r1
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	4015      	ands	r5, r2
 8000eaa:	4211      	tst	r1, r2
 8000eac:	d05b      	beq.n	8000f66 <__aeabi_dmul+0x4b6>
 8000eae:	210f      	movs	r1, #15
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	4011      	ands	r1, r2
 8000eb4:	2904      	cmp	r1, #4
 8000eb6:	d053      	beq.n	8000f60 <__aeabi_dmul+0x4b0>
 8000eb8:	1d11      	adds	r1, r2, #4
 8000eba:	4291      	cmp	r1, r2
 8000ebc:	4192      	sbcs	r2, r2
 8000ebe:	4252      	negs	r2, r2
 8000ec0:	18a4      	adds	r4, r4, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	0223      	lsls	r3, r4, #8
 8000ec6:	d54b      	bpl.n	8000f60 <__aeabi_dmul+0x4b0>
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2400      	movs	r4, #0
 8000ecc:	2500      	movs	r5, #0
 8000ece:	e650      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	031b      	lsls	r3, r3, #12
 8000ed4:	421c      	tst	r4, r3
 8000ed6:	d009      	beq.n	8000eec <__aeabi_dmul+0x43c>
 8000ed8:	421e      	tst	r6, r3
 8000eda:	d107      	bne.n	8000eec <__aeabi_dmul+0x43c>
 8000edc:	4333      	orrs	r3, r6
 8000ede:	031c      	lsls	r4, r3, #12
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	0015      	movs	r5, r2
 8000ee4:	0b24      	lsrs	r4, r4, #12
 8000ee6:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <__aeabi_dmul+0x4cc>)
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	e642      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	0312      	lsls	r2, r2, #12
 8000ef0:	4314      	orrs	r4, r2
 8000ef2:	0324      	lsls	r4, r4, #12
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <__aeabi_dmul+0x4cc>)
 8000ef6:	0b24      	lsrs	r4, r4, #12
 8000ef8:	9701      	str	r7, [sp, #4]
 8000efa:	e63a      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000efc:	f000 fc92 	bl	8001824 <__clzsi2>
 8000f00:	0001      	movs	r1, r0
 8000f02:	0002      	movs	r2, r0
 8000f04:	3115      	adds	r1, #21
 8000f06:	3220      	adds	r2, #32
 8000f08:	291c      	cmp	r1, #28
 8000f0a:	dc00      	bgt.n	8000f0e <__aeabi_dmul+0x45e>
 8000f0c:	e74b      	b.n	8000da6 <__aeabi_dmul+0x2f6>
 8000f0e:	0034      	movs	r4, r6
 8000f10:	3808      	subs	r0, #8
 8000f12:	2500      	movs	r5, #0
 8000f14:	4084      	lsls	r4, r0
 8000f16:	e750      	b.n	8000dba <__aeabi_dmul+0x30a>
 8000f18:	f000 fc84 	bl	8001824 <__clzsi2>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	001a      	movs	r2, r3
 8000f20:	3215      	adds	r2, #21
 8000f22:	3020      	adds	r0, #32
 8000f24:	2a1c      	cmp	r2, #28
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_dmul+0x47a>
 8000f28:	e71e      	b.n	8000d68 <__aeabi_dmul+0x2b8>
 8000f2a:	4656      	mov	r6, sl
 8000f2c:	3b08      	subs	r3, #8
 8000f2e:	2200      	movs	r2, #0
 8000f30:	409e      	lsls	r6, r3
 8000f32:	e723      	b.n	8000d7c <__aeabi_dmul+0x2cc>
 8000f34:	9b00      	ldr	r3, [sp, #0]
 8000f36:	469c      	mov	ip, r3
 8000f38:	e6e6      	b.n	8000d08 <__aeabi_dmul+0x258>
 8000f3a:	4912      	ldr	r1, [pc, #72]	; (8000f84 <__aeabi_dmul+0x4d4>)
 8000f3c:	0022      	movs	r2, r4
 8000f3e:	4461      	add	r1, ip
 8000f40:	002e      	movs	r6, r5
 8000f42:	408d      	lsls	r5, r1
 8000f44:	408a      	lsls	r2, r1
 8000f46:	40c6      	lsrs	r6, r0
 8000f48:	1e69      	subs	r1, r5, #1
 8000f4a:	418d      	sbcs	r5, r1
 8000f4c:	4332      	orrs	r2, r6
 8000f4e:	432a      	orrs	r2, r5
 8000f50:	40c4      	lsrs	r4, r0
 8000f52:	0753      	lsls	r3, r2, #29
 8000f54:	d0b6      	beq.n	8000ec4 <__aeabi_dmul+0x414>
 8000f56:	210f      	movs	r1, #15
 8000f58:	4011      	ands	r1, r2
 8000f5a:	2904      	cmp	r1, #4
 8000f5c:	d1ac      	bne.n	8000eb8 <__aeabi_dmul+0x408>
 8000f5e:	e7b1      	b.n	8000ec4 <__aeabi_dmul+0x414>
 8000f60:	0765      	lsls	r5, r4, #29
 8000f62:	0264      	lsls	r4, r4, #9
 8000f64:	0b24      	lsrs	r4, r4, #12
 8000f66:	08d2      	lsrs	r2, r2, #3
 8000f68:	4315      	orrs	r5, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	e601      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	0312      	lsls	r2, r2, #12
 8000f72:	4314      	orrs	r4, r2
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	4a01      	ldr	r2, [pc, #4]	; (8000f7c <__aeabi_dmul+0x4cc>)
 8000f78:	0b24      	lsrs	r4, r4, #12
 8000f7a:	e5fa      	b.n	8000b72 <__aeabi_dmul+0xc2>
 8000f7c:	000007ff 	.word	0x000007ff
 8000f80:	0000043e 	.word	0x0000043e
 8000f84:	0000041e 	.word	0x0000041e

08000f88 <__aeabi_dsub>:
 8000f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	4645      	mov	r5, r8
 8000f90:	46de      	mov	lr, fp
 8000f92:	b5e0      	push	{r5, r6, r7, lr}
 8000f94:	001e      	movs	r6, r3
 8000f96:	0017      	movs	r7, r2
 8000f98:	004a      	lsls	r2, r1, #1
 8000f9a:	030b      	lsls	r3, r1, #12
 8000f9c:	0d52      	lsrs	r2, r2, #21
 8000f9e:	0a5b      	lsrs	r3, r3, #9
 8000fa0:	4690      	mov	r8, r2
 8000fa2:	0f42      	lsrs	r2, r0, #29
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	0fcd      	lsrs	r5, r1, #31
 8000fa8:	4ccd      	ldr	r4, [pc, #820]	; (80012e0 <__aeabi_dsub+0x358>)
 8000faa:	0331      	lsls	r1, r6, #12
 8000fac:	00c3      	lsls	r3, r0, #3
 8000fae:	4694      	mov	ip, r2
 8000fb0:	0070      	lsls	r0, r6, #1
 8000fb2:	0f7a      	lsrs	r2, r7, #29
 8000fb4:	0a49      	lsrs	r1, r1, #9
 8000fb6:	00ff      	lsls	r7, r7, #3
 8000fb8:	469a      	mov	sl, r3
 8000fba:	46b9      	mov	r9, r7
 8000fbc:	0d40      	lsrs	r0, r0, #21
 8000fbe:	0ff6      	lsrs	r6, r6, #31
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	42a0      	cmp	r0, r4
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dsub+0x40>
 8000fc6:	e0b1      	b.n	800112c <__aeabi_dsub+0x1a4>
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4056      	eors	r6, r2
 8000fcc:	46b3      	mov	fp, r6
 8000fce:	42b5      	cmp	r5, r6
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dsub+0x4c>
 8000fd2:	e088      	b.n	80010e6 <__aeabi_dsub+0x15e>
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	1a12      	subs	r2, r2, r0
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	dc00      	bgt.n	8000fde <__aeabi_dsub+0x56>
 8000fdc:	e0ae      	b.n	800113c <__aeabi_dsub+0x1b4>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dsub+0x5c>
 8000fe2:	e0c1      	b.n	8001168 <__aeabi_dsub+0x1e0>
 8000fe4:	48be      	ldr	r0, [pc, #760]	; (80012e0 <__aeabi_dsub+0x358>)
 8000fe6:	4580      	cmp	r8, r0
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dsub+0x64>
 8000fea:	e151      	b.n	8001290 <__aeabi_dsub+0x308>
 8000fec:	2080      	movs	r0, #128	; 0x80
 8000fee:	0400      	lsls	r0, r0, #16
 8000ff0:	4301      	orrs	r1, r0
 8000ff2:	2a38      	cmp	r2, #56	; 0x38
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dsub+0x70>
 8000ff6:	e17b      	b.n	80012f0 <__aeabi_dsub+0x368>
 8000ff8:	2a1f      	cmp	r2, #31
 8000ffa:	dd00      	ble.n	8000ffe <__aeabi_dsub+0x76>
 8000ffc:	e1ee      	b.n	80013dc <__aeabi_dsub+0x454>
 8000ffe:	2020      	movs	r0, #32
 8001000:	003e      	movs	r6, r7
 8001002:	1a80      	subs	r0, r0, r2
 8001004:	000c      	movs	r4, r1
 8001006:	40d6      	lsrs	r6, r2
 8001008:	40d1      	lsrs	r1, r2
 800100a:	4087      	lsls	r7, r0
 800100c:	4662      	mov	r2, ip
 800100e:	4084      	lsls	r4, r0
 8001010:	1a52      	subs	r2, r2, r1
 8001012:	1e78      	subs	r0, r7, #1
 8001014:	4187      	sbcs	r7, r0
 8001016:	4694      	mov	ip, r2
 8001018:	4334      	orrs	r4, r6
 800101a:	4327      	orrs	r7, r4
 800101c:	1bdc      	subs	r4, r3, r7
 800101e:	42a3      	cmp	r3, r4
 8001020:	419b      	sbcs	r3, r3
 8001022:	4662      	mov	r2, ip
 8001024:	425b      	negs	r3, r3
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	4699      	mov	r9, r3
 800102a:	464b      	mov	r3, r9
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	d400      	bmi.n	8001032 <__aeabi_dsub+0xaa>
 8001030:	e118      	b.n	8001264 <__aeabi_dsub+0x2dc>
 8001032:	464b      	mov	r3, r9
 8001034:	0258      	lsls	r0, r3, #9
 8001036:	0a43      	lsrs	r3, r0, #9
 8001038:	4699      	mov	r9, r3
 800103a:	464b      	mov	r3, r9
 800103c:	2b00      	cmp	r3, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dsub+0xba>
 8001040:	e137      	b.n	80012b2 <__aeabi_dsub+0x32a>
 8001042:	4648      	mov	r0, r9
 8001044:	f000 fbee 	bl	8001824 <__clzsi2>
 8001048:	0001      	movs	r1, r0
 800104a:	3908      	subs	r1, #8
 800104c:	2320      	movs	r3, #32
 800104e:	0022      	movs	r2, r4
 8001050:	4648      	mov	r0, r9
 8001052:	1a5b      	subs	r3, r3, r1
 8001054:	40da      	lsrs	r2, r3
 8001056:	4088      	lsls	r0, r1
 8001058:	408c      	lsls	r4, r1
 800105a:	4643      	mov	r3, r8
 800105c:	4310      	orrs	r0, r2
 800105e:	4588      	cmp	r8, r1
 8001060:	dd00      	ble.n	8001064 <__aeabi_dsub+0xdc>
 8001062:	e136      	b.n	80012d2 <__aeabi_dsub+0x34a>
 8001064:	1ac9      	subs	r1, r1, r3
 8001066:	1c4b      	adds	r3, r1, #1
 8001068:	2b1f      	cmp	r3, #31
 800106a:	dd00      	ble.n	800106e <__aeabi_dsub+0xe6>
 800106c:	e0ea      	b.n	8001244 <__aeabi_dsub+0x2bc>
 800106e:	2220      	movs	r2, #32
 8001070:	0026      	movs	r6, r4
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	0001      	movs	r1, r0
 8001076:	4094      	lsls	r4, r2
 8001078:	40de      	lsrs	r6, r3
 800107a:	40d8      	lsrs	r0, r3
 800107c:	2300      	movs	r3, #0
 800107e:	4091      	lsls	r1, r2
 8001080:	1e62      	subs	r2, r4, #1
 8001082:	4194      	sbcs	r4, r2
 8001084:	4681      	mov	r9, r0
 8001086:	4698      	mov	r8, r3
 8001088:	4331      	orrs	r1, r6
 800108a:	430c      	orrs	r4, r1
 800108c:	0763      	lsls	r3, r4, #29
 800108e:	d009      	beq.n	80010a4 <__aeabi_dsub+0x11c>
 8001090:	230f      	movs	r3, #15
 8001092:	4023      	ands	r3, r4
 8001094:	2b04      	cmp	r3, #4
 8001096:	d005      	beq.n	80010a4 <__aeabi_dsub+0x11c>
 8001098:	1d23      	adds	r3, r4, #4
 800109a:	42a3      	cmp	r3, r4
 800109c:	41a4      	sbcs	r4, r4
 800109e:	4264      	negs	r4, r4
 80010a0:	44a1      	add	r9, r4
 80010a2:	001c      	movs	r4, r3
 80010a4:	464b      	mov	r3, r9
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	d400      	bmi.n	80010ac <__aeabi_dsub+0x124>
 80010aa:	e0de      	b.n	800126a <__aeabi_dsub+0x2e2>
 80010ac:	4641      	mov	r1, r8
 80010ae:	4b8c      	ldr	r3, [pc, #560]	; (80012e0 <__aeabi_dsub+0x358>)
 80010b0:	3101      	adds	r1, #1
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x130>
 80010b6:	e0e7      	b.n	8001288 <__aeabi_dsub+0x300>
 80010b8:	464b      	mov	r3, r9
 80010ba:	488a      	ldr	r0, [pc, #552]	; (80012e4 <__aeabi_dsub+0x35c>)
 80010bc:	08e4      	lsrs	r4, r4, #3
 80010be:	4003      	ands	r3, r0
 80010c0:	0018      	movs	r0, r3
 80010c2:	0549      	lsls	r1, r1, #21
 80010c4:	075b      	lsls	r3, r3, #29
 80010c6:	0240      	lsls	r0, r0, #9
 80010c8:	4323      	orrs	r3, r4
 80010ca:	0d4a      	lsrs	r2, r1, #21
 80010cc:	0b04      	lsrs	r4, r0, #12
 80010ce:	0512      	lsls	r2, r2, #20
 80010d0:	07ed      	lsls	r5, r5, #31
 80010d2:	4322      	orrs	r2, r4
 80010d4:	432a      	orrs	r2, r5
 80010d6:	0018      	movs	r0, r3
 80010d8:	0011      	movs	r1, r2
 80010da:	bcf0      	pop	{r4, r5, r6, r7}
 80010dc:	46bb      	mov	fp, r7
 80010de:	46b2      	mov	sl, r6
 80010e0:	46a9      	mov	r9, r5
 80010e2:	46a0      	mov	r8, r4
 80010e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e6:	4642      	mov	r2, r8
 80010e8:	1a12      	subs	r2, r2, r0
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	dd52      	ble.n	8001194 <__aeabi_dsub+0x20c>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dsub+0x16c>
 80010f2:	e09c      	b.n	800122e <__aeabi_dsub+0x2a6>
 80010f4:	45a0      	cmp	r8, r4
 80010f6:	d100      	bne.n	80010fa <__aeabi_dsub+0x172>
 80010f8:	e0ca      	b.n	8001290 <__aeabi_dsub+0x308>
 80010fa:	2080      	movs	r0, #128	; 0x80
 80010fc:	0400      	lsls	r0, r0, #16
 80010fe:	4301      	orrs	r1, r0
 8001100:	2a38      	cmp	r2, #56	; 0x38
 8001102:	dd00      	ble.n	8001106 <__aeabi_dsub+0x17e>
 8001104:	e149      	b.n	800139a <__aeabi_dsub+0x412>
 8001106:	2a1f      	cmp	r2, #31
 8001108:	dc00      	bgt.n	800110c <__aeabi_dsub+0x184>
 800110a:	e197      	b.n	800143c <__aeabi_dsub+0x4b4>
 800110c:	0010      	movs	r0, r2
 800110e:	000e      	movs	r6, r1
 8001110:	3820      	subs	r0, #32
 8001112:	40c6      	lsrs	r6, r0
 8001114:	2a20      	cmp	r2, #32
 8001116:	d004      	beq.n	8001122 <__aeabi_dsub+0x19a>
 8001118:	2040      	movs	r0, #64	; 0x40
 800111a:	1a82      	subs	r2, r0, r2
 800111c:	4091      	lsls	r1, r2
 800111e:	430f      	orrs	r7, r1
 8001120:	46b9      	mov	r9, r7
 8001122:	464c      	mov	r4, r9
 8001124:	1e62      	subs	r2, r4, #1
 8001126:	4194      	sbcs	r4, r2
 8001128:	4334      	orrs	r4, r6
 800112a:	e13a      	b.n	80013a2 <__aeabi_dsub+0x41a>
 800112c:	000a      	movs	r2, r1
 800112e:	433a      	orrs	r2, r7
 8001130:	d028      	beq.n	8001184 <__aeabi_dsub+0x1fc>
 8001132:	46b3      	mov	fp, r6
 8001134:	42b5      	cmp	r5, r6
 8001136:	d02b      	beq.n	8001190 <__aeabi_dsub+0x208>
 8001138:	4a6b      	ldr	r2, [pc, #428]	; (80012e8 <__aeabi_dsub+0x360>)
 800113a:	4442      	add	r2, r8
 800113c:	2a00      	cmp	r2, #0
 800113e:	d05d      	beq.n	80011fc <__aeabi_dsub+0x274>
 8001140:	4642      	mov	r2, r8
 8001142:	4644      	mov	r4, r8
 8001144:	1a82      	subs	r2, r0, r2
 8001146:	2c00      	cmp	r4, #0
 8001148:	d000      	beq.n	800114c <__aeabi_dsub+0x1c4>
 800114a:	e0f5      	b.n	8001338 <__aeabi_dsub+0x3b0>
 800114c:	4665      	mov	r5, ip
 800114e:	431d      	orrs	r5, r3
 8001150:	d100      	bne.n	8001154 <__aeabi_dsub+0x1cc>
 8001152:	e19c      	b.n	800148e <__aeabi_dsub+0x506>
 8001154:	1e55      	subs	r5, r2, #1
 8001156:	2a01      	cmp	r2, #1
 8001158:	d100      	bne.n	800115c <__aeabi_dsub+0x1d4>
 800115a:	e1fb      	b.n	8001554 <__aeabi_dsub+0x5cc>
 800115c:	4c60      	ldr	r4, [pc, #384]	; (80012e0 <__aeabi_dsub+0x358>)
 800115e:	42a2      	cmp	r2, r4
 8001160:	d100      	bne.n	8001164 <__aeabi_dsub+0x1dc>
 8001162:	e1bd      	b.n	80014e0 <__aeabi_dsub+0x558>
 8001164:	002a      	movs	r2, r5
 8001166:	e0f0      	b.n	800134a <__aeabi_dsub+0x3c2>
 8001168:	0008      	movs	r0, r1
 800116a:	4338      	orrs	r0, r7
 800116c:	d100      	bne.n	8001170 <__aeabi_dsub+0x1e8>
 800116e:	e0c3      	b.n	80012f8 <__aeabi_dsub+0x370>
 8001170:	1e50      	subs	r0, r2, #1
 8001172:	2a01      	cmp	r2, #1
 8001174:	d100      	bne.n	8001178 <__aeabi_dsub+0x1f0>
 8001176:	e1a8      	b.n	80014ca <__aeabi_dsub+0x542>
 8001178:	4c59      	ldr	r4, [pc, #356]	; (80012e0 <__aeabi_dsub+0x358>)
 800117a:	42a2      	cmp	r2, r4
 800117c:	d100      	bne.n	8001180 <__aeabi_dsub+0x1f8>
 800117e:	e087      	b.n	8001290 <__aeabi_dsub+0x308>
 8001180:	0002      	movs	r2, r0
 8001182:	e736      	b.n	8000ff2 <__aeabi_dsub+0x6a>
 8001184:	2201      	movs	r2, #1
 8001186:	4056      	eors	r6, r2
 8001188:	46b3      	mov	fp, r6
 800118a:	42b5      	cmp	r5, r6
 800118c:	d000      	beq.n	8001190 <__aeabi_dsub+0x208>
 800118e:	e721      	b.n	8000fd4 <__aeabi_dsub+0x4c>
 8001190:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <__aeabi_dsub+0x360>)
 8001192:	4442      	add	r2, r8
 8001194:	2a00      	cmp	r2, #0
 8001196:	d100      	bne.n	800119a <__aeabi_dsub+0x212>
 8001198:	e0b5      	b.n	8001306 <__aeabi_dsub+0x37e>
 800119a:	4642      	mov	r2, r8
 800119c:	4644      	mov	r4, r8
 800119e:	1a82      	subs	r2, r0, r2
 80011a0:	2c00      	cmp	r4, #0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dsub+0x21e>
 80011a4:	e138      	b.n	8001418 <__aeabi_dsub+0x490>
 80011a6:	4e4e      	ldr	r6, [pc, #312]	; (80012e0 <__aeabi_dsub+0x358>)
 80011a8:	42b0      	cmp	r0, r6
 80011aa:	d100      	bne.n	80011ae <__aeabi_dsub+0x226>
 80011ac:	e1de      	b.n	800156c <__aeabi_dsub+0x5e4>
 80011ae:	2680      	movs	r6, #128	; 0x80
 80011b0:	4664      	mov	r4, ip
 80011b2:	0436      	lsls	r6, r6, #16
 80011b4:	4334      	orrs	r4, r6
 80011b6:	46a4      	mov	ip, r4
 80011b8:	2a38      	cmp	r2, #56	; 0x38
 80011ba:	dd00      	ble.n	80011be <__aeabi_dsub+0x236>
 80011bc:	e196      	b.n	80014ec <__aeabi_dsub+0x564>
 80011be:	2a1f      	cmp	r2, #31
 80011c0:	dd00      	ble.n	80011c4 <__aeabi_dsub+0x23c>
 80011c2:	e224      	b.n	800160e <__aeabi_dsub+0x686>
 80011c4:	2620      	movs	r6, #32
 80011c6:	1ab4      	subs	r4, r6, r2
 80011c8:	46a2      	mov	sl, r4
 80011ca:	4664      	mov	r4, ip
 80011cc:	4656      	mov	r6, sl
 80011ce:	40b4      	lsls	r4, r6
 80011d0:	46a1      	mov	r9, r4
 80011d2:	001c      	movs	r4, r3
 80011d4:	464e      	mov	r6, r9
 80011d6:	40d4      	lsrs	r4, r2
 80011d8:	4326      	orrs	r6, r4
 80011da:	0034      	movs	r4, r6
 80011dc:	4656      	mov	r6, sl
 80011de:	40b3      	lsls	r3, r6
 80011e0:	1e5e      	subs	r6, r3, #1
 80011e2:	41b3      	sbcs	r3, r6
 80011e4:	431c      	orrs	r4, r3
 80011e6:	4663      	mov	r3, ip
 80011e8:	40d3      	lsrs	r3, r2
 80011ea:	18c9      	adds	r1, r1, r3
 80011ec:	19e4      	adds	r4, r4, r7
 80011ee:	42bc      	cmp	r4, r7
 80011f0:	41bf      	sbcs	r7, r7
 80011f2:	427f      	negs	r7, r7
 80011f4:	46b9      	mov	r9, r7
 80011f6:	4680      	mov	r8, r0
 80011f8:	4489      	add	r9, r1
 80011fa:	e0d8      	b.n	80013ae <__aeabi_dsub+0x426>
 80011fc:	4640      	mov	r0, r8
 80011fe:	4c3b      	ldr	r4, [pc, #236]	; (80012ec <__aeabi_dsub+0x364>)
 8001200:	3001      	adds	r0, #1
 8001202:	4220      	tst	r0, r4
 8001204:	d000      	beq.n	8001208 <__aeabi_dsub+0x280>
 8001206:	e0b4      	b.n	8001372 <__aeabi_dsub+0x3ea>
 8001208:	4640      	mov	r0, r8
 800120a:	2800      	cmp	r0, #0
 800120c:	d000      	beq.n	8001210 <__aeabi_dsub+0x288>
 800120e:	e144      	b.n	800149a <__aeabi_dsub+0x512>
 8001210:	4660      	mov	r0, ip
 8001212:	4318      	orrs	r0, r3
 8001214:	d100      	bne.n	8001218 <__aeabi_dsub+0x290>
 8001216:	e190      	b.n	800153a <__aeabi_dsub+0x5b2>
 8001218:	0008      	movs	r0, r1
 800121a:	4338      	orrs	r0, r7
 800121c:	d000      	beq.n	8001220 <__aeabi_dsub+0x298>
 800121e:	e1aa      	b.n	8001576 <__aeabi_dsub+0x5ee>
 8001220:	4661      	mov	r1, ip
 8001222:	08db      	lsrs	r3, r3, #3
 8001224:	0749      	lsls	r1, r1, #29
 8001226:	430b      	orrs	r3, r1
 8001228:	4661      	mov	r1, ip
 800122a:	08cc      	lsrs	r4, r1, #3
 800122c:	e027      	b.n	800127e <__aeabi_dsub+0x2f6>
 800122e:	0008      	movs	r0, r1
 8001230:	4338      	orrs	r0, r7
 8001232:	d061      	beq.n	80012f8 <__aeabi_dsub+0x370>
 8001234:	1e50      	subs	r0, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d100      	bne.n	800123c <__aeabi_dsub+0x2b4>
 800123a:	e139      	b.n	80014b0 <__aeabi_dsub+0x528>
 800123c:	42a2      	cmp	r2, r4
 800123e:	d027      	beq.n	8001290 <__aeabi_dsub+0x308>
 8001240:	0002      	movs	r2, r0
 8001242:	e75d      	b.n	8001100 <__aeabi_dsub+0x178>
 8001244:	0002      	movs	r2, r0
 8001246:	391f      	subs	r1, #31
 8001248:	40ca      	lsrs	r2, r1
 800124a:	0011      	movs	r1, r2
 800124c:	2b20      	cmp	r3, #32
 800124e:	d003      	beq.n	8001258 <__aeabi_dsub+0x2d0>
 8001250:	2240      	movs	r2, #64	; 0x40
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4098      	lsls	r0, r3
 8001256:	4304      	orrs	r4, r0
 8001258:	1e63      	subs	r3, r4, #1
 800125a:	419c      	sbcs	r4, r3
 800125c:	2300      	movs	r3, #0
 800125e:	4699      	mov	r9, r3
 8001260:	4698      	mov	r8, r3
 8001262:	430c      	orrs	r4, r1
 8001264:	0763      	lsls	r3, r4, #29
 8001266:	d000      	beq.n	800126a <__aeabi_dsub+0x2e2>
 8001268:	e712      	b.n	8001090 <__aeabi_dsub+0x108>
 800126a:	464b      	mov	r3, r9
 800126c:	464a      	mov	r2, r9
 800126e:	08e4      	lsrs	r4, r4, #3
 8001270:	075b      	lsls	r3, r3, #29
 8001272:	4323      	orrs	r3, r4
 8001274:	08d4      	lsrs	r4, r2, #3
 8001276:	4642      	mov	r2, r8
 8001278:	4919      	ldr	r1, [pc, #100]	; (80012e0 <__aeabi_dsub+0x358>)
 800127a:	428a      	cmp	r2, r1
 800127c:	d00e      	beq.n	800129c <__aeabi_dsub+0x314>
 800127e:	0324      	lsls	r4, r4, #12
 8001280:	0552      	lsls	r2, r2, #21
 8001282:	0b24      	lsrs	r4, r4, #12
 8001284:	0d52      	lsrs	r2, r2, #21
 8001286:	e722      	b.n	80010ce <__aeabi_dsub+0x146>
 8001288:	000a      	movs	r2, r1
 800128a:	2400      	movs	r4, #0
 800128c:	2300      	movs	r3, #0
 800128e:	e71e      	b.n	80010ce <__aeabi_dsub+0x146>
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	4662      	mov	r2, ip
 8001294:	0752      	lsls	r2, r2, #29
 8001296:	4313      	orrs	r3, r2
 8001298:	4662      	mov	r2, ip
 800129a:	08d4      	lsrs	r4, r2, #3
 800129c:	001a      	movs	r2, r3
 800129e:	4322      	orrs	r2, r4
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dsub+0x31c>
 80012a2:	e1fc      	b.n	800169e <__aeabi_dsub+0x716>
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	4314      	orrs	r4, r2
 80012aa:	0324      	lsls	r4, r4, #12
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <__aeabi_dsub+0x358>)
 80012ae:	0b24      	lsrs	r4, r4, #12
 80012b0:	e70d      	b.n	80010ce <__aeabi_dsub+0x146>
 80012b2:	0020      	movs	r0, r4
 80012b4:	f000 fab6 	bl	8001824 <__clzsi2>
 80012b8:	0001      	movs	r1, r0
 80012ba:	3118      	adds	r1, #24
 80012bc:	291f      	cmp	r1, #31
 80012be:	dc00      	bgt.n	80012c2 <__aeabi_dsub+0x33a>
 80012c0:	e6c4      	b.n	800104c <__aeabi_dsub+0xc4>
 80012c2:	3808      	subs	r0, #8
 80012c4:	4084      	lsls	r4, r0
 80012c6:	4643      	mov	r3, r8
 80012c8:	0020      	movs	r0, r4
 80012ca:	2400      	movs	r4, #0
 80012cc:	4588      	cmp	r8, r1
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_dsub+0x34a>
 80012d0:	e6c8      	b.n	8001064 <__aeabi_dsub+0xdc>
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__aeabi_dsub+0x35c>)
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	4010      	ands	r0, r2
 80012d8:	4698      	mov	r8, r3
 80012da:	4681      	mov	r9, r0
 80012dc:	e6d6      	b.n	800108c <__aeabi_dsub+0x104>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	000007ff 	.word	0x000007ff
 80012e4:	ff7fffff 	.word	0xff7fffff
 80012e8:	fffff801 	.word	0xfffff801
 80012ec:	000007fe 	.word	0x000007fe
 80012f0:	430f      	orrs	r7, r1
 80012f2:	1e7a      	subs	r2, r7, #1
 80012f4:	4197      	sbcs	r7, r2
 80012f6:	e691      	b.n	800101c <__aeabi_dsub+0x94>
 80012f8:	4661      	mov	r1, ip
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	0749      	lsls	r1, r1, #29
 80012fe:	430b      	orrs	r3, r1
 8001300:	4661      	mov	r1, ip
 8001302:	08cc      	lsrs	r4, r1, #3
 8001304:	e7b8      	b.n	8001278 <__aeabi_dsub+0x2f0>
 8001306:	4640      	mov	r0, r8
 8001308:	4cd3      	ldr	r4, [pc, #844]	; (8001658 <__aeabi_dsub+0x6d0>)
 800130a:	3001      	adds	r0, #1
 800130c:	4220      	tst	r0, r4
 800130e:	d000      	beq.n	8001312 <__aeabi_dsub+0x38a>
 8001310:	e0a2      	b.n	8001458 <__aeabi_dsub+0x4d0>
 8001312:	4640      	mov	r0, r8
 8001314:	2800      	cmp	r0, #0
 8001316:	d000      	beq.n	800131a <__aeabi_dsub+0x392>
 8001318:	e101      	b.n	800151e <__aeabi_dsub+0x596>
 800131a:	4660      	mov	r0, ip
 800131c:	4318      	orrs	r0, r3
 800131e:	d100      	bne.n	8001322 <__aeabi_dsub+0x39a>
 8001320:	e15e      	b.n	80015e0 <__aeabi_dsub+0x658>
 8001322:	0008      	movs	r0, r1
 8001324:	4338      	orrs	r0, r7
 8001326:	d000      	beq.n	800132a <__aeabi_dsub+0x3a2>
 8001328:	e15f      	b.n	80015ea <__aeabi_dsub+0x662>
 800132a:	4661      	mov	r1, ip
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	0749      	lsls	r1, r1, #29
 8001330:	430b      	orrs	r3, r1
 8001332:	4661      	mov	r1, ip
 8001334:	08cc      	lsrs	r4, r1, #3
 8001336:	e7a2      	b.n	800127e <__aeabi_dsub+0x2f6>
 8001338:	4dc8      	ldr	r5, [pc, #800]	; (800165c <__aeabi_dsub+0x6d4>)
 800133a:	42a8      	cmp	r0, r5
 800133c:	d100      	bne.n	8001340 <__aeabi_dsub+0x3b8>
 800133e:	e0cf      	b.n	80014e0 <__aeabi_dsub+0x558>
 8001340:	2580      	movs	r5, #128	; 0x80
 8001342:	4664      	mov	r4, ip
 8001344:	042d      	lsls	r5, r5, #16
 8001346:	432c      	orrs	r4, r5
 8001348:	46a4      	mov	ip, r4
 800134a:	2a38      	cmp	r2, #56	; 0x38
 800134c:	dc56      	bgt.n	80013fc <__aeabi_dsub+0x474>
 800134e:	2a1f      	cmp	r2, #31
 8001350:	dd00      	ble.n	8001354 <__aeabi_dsub+0x3cc>
 8001352:	e0d1      	b.n	80014f8 <__aeabi_dsub+0x570>
 8001354:	2520      	movs	r5, #32
 8001356:	001e      	movs	r6, r3
 8001358:	1aad      	subs	r5, r5, r2
 800135a:	4664      	mov	r4, ip
 800135c:	40ab      	lsls	r3, r5
 800135e:	40ac      	lsls	r4, r5
 8001360:	40d6      	lsrs	r6, r2
 8001362:	1e5d      	subs	r5, r3, #1
 8001364:	41ab      	sbcs	r3, r5
 8001366:	4334      	orrs	r4, r6
 8001368:	4323      	orrs	r3, r4
 800136a:	4664      	mov	r4, ip
 800136c:	40d4      	lsrs	r4, r2
 800136e:	1b09      	subs	r1, r1, r4
 8001370:	e049      	b.n	8001406 <__aeabi_dsub+0x47e>
 8001372:	4660      	mov	r0, ip
 8001374:	1bdc      	subs	r4, r3, r7
 8001376:	1a46      	subs	r6, r0, r1
 8001378:	42a3      	cmp	r3, r4
 800137a:	4180      	sbcs	r0, r0
 800137c:	4240      	negs	r0, r0
 800137e:	4681      	mov	r9, r0
 8001380:	0030      	movs	r0, r6
 8001382:	464e      	mov	r6, r9
 8001384:	1b80      	subs	r0, r0, r6
 8001386:	4681      	mov	r9, r0
 8001388:	0200      	lsls	r0, r0, #8
 800138a:	d476      	bmi.n	800147a <__aeabi_dsub+0x4f2>
 800138c:	464b      	mov	r3, r9
 800138e:	4323      	orrs	r3, r4
 8001390:	d000      	beq.n	8001394 <__aeabi_dsub+0x40c>
 8001392:	e652      	b.n	800103a <__aeabi_dsub+0xb2>
 8001394:	2400      	movs	r4, #0
 8001396:	2500      	movs	r5, #0
 8001398:	e771      	b.n	800127e <__aeabi_dsub+0x2f6>
 800139a:	4339      	orrs	r1, r7
 800139c:	000c      	movs	r4, r1
 800139e:	1e62      	subs	r2, r4, #1
 80013a0:	4194      	sbcs	r4, r2
 80013a2:	18e4      	adds	r4, r4, r3
 80013a4:	429c      	cmp	r4, r3
 80013a6:	419b      	sbcs	r3, r3
 80013a8:	425b      	negs	r3, r3
 80013aa:	4463      	add	r3, ip
 80013ac:	4699      	mov	r9, r3
 80013ae:	464b      	mov	r3, r9
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	d400      	bmi.n	80013b6 <__aeabi_dsub+0x42e>
 80013b4:	e756      	b.n	8001264 <__aeabi_dsub+0x2dc>
 80013b6:	2301      	movs	r3, #1
 80013b8:	469c      	mov	ip, r3
 80013ba:	4ba8      	ldr	r3, [pc, #672]	; (800165c <__aeabi_dsub+0x6d4>)
 80013bc:	44e0      	add	r8, ip
 80013be:	4598      	cmp	r8, r3
 80013c0:	d038      	beq.n	8001434 <__aeabi_dsub+0x4ac>
 80013c2:	464b      	mov	r3, r9
 80013c4:	48a6      	ldr	r0, [pc, #664]	; (8001660 <__aeabi_dsub+0x6d8>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	4003      	ands	r3, r0
 80013ca:	0018      	movs	r0, r3
 80013cc:	0863      	lsrs	r3, r4, #1
 80013ce:	4014      	ands	r4, r2
 80013d0:	431c      	orrs	r4, r3
 80013d2:	07c3      	lsls	r3, r0, #31
 80013d4:	431c      	orrs	r4, r3
 80013d6:	0843      	lsrs	r3, r0, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	e657      	b.n	800108c <__aeabi_dsub+0x104>
 80013dc:	0010      	movs	r0, r2
 80013de:	000e      	movs	r6, r1
 80013e0:	3820      	subs	r0, #32
 80013e2:	40c6      	lsrs	r6, r0
 80013e4:	2a20      	cmp	r2, #32
 80013e6:	d004      	beq.n	80013f2 <__aeabi_dsub+0x46a>
 80013e8:	2040      	movs	r0, #64	; 0x40
 80013ea:	1a82      	subs	r2, r0, r2
 80013ec:	4091      	lsls	r1, r2
 80013ee:	430f      	orrs	r7, r1
 80013f0:	46b9      	mov	r9, r7
 80013f2:	464f      	mov	r7, r9
 80013f4:	1e7a      	subs	r2, r7, #1
 80013f6:	4197      	sbcs	r7, r2
 80013f8:	4337      	orrs	r7, r6
 80013fa:	e60f      	b.n	800101c <__aeabi_dsub+0x94>
 80013fc:	4662      	mov	r2, ip
 80013fe:	431a      	orrs	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	1e5a      	subs	r2, r3, #1
 8001404:	4193      	sbcs	r3, r2
 8001406:	1afc      	subs	r4, r7, r3
 8001408:	42a7      	cmp	r7, r4
 800140a:	41bf      	sbcs	r7, r7
 800140c:	427f      	negs	r7, r7
 800140e:	1bcb      	subs	r3, r1, r7
 8001410:	4699      	mov	r9, r3
 8001412:	465d      	mov	r5, fp
 8001414:	4680      	mov	r8, r0
 8001416:	e608      	b.n	800102a <__aeabi_dsub+0xa2>
 8001418:	4666      	mov	r6, ip
 800141a:	431e      	orrs	r6, r3
 800141c:	d100      	bne.n	8001420 <__aeabi_dsub+0x498>
 800141e:	e0be      	b.n	800159e <__aeabi_dsub+0x616>
 8001420:	1e56      	subs	r6, r2, #1
 8001422:	2a01      	cmp	r2, #1
 8001424:	d100      	bne.n	8001428 <__aeabi_dsub+0x4a0>
 8001426:	e109      	b.n	800163c <__aeabi_dsub+0x6b4>
 8001428:	4c8c      	ldr	r4, [pc, #560]	; (800165c <__aeabi_dsub+0x6d4>)
 800142a:	42a2      	cmp	r2, r4
 800142c:	d100      	bne.n	8001430 <__aeabi_dsub+0x4a8>
 800142e:	e119      	b.n	8001664 <__aeabi_dsub+0x6dc>
 8001430:	0032      	movs	r2, r6
 8001432:	e6c1      	b.n	80011b8 <__aeabi_dsub+0x230>
 8001434:	4642      	mov	r2, r8
 8001436:	2400      	movs	r4, #0
 8001438:	2300      	movs	r3, #0
 800143a:	e648      	b.n	80010ce <__aeabi_dsub+0x146>
 800143c:	2020      	movs	r0, #32
 800143e:	000c      	movs	r4, r1
 8001440:	1a80      	subs	r0, r0, r2
 8001442:	003e      	movs	r6, r7
 8001444:	4087      	lsls	r7, r0
 8001446:	4084      	lsls	r4, r0
 8001448:	40d6      	lsrs	r6, r2
 800144a:	1e78      	subs	r0, r7, #1
 800144c:	4187      	sbcs	r7, r0
 800144e:	40d1      	lsrs	r1, r2
 8001450:	4334      	orrs	r4, r6
 8001452:	433c      	orrs	r4, r7
 8001454:	448c      	add	ip, r1
 8001456:	e7a4      	b.n	80013a2 <__aeabi_dsub+0x41a>
 8001458:	4a80      	ldr	r2, [pc, #512]	; (800165c <__aeabi_dsub+0x6d4>)
 800145a:	4290      	cmp	r0, r2
 800145c:	d100      	bne.n	8001460 <__aeabi_dsub+0x4d8>
 800145e:	e0e9      	b.n	8001634 <__aeabi_dsub+0x6ac>
 8001460:	19df      	adds	r7, r3, r7
 8001462:	429f      	cmp	r7, r3
 8001464:	419b      	sbcs	r3, r3
 8001466:	4461      	add	r1, ip
 8001468:	425b      	negs	r3, r3
 800146a:	18c9      	adds	r1, r1, r3
 800146c:	07cc      	lsls	r4, r1, #31
 800146e:	087f      	lsrs	r7, r7, #1
 8001470:	084b      	lsrs	r3, r1, #1
 8001472:	4699      	mov	r9, r3
 8001474:	4680      	mov	r8, r0
 8001476:	433c      	orrs	r4, r7
 8001478:	e6f4      	b.n	8001264 <__aeabi_dsub+0x2dc>
 800147a:	1afc      	subs	r4, r7, r3
 800147c:	42a7      	cmp	r7, r4
 800147e:	41bf      	sbcs	r7, r7
 8001480:	4663      	mov	r3, ip
 8001482:	427f      	negs	r7, r7
 8001484:	1ac9      	subs	r1, r1, r3
 8001486:	1bcb      	subs	r3, r1, r7
 8001488:	4699      	mov	r9, r3
 800148a:	465d      	mov	r5, fp
 800148c:	e5d5      	b.n	800103a <__aeabi_dsub+0xb2>
 800148e:	08ff      	lsrs	r7, r7, #3
 8001490:	074b      	lsls	r3, r1, #29
 8001492:	465d      	mov	r5, fp
 8001494:	433b      	orrs	r3, r7
 8001496:	08cc      	lsrs	r4, r1, #3
 8001498:	e6ee      	b.n	8001278 <__aeabi_dsub+0x2f0>
 800149a:	4662      	mov	r2, ip
 800149c:	431a      	orrs	r2, r3
 800149e:	d000      	beq.n	80014a2 <__aeabi_dsub+0x51a>
 80014a0:	e082      	b.n	80015a8 <__aeabi_dsub+0x620>
 80014a2:	000b      	movs	r3, r1
 80014a4:	433b      	orrs	r3, r7
 80014a6:	d11b      	bne.n	80014e0 <__aeabi_dsub+0x558>
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	2500      	movs	r5, #0
 80014ac:	0324      	lsls	r4, r4, #12
 80014ae:	e6f9      	b.n	80012a4 <__aeabi_dsub+0x31c>
 80014b0:	19dc      	adds	r4, r3, r7
 80014b2:	429c      	cmp	r4, r3
 80014b4:	419b      	sbcs	r3, r3
 80014b6:	4461      	add	r1, ip
 80014b8:	4689      	mov	r9, r1
 80014ba:	425b      	negs	r3, r3
 80014bc:	4499      	add	r9, r3
 80014be:	464b      	mov	r3, r9
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	d444      	bmi.n	800154e <__aeabi_dsub+0x5c6>
 80014c4:	2301      	movs	r3, #1
 80014c6:	4698      	mov	r8, r3
 80014c8:	e6cc      	b.n	8001264 <__aeabi_dsub+0x2dc>
 80014ca:	1bdc      	subs	r4, r3, r7
 80014cc:	4662      	mov	r2, ip
 80014ce:	42a3      	cmp	r3, r4
 80014d0:	419b      	sbcs	r3, r3
 80014d2:	1a51      	subs	r1, r2, r1
 80014d4:	425b      	negs	r3, r3
 80014d6:	1acb      	subs	r3, r1, r3
 80014d8:	4699      	mov	r9, r3
 80014da:	2301      	movs	r3, #1
 80014dc:	4698      	mov	r8, r3
 80014de:	e5a4      	b.n	800102a <__aeabi_dsub+0xa2>
 80014e0:	08ff      	lsrs	r7, r7, #3
 80014e2:	074b      	lsls	r3, r1, #29
 80014e4:	465d      	mov	r5, fp
 80014e6:	433b      	orrs	r3, r7
 80014e8:	08cc      	lsrs	r4, r1, #3
 80014ea:	e6d7      	b.n	800129c <__aeabi_dsub+0x314>
 80014ec:	4662      	mov	r2, ip
 80014ee:	431a      	orrs	r2, r3
 80014f0:	0014      	movs	r4, r2
 80014f2:	1e63      	subs	r3, r4, #1
 80014f4:	419c      	sbcs	r4, r3
 80014f6:	e679      	b.n	80011ec <__aeabi_dsub+0x264>
 80014f8:	0015      	movs	r5, r2
 80014fa:	4664      	mov	r4, ip
 80014fc:	3d20      	subs	r5, #32
 80014fe:	40ec      	lsrs	r4, r5
 8001500:	46a0      	mov	r8, r4
 8001502:	2a20      	cmp	r2, #32
 8001504:	d005      	beq.n	8001512 <__aeabi_dsub+0x58a>
 8001506:	2540      	movs	r5, #64	; 0x40
 8001508:	4664      	mov	r4, ip
 800150a:	1aaa      	subs	r2, r5, r2
 800150c:	4094      	lsls	r4, r2
 800150e:	4323      	orrs	r3, r4
 8001510:	469a      	mov	sl, r3
 8001512:	4654      	mov	r4, sl
 8001514:	1e63      	subs	r3, r4, #1
 8001516:	419c      	sbcs	r4, r3
 8001518:	4643      	mov	r3, r8
 800151a:	4323      	orrs	r3, r4
 800151c:	e773      	b.n	8001406 <__aeabi_dsub+0x47e>
 800151e:	4662      	mov	r2, ip
 8001520:	431a      	orrs	r2, r3
 8001522:	d023      	beq.n	800156c <__aeabi_dsub+0x5e4>
 8001524:	000a      	movs	r2, r1
 8001526:	433a      	orrs	r2, r7
 8001528:	d000      	beq.n	800152c <__aeabi_dsub+0x5a4>
 800152a:	e0a0      	b.n	800166e <__aeabi_dsub+0x6e6>
 800152c:	4662      	mov	r2, ip
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	0752      	lsls	r2, r2, #29
 8001532:	4313      	orrs	r3, r2
 8001534:	4662      	mov	r2, ip
 8001536:	08d4      	lsrs	r4, r2, #3
 8001538:	e6b0      	b.n	800129c <__aeabi_dsub+0x314>
 800153a:	000b      	movs	r3, r1
 800153c:	433b      	orrs	r3, r7
 800153e:	d100      	bne.n	8001542 <__aeabi_dsub+0x5ba>
 8001540:	e728      	b.n	8001394 <__aeabi_dsub+0x40c>
 8001542:	08ff      	lsrs	r7, r7, #3
 8001544:	074b      	lsls	r3, r1, #29
 8001546:	465d      	mov	r5, fp
 8001548:	433b      	orrs	r3, r7
 800154a:	08cc      	lsrs	r4, r1, #3
 800154c:	e697      	b.n	800127e <__aeabi_dsub+0x2f6>
 800154e:	2302      	movs	r3, #2
 8001550:	4698      	mov	r8, r3
 8001552:	e736      	b.n	80013c2 <__aeabi_dsub+0x43a>
 8001554:	1afc      	subs	r4, r7, r3
 8001556:	42a7      	cmp	r7, r4
 8001558:	41bf      	sbcs	r7, r7
 800155a:	4663      	mov	r3, ip
 800155c:	427f      	negs	r7, r7
 800155e:	1ac9      	subs	r1, r1, r3
 8001560:	1bcb      	subs	r3, r1, r7
 8001562:	4699      	mov	r9, r3
 8001564:	2301      	movs	r3, #1
 8001566:	465d      	mov	r5, fp
 8001568:	4698      	mov	r8, r3
 800156a:	e55e      	b.n	800102a <__aeabi_dsub+0xa2>
 800156c:	074b      	lsls	r3, r1, #29
 800156e:	08ff      	lsrs	r7, r7, #3
 8001570:	433b      	orrs	r3, r7
 8001572:	08cc      	lsrs	r4, r1, #3
 8001574:	e692      	b.n	800129c <__aeabi_dsub+0x314>
 8001576:	1bdc      	subs	r4, r3, r7
 8001578:	4660      	mov	r0, ip
 800157a:	42a3      	cmp	r3, r4
 800157c:	41b6      	sbcs	r6, r6
 800157e:	1a40      	subs	r0, r0, r1
 8001580:	4276      	negs	r6, r6
 8001582:	1b80      	subs	r0, r0, r6
 8001584:	4681      	mov	r9, r0
 8001586:	0200      	lsls	r0, r0, #8
 8001588:	d560      	bpl.n	800164c <__aeabi_dsub+0x6c4>
 800158a:	1afc      	subs	r4, r7, r3
 800158c:	42a7      	cmp	r7, r4
 800158e:	41bf      	sbcs	r7, r7
 8001590:	4663      	mov	r3, ip
 8001592:	427f      	negs	r7, r7
 8001594:	1ac9      	subs	r1, r1, r3
 8001596:	1bcb      	subs	r3, r1, r7
 8001598:	4699      	mov	r9, r3
 800159a:	465d      	mov	r5, fp
 800159c:	e576      	b.n	800108c <__aeabi_dsub+0x104>
 800159e:	08ff      	lsrs	r7, r7, #3
 80015a0:	074b      	lsls	r3, r1, #29
 80015a2:	433b      	orrs	r3, r7
 80015a4:	08cc      	lsrs	r4, r1, #3
 80015a6:	e667      	b.n	8001278 <__aeabi_dsub+0x2f0>
 80015a8:	000a      	movs	r2, r1
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	433a      	orrs	r2, r7
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dsub+0x62a>
 80015b0:	e66f      	b.n	8001292 <__aeabi_dsub+0x30a>
 80015b2:	4662      	mov	r2, ip
 80015b4:	0752      	lsls	r2, r2, #29
 80015b6:	4313      	orrs	r3, r2
 80015b8:	4662      	mov	r2, ip
 80015ba:	08d4      	lsrs	r4, r2, #3
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	0312      	lsls	r2, r2, #12
 80015c0:	4214      	tst	r4, r2
 80015c2:	d007      	beq.n	80015d4 <__aeabi_dsub+0x64c>
 80015c4:	08c8      	lsrs	r0, r1, #3
 80015c6:	4210      	tst	r0, r2
 80015c8:	d104      	bne.n	80015d4 <__aeabi_dsub+0x64c>
 80015ca:	465d      	mov	r5, fp
 80015cc:	0004      	movs	r4, r0
 80015ce:	08fb      	lsrs	r3, r7, #3
 80015d0:	0749      	lsls	r1, r1, #29
 80015d2:	430b      	orrs	r3, r1
 80015d4:	0f5a      	lsrs	r2, r3, #29
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	0752      	lsls	r2, r2, #29
 80015dc:	4313      	orrs	r3, r2
 80015de:	e65d      	b.n	800129c <__aeabi_dsub+0x314>
 80015e0:	074b      	lsls	r3, r1, #29
 80015e2:	08ff      	lsrs	r7, r7, #3
 80015e4:	433b      	orrs	r3, r7
 80015e6:	08cc      	lsrs	r4, r1, #3
 80015e8:	e649      	b.n	800127e <__aeabi_dsub+0x2f6>
 80015ea:	19dc      	adds	r4, r3, r7
 80015ec:	429c      	cmp	r4, r3
 80015ee:	419b      	sbcs	r3, r3
 80015f0:	4461      	add	r1, ip
 80015f2:	4689      	mov	r9, r1
 80015f4:	425b      	negs	r3, r3
 80015f6:	4499      	add	r9, r3
 80015f8:	464b      	mov	r3, r9
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	d400      	bmi.n	8001600 <__aeabi_dsub+0x678>
 80015fe:	e631      	b.n	8001264 <__aeabi_dsub+0x2dc>
 8001600:	464a      	mov	r2, r9
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <__aeabi_dsub+0x6d8>)
 8001604:	401a      	ands	r2, r3
 8001606:	2301      	movs	r3, #1
 8001608:	4691      	mov	r9, r2
 800160a:	4698      	mov	r8, r3
 800160c:	e62a      	b.n	8001264 <__aeabi_dsub+0x2dc>
 800160e:	0016      	movs	r6, r2
 8001610:	4664      	mov	r4, ip
 8001612:	3e20      	subs	r6, #32
 8001614:	40f4      	lsrs	r4, r6
 8001616:	46a0      	mov	r8, r4
 8001618:	2a20      	cmp	r2, #32
 800161a:	d005      	beq.n	8001628 <__aeabi_dsub+0x6a0>
 800161c:	2640      	movs	r6, #64	; 0x40
 800161e:	4664      	mov	r4, ip
 8001620:	1ab2      	subs	r2, r6, r2
 8001622:	4094      	lsls	r4, r2
 8001624:	4323      	orrs	r3, r4
 8001626:	469a      	mov	sl, r3
 8001628:	4654      	mov	r4, sl
 800162a:	1e63      	subs	r3, r4, #1
 800162c:	419c      	sbcs	r4, r3
 800162e:	4643      	mov	r3, r8
 8001630:	431c      	orrs	r4, r3
 8001632:	e5db      	b.n	80011ec <__aeabi_dsub+0x264>
 8001634:	0002      	movs	r2, r0
 8001636:	2400      	movs	r4, #0
 8001638:	2300      	movs	r3, #0
 800163a:	e548      	b.n	80010ce <__aeabi_dsub+0x146>
 800163c:	19dc      	adds	r4, r3, r7
 800163e:	42bc      	cmp	r4, r7
 8001640:	41bf      	sbcs	r7, r7
 8001642:	4461      	add	r1, ip
 8001644:	4689      	mov	r9, r1
 8001646:	427f      	negs	r7, r7
 8001648:	44b9      	add	r9, r7
 800164a:	e738      	b.n	80014be <__aeabi_dsub+0x536>
 800164c:	464b      	mov	r3, r9
 800164e:	4323      	orrs	r3, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dsub+0x6cc>
 8001652:	e69f      	b.n	8001394 <__aeabi_dsub+0x40c>
 8001654:	e606      	b.n	8001264 <__aeabi_dsub+0x2dc>
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	000007fe 	.word	0x000007fe
 800165c:	000007ff 	.word	0x000007ff
 8001660:	ff7fffff 	.word	0xff7fffff
 8001664:	08ff      	lsrs	r7, r7, #3
 8001666:	074b      	lsls	r3, r1, #29
 8001668:	433b      	orrs	r3, r7
 800166a:	08cc      	lsrs	r4, r1, #3
 800166c:	e616      	b.n	800129c <__aeabi_dsub+0x314>
 800166e:	4662      	mov	r2, ip
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	0752      	lsls	r2, r2, #29
 8001674:	4313      	orrs	r3, r2
 8001676:	4662      	mov	r2, ip
 8001678:	08d4      	lsrs	r4, r2, #3
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	0312      	lsls	r2, r2, #12
 800167e:	4214      	tst	r4, r2
 8001680:	d007      	beq.n	8001692 <__aeabi_dsub+0x70a>
 8001682:	08c8      	lsrs	r0, r1, #3
 8001684:	4210      	tst	r0, r2
 8001686:	d104      	bne.n	8001692 <__aeabi_dsub+0x70a>
 8001688:	465d      	mov	r5, fp
 800168a:	0004      	movs	r4, r0
 800168c:	08fb      	lsrs	r3, r7, #3
 800168e:	0749      	lsls	r1, r1, #29
 8001690:	430b      	orrs	r3, r1
 8001692:	0f5a      	lsrs	r2, r3, #29
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	0752      	lsls	r2, r2, #29
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	4313      	orrs	r3, r2
 800169c:	e5fe      	b.n	800129c <__aeabi_dsub+0x314>
 800169e:	2300      	movs	r3, #0
 80016a0:	4a01      	ldr	r2, [pc, #4]	; (80016a8 <__aeabi_dsub+0x720>)
 80016a2:	001c      	movs	r4, r3
 80016a4:	e513      	b.n	80010ce <__aeabi_dsub+0x146>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__aeabi_d2iz>:
 80016ac:	000a      	movs	r2, r1
 80016ae:	b530      	push	{r4, r5, lr}
 80016b0:	4c13      	ldr	r4, [pc, #76]	; (8001700 <__aeabi_d2iz+0x54>)
 80016b2:	0053      	lsls	r3, r2, #1
 80016b4:	0309      	lsls	r1, r1, #12
 80016b6:	0005      	movs	r5, r0
 80016b8:	0b09      	lsrs	r1, r1, #12
 80016ba:	2000      	movs	r0, #0
 80016bc:	0d5b      	lsrs	r3, r3, #21
 80016be:	0fd2      	lsrs	r2, r2, #31
 80016c0:	42a3      	cmp	r3, r4
 80016c2:	dd04      	ble.n	80016ce <__aeabi_d2iz+0x22>
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <__aeabi_d2iz+0x58>)
 80016c6:	4283      	cmp	r3, r0
 80016c8:	dd02      	ble.n	80016d0 <__aeabi_d2iz+0x24>
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <__aeabi_d2iz+0x5c>)
 80016cc:	18d0      	adds	r0, r2, r3
 80016ce:	bd30      	pop	{r4, r5, pc}
 80016d0:	2080      	movs	r0, #128	; 0x80
 80016d2:	0340      	lsls	r0, r0, #13
 80016d4:	4301      	orrs	r1, r0
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <__aeabi_d2iz+0x60>)
 80016d8:	1ac0      	subs	r0, r0, r3
 80016da:	281f      	cmp	r0, #31
 80016dc:	dd08      	ble.n	80016f0 <__aeabi_d2iz+0x44>
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <__aeabi_d2iz+0x64>)
 80016e0:	1ac3      	subs	r3, r0, r3
 80016e2:	40d9      	lsrs	r1, r3
 80016e4:	000b      	movs	r3, r1
 80016e6:	4258      	negs	r0, r3
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d1f0      	bne.n	80016ce <__aeabi_d2iz+0x22>
 80016ec:	0018      	movs	r0, r3
 80016ee:	e7ee      	b.n	80016ce <__aeabi_d2iz+0x22>
 80016f0:	4c08      	ldr	r4, [pc, #32]	; (8001714 <__aeabi_d2iz+0x68>)
 80016f2:	40c5      	lsrs	r5, r0
 80016f4:	46a4      	mov	ip, r4
 80016f6:	4463      	add	r3, ip
 80016f8:	4099      	lsls	r1, r3
 80016fa:	000b      	movs	r3, r1
 80016fc:	432b      	orrs	r3, r5
 80016fe:	e7f2      	b.n	80016e6 <__aeabi_d2iz+0x3a>
 8001700:	000003fe 	.word	0x000003fe
 8001704:	0000041d 	.word	0x0000041d
 8001708:	7fffffff 	.word	0x7fffffff
 800170c:	00000433 	.word	0x00000433
 8001710:	00000413 	.word	0x00000413
 8001714:	fffffbed 	.word	0xfffffbed

08001718 <__aeabi_f2d>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	0043      	lsls	r3, r0, #1
 800171c:	0246      	lsls	r6, r0, #9
 800171e:	0fc4      	lsrs	r4, r0, #31
 8001720:	20fe      	movs	r0, #254	; 0xfe
 8001722:	0e1b      	lsrs	r3, r3, #24
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	0a75      	lsrs	r5, r6, #9
 8001728:	4208      	tst	r0, r1
 800172a:	d00c      	beq.n	8001746 <__aeabi_f2d+0x2e>
 800172c:	22e0      	movs	r2, #224	; 0xe0
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4694      	mov	ip, r2
 8001732:	076d      	lsls	r5, r5, #29
 8001734:	0b36      	lsrs	r6, r6, #12
 8001736:	4463      	add	r3, ip
 8001738:	051b      	lsls	r3, r3, #20
 800173a:	4333      	orrs	r3, r6
 800173c:	07e4      	lsls	r4, r4, #31
 800173e:	4323      	orrs	r3, r4
 8001740:	0028      	movs	r0, r5
 8001742:	0019      	movs	r1, r3
 8001744:	bd70      	pop	{r4, r5, r6, pc}
 8001746:	2b00      	cmp	r3, #0
 8001748:	d114      	bne.n	8001774 <__aeabi_f2d+0x5c>
 800174a:	2d00      	cmp	r5, #0
 800174c:	d01b      	beq.n	8001786 <__aeabi_f2d+0x6e>
 800174e:	0028      	movs	r0, r5
 8001750:	f000 f868 	bl	8001824 <__clzsi2>
 8001754:	280a      	cmp	r0, #10
 8001756:	dc1c      	bgt.n	8001792 <__aeabi_f2d+0x7a>
 8001758:	230b      	movs	r3, #11
 800175a:	002e      	movs	r6, r5
 800175c:	1a1b      	subs	r3, r3, r0
 800175e:	40de      	lsrs	r6, r3
 8001760:	0003      	movs	r3, r0
 8001762:	3315      	adds	r3, #21
 8001764:	409d      	lsls	r5, r3
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <__aeabi_f2d+0x88>)
 8001768:	0336      	lsls	r6, r6, #12
 800176a:	1a12      	subs	r2, r2, r0
 800176c:	0552      	lsls	r2, r2, #21
 800176e:	0b36      	lsrs	r6, r6, #12
 8001770:	0d53      	lsrs	r3, r2, #21
 8001772:	e7e1      	b.n	8001738 <__aeabi_f2d+0x20>
 8001774:	2d00      	cmp	r5, #0
 8001776:	d009      	beq.n	800178c <__aeabi_f2d+0x74>
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	0b36      	lsrs	r6, r6, #12
 800177c:	0312      	lsls	r2, r2, #12
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <__aeabi_f2d+0x8c>)
 8001780:	076d      	lsls	r5, r5, #29
 8001782:	4316      	orrs	r6, r2
 8001784:	e7d8      	b.n	8001738 <__aeabi_f2d+0x20>
 8001786:	2300      	movs	r3, #0
 8001788:	2600      	movs	r6, #0
 800178a:	e7d5      	b.n	8001738 <__aeabi_f2d+0x20>
 800178c:	2600      	movs	r6, #0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <__aeabi_f2d+0x8c>)
 8001790:	e7d2      	b.n	8001738 <__aeabi_f2d+0x20>
 8001792:	0003      	movs	r3, r0
 8001794:	3b0b      	subs	r3, #11
 8001796:	409d      	lsls	r5, r3
 8001798:	002e      	movs	r6, r5
 800179a:	2500      	movs	r5, #0
 800179c:	e7e3      	b.n	8001766 <__aeabi_f2d+0x4e>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	00000389 	.word	0x00000389
 80017a4:	000007ff 	.word	0x000007ff

080017a8 <__aeabi_cdrcmple>:
 80017a8:	4684      	mov	ip, r0
 80017aa:	0010      	movs	r0, r2
 80017ac:	4662      	mov	r2, ip
 80017ae:	468c      	mov	ip, r1
 80017b0:	0019      	movs	r1, r3
 80017b2:	4663      	mov	r3, ip
 80017b4:	e000      	b.n	80017b8 <__aeabi_cdcmpeq>
 80017b6:	46c0      	nop			; (mov r8, r8)

080017b8 <__aeabi_cdcmpeq>:
 80017b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017ba:	f000 f8f9 	bl	80019b0 <__ledf2>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d401      	bmi.n	80017c6 <__aeabi_cdcmpeq+0xe>
 80017c2:	2100      	movs	r1, #0
 80017c4:	42c8      	cmn	r0, r1
 80017c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080017c8 <__aeabi_dcmpeq>:
 80017c8:	b510      	push	{r4, lr}
 80017ca:	f000 f849 	bl	8001860 <__eqdf2>
 80017ce:	4240      	negs	r0, r0
 80017d0:	3001      	adds	r0, #1
 80017d2:	bd10      	pop	{r4, pc}

080017d4 <__aeabi_dcmplt>:
 80017d4:	b510      	push	{r4, lr}
 80017d6:	f000 f8eb 	bl	80019b0 <__ledf2>
 80017da:	2800      	cmp	r0, #0
 80017dc:	db01      	blt.n	80017e2 <__aeabi_dcmplt+0xe>
 80017de:	2000      	movs	r0, #0
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	2001      	movs	r0, #1
 80017e4:	bd10      	pop	{r4, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)

080017e8 <__aeabi_dcmple>:
 80017e8:	b510      	push	{r4, lr}
 80017ea:	f000 f8e1 	bl	80019b0 <__ledf2>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	dd01      	ble.n	80017f6 <__aeabi_dcmple+0xe>
 80017f2:	2000      	movs	r0, #0
 80017f4:	bd10      	pop	{r4, pc}
 80017f6:	2001      	movs	r0, #1
 80017f8:	bd10      	pop	{r4, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)

080017fc <__aeabi_dcmpgt>:
 80017fc:	b510      	push	{r4, lr}
 80017fe:	f000 f871 	bl	80018e4 <__gedf2>
 8001802:	2800      	cmp	r0, #0
 8001804:	dc01      	bgt.n	800180a <__aeabi_dcmpgt+0xe>
 8001806:	2000      	movs	r0, #0
 8001808:	bd10      	pop	{r4, pc}
 800180a:	2001      	movs	r0, #1
 800180c:	bd10      	pop	{r4, pc}
 800180e:	46c0      	nop			; (mov r8, r8)

08001810 <__aeabi_dcmpge>:
 8001810:	b510      	push	{r4, lr}
 8001812:	f000 f867 	bl	80018e4 <__gedf2>
 8001816:	2800      	cmp	r0, #0
 8001818:	da01      	bge.n	800181e <__aeabi_dcmpge+0xe>
 800181a:	2000      	movs	r0, #0
 800181c:	bd10      	pop	{r4, pc}
 800181e:	2001      	movs	r0, #1
 8001820:	bd10      	pop	{r4, pc}
 8001822:	46c0      	nop			; (mov r8, r8)

08001824 <__clzsi2>:
 8001824:	211c      	movs	r1, #28
 8001826:	2301      	movs	r3, #1
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	4298      	cmp	r0, r3
 800182c:	d301      	bcc.n	8001832 <__clzsi2+0xe>
 800182e:	0c00      	lsrs	r0, r0, #16
 8001830:	3910      	subs	r1, #16
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	4298      	cmp	r0, r3
 8001836:	d301      	bcc.n	800183c <__clzsi2+0x18>
 8001838:	0a00      	lsrs	r0, r0, #8
 800183a:	3908      	subs	r1, #8
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	4298      	cmp	r0, r3
 8001840:	d301      	bcc.n	8001846 <__clzsi2+0x22>
 8001842:	0900      	lsrs	r0, r0, #4
 8001844:	3904      	subs	r1, #4
 8001846:	a202      	add	r2, pc, #8	; (adr r2, 8001850 <__clzsi2+0x2c>)
 8001848:	5c10      	ldrb	r0, [r2, r0]
 800184a:	1840      	adds	r0, r0, r1
 800184c:	4770      	bx	lr
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	02020304 	.word	0x02020304
 8001854:	01010101 	.word	0x01010101
	...

08001860 <__eqdf2>:
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	464e      	mov	r6, r9
 8001864:	4645      	mov	r5, r8
 8001866:	46de      	mov	lr, fp
 8001868:	4657      	mov	r7, sl
 800186a:	4690      	mov	r8, r2
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	0017      	movs	r7, r2
 8001870:	031a      	lsls	r2, r3, #12
 8001872:	0b12      	lsrs	r2, r2, #12
 8001874:	0005      	movs	r5, r0
 8001876:	4684      	mov	ip, r0
 8001878:	4819      	ldr	r0, [pc, #100]	; (80018e0 <__eqdf2+0x80>)
 800187a:	030e      	lsls	r6, r1, #12
 800187c:	004c      	lsls	r4, r1, #1
 800187e:	4691      	mov	r9, r2
 8001880:	005a      	lsls	r2, r3, #1
 8001882:	0fdb      	lsrs	r3, r3, #31
 8001884:	469b      	mov	fp, r3
 8001886:	0b36      	lsrs	r6, r6, #12
 8001888:	0d64      	lsrs	r4, r4, #21
 800188a:	0fc9      	lsrs	r1, r1, #31
 800188c:	0d52      	lsrs	r2, r2, #21
 800188e:	4284      	cmp	r4, r0
 8001890:	d019      	beq.n	80018c6 <__eqdf2+0x66>
 8001892:	4282      	cmp	r2, r0
 8001894:	d010      	beq.n	80018b8 <__eqdf2+0x58>
 8001896:	2001      	movs	r0, #1
 8001898:	4294      	cmp	r4, r2
 800189a:	d10e      	bne.n	80018ba <__eqdf2+0x5a>
 800189c:	454e      	cmp	r6, r9
 800189e:	d10c      	bne.n	80018ba <__eqdf2+0x5a>
 80018a0:	2001      	movs	r0, #1
 80018a2:	45c4      	cmp	ip, r8
 80018a4:	d109      	bne.n	80018ba <__eqdf2+0x5a>
 80018a6:	4559      	cmp	r1, fp
 80018a8:	d017      	beq.n	80018da <__eqdf2+0x7a>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d105      	bne.n	80018ba <__eqdf2+0x5a>
 80018ae:	0030      	movs	r0, r6
 80018b0:	4328      	orrs	r0, r5
 80018b2:	1e43      	subs	r3, r0, #1
 80018b4:	4198      	sbcs	r0, r3
 80018b6:	e000      	b.n	80018ba <__eqdf2+0x5a>
 80018b8:	2001      	movs	r0, #1
 80018ba:	bcf0      	pop	{r4, r5, r6, r7}
 80018bc:	46bb      	mov	fp, r7
 80018be:	46b2      	mov	sl, r6
 80018c0:	46a9      	mov	r9, r5
 80018c2:	46a0      	mov	r8, r4
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c6:	0033      	movs	r3, r6
 80018c8:	2001      	movs	r0, #1
 80018ca:	432b      	orrs	r3, r5
 80018cc:	d1f5      	bne.n	80018ba <__eqdf2+0x5a>
 80018ce:	42a2      	cmp	r2, r4
 80018d0:	d1f3      	bne.n	80018ba <__eqdf2+0x5a>
 80018d2:	464b      	mov	r3, r9
 80018d4:	433b      	orrs	r3, r7
 80018d6:	d1f0      	bne.n	80018ba <__eqdf2+0x5a>
 80018d8:	e7e2      	b.n	80018a0 <__eqdf2+0x40>
 80018da:	2000      	movs	r0, #0
 80018dc:	e7ed      	b.n	80018ba <__eqdf2+0x5a>
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	000007ff 	.word	0x000007ff

080018e4 <__gedf2>:
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	4647      	mov	r7, r8
 80018e8:	46ce      	mov	lr, r9
 80018ea:	0004      	movs	r4, r0
 80018ec:	0018      	movs	r0, r3
 80018ee:	0016      	movs	r6, r2
 80018f0:	031b      	lsls	r3, r3, #12
 80018f2:	0b1b      	lsrs	r3, r3, #12
 80018f4:	4d2d      	ldr	r5, [pc, #180]	; (80019ac <__gedf2+0xc8>)
 80018f6:	004a      	lsls	r2, r1, #1
 80018f8:	4699      	mov	r9, r3
 80018fa:	b580      	push	{r7, lr}
 80018fc:	0043      	lsls	r3, r0, #1
 80018fe:	030f      	lsls	r7, r1, #12
 8001900:	46a4      	mov	ip, r4
 8001902:	46b0      	mov	r8, r6
 8001904:	0b3f      	lsrs	r7, r7, #12
 8001906:	0d52      	lsrs	r2, r2, #21
 8001908:	0fc9      	lsrs	r1, r1, #31
 800190a:	0d5b      	lsrs	r3, r3, #21
 800190c:	0fc0      	lsrs	r0, r0, #31
 800190e:	42aa      	cmp	r2, r5
 8001910:	d021      	beq.n	8001956 <__gedf2+0x72>
 8001912:	42ab      	cmp	r3, r5
 8001914:	d013      	beq.n	800193e <__gedf2+0x5a>
 8001916:	2a00      	cmp	r2, #0
 8001918:	d122      	bne.n	8001960 <__gedf2+0x7c>
 800191a:	433c      	orrs	r4, r7
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <__gedf2+0x42>
 8001920:	464d      	mov	r5, r9
 8001922:	432e      	orrs	r6, r5
 8001924:	d022      	beq.n	800196c <__gedf2+0x88>
 8001926:	2c00      	cmp	r4, #0
 8001928:	d010      	beq.n	800194c <__gedf2+0x68>
 800192a:	4281      	cmp	r1, r0
 800192c:	d022      	beq.n	8001974 <__gedf2+0x90>
 800192e:	2002      	movs	r0, #2
 8001930:	3901      	subs	r1, #1
 8001932:	4008      	ands	r0, r1
 8001934:	3801      	subs	r0, #1
 8001936:	bcc0      	pop	{r6, r7}
 8001938:	46b9      	mov	r9, r7
 800193a:	46b0      	mov	r8, r6
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193e:	464d      	mov	r5, r9
 8001940:	432e      	orrs	r6, r5
 8001942:	d129      	bne.n	8001998 <__gedf2+0xb4>
 8001944:	2a00      	cmp	r2, #0
 8001946:	d1f0      	bne.n	800192a <__gedf2+0x46>
 8001948:	433c      	orrs	r4, r7
 800194a:	d1ee      	bne.n	800192a <__gedf2+0x46>
 800194c:	2800      	cmp	r0, #0
 800194e:	d1f2      	bne.n	8001936 <__gedf2+0x52>
 8001950:	2001      	movs	r0, #1
 8001952:	4240      	negs	r0, r0
 8001954:	e7ef      	b.n	8001936 <__gedf2+0x52>
 8001956:	003d      	movs	r5, r7
 8001958:	4325      	orrs	r5, r4
 800195a:	d11d      	bne.n	8001998 <__gedf2+0xb4>
 800195c:	4293      	cmp	r3, r2
 800195e:	d0ee      	beq.n	800193e <__gedf2+0x5a>
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e2      	bne.n	800192a <__gedf2+0x46>
 8001964:	464c      	mov	r4, r9
 8001966:	4326      	orrs	r6, r4
 8001968:	d1df      	bne.n	800192a <__gedf2+0x46>
 800196a:	e7e0      	b.n	800192e <__gedf2+0x4a>
 800196c:	2000      	movs	r0, #0
 800196e:	2c00      	cmp	r4, #0
 8001970:	d0e1      	beq.n	8001936 <__gedf2+0x52>
 8001972:	e7dc      	b.n	800192e <__gedf2+0x4a>
 8001974:	429a      	cmp	r2, r3
 8001976:	dc0a      	bgt.n	800198e <__gedf2+0xaa>
 8001978:	dbe8      	blt.n	800194c <__gedf2+0x68>
 800197a:	454f      	cmp	r7, r9
 800197c:	d8d7      	bhi.n	800192e <__gedf2+0x4a>
 800197e:	d00e      	beq.n	800199e <__gedf2+0xba>
 8001980:	2000      	movs	r0, #0
 8001982:	454f      	cmp	r7, r9
 8001984:	d2d7      	bcs.n	8001936 <__gedf2+0x52>
 8001986:	2900      	cmp	r1, #0
 8001988:	d0e2      	beq.n	8001950 <__gedf2+0x6c>
 800198a:	0008      	movs	r0, r1
 800198c:	e7d3      	b.n	8001936 <__gedf2+0x52>
 800198e:	4243      	negs	r3, r0
 8001990:	4158      	adcs	r0, r3
 8001992:	0040      	lsls	r0, r0, #1
 8001994:	3801      	subs	r0, #1
 8001996:	e7ce      	b.n	8001936 <__gedf2+0x52>
 8001998:	2002      	movs	r0, #2
 800199a:	4240      	negs	r0, r0
 800199c:	e7cb      	b.n	8001936 <__gedf2+0x52>
 800199e:	45c4      	cmp	ip, r8
 80019a0:	d8c5      	bhi.n	800192e <__gedf2+0x4a>
 80019a2:	2000      	movs	r0, #0
 80019a4:	45c4      	cmp	ip, r8
 80019a6:	d2c6      	bcs.n	8001936 <__gedf2+0x52>
 80019a8:	e7ed      	b.n	8001986 <__gedf2+0xa2>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	000007ff 	.word	0x000007ff

080019b0 <__ledf2>:
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	4647      	mov	r7, r8
 80019b4:	46ce      	mov	lr, r9
 80019b6:	0004      	movs	r4, r0
 80019b8:	0018      	movs	r0, r3
 80019ba:	0016      	movs	r6, r2
 80019bc:	031b      	lsls	r3, r3, #12
 80019be:	0b1b      	lsrs	r3, r3, #12
 80019c0:	4d2c      	ldr	r5, [pc, #176]	; (8001a74 <__ledf2+0xc4>)
 80019c2:	004a      	lsls	r2, r1, #1
 80019c4:	4699      	mov	r9, r3
 80019c6:	b580      	push	{r7, lr}
 80019c8:	0043      	lsls	r3, r0, #1
 80019ca:	030f      	lsls	r7, r1, #12
 80019cc:	46a4      	mov	ip, r4
 80019ce:	46b0      	mov	r8, r6
 80019d0:	0b3f      	lsrs	r7, r7, #12
 80019d2:	0d52      	lsrs	r2, r2, #21
 80019d4:	0fc9      	lsrs	r1, r1, #31
 80019d6:	0d5b      	lsrs	r3, r3, #21
 80019d8:	0fc0      	lsrs	r0, r0, #31
 80019da:	42aa      	cmp	r2, r5
 80019dc:	d00d      	beq.n	80019fa <__ledf2+0x4a>
 80019de:	42ab      	cmp	r3, r5
 80019e0:	d010      	beq.n	8001a04 <__ledf2+0x54>
 80019e2:	2a00      	cmp	r2, #0
 80019e4:	d127      	bne.n	8001a36 <__ledf2+0x86>
 80019e6:	433c      	orrs	r4, r7
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d111      	bne.n	8001a10 <__ledf2+0x60>
 80019ec:	464d      	mov	r5, r9
 80019ee:	432e      	orrs	r6, r5
 80019f0:	d10e      	bne.n	8001a10 <__ledf2+0x60>
 80019f2:	2000      	movs	r0, #0
 80019f4:	2c00      	cmp	r4, #0
 80019f6:	d015      	beq.n	8001a24 <__ledf2+0x74>
 80019f8:	e00e      	b.n	8001a18 <__ledf2+0x68>
 80019fa:	003d      	movs	r5, r7
 80019fc:	4325      	orrs	r5, r4
 80019fe:	d110      	bne.n	8001a22 <__ledf2+0x72>
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d118      	bne.n	8001a36 <__ledf2+0x86>
 8001a04:	464d      	mov	r5, r9
 8001a06:	432e      	orrs	r6, r5
 8001a08:	d10b      	bne.n	8001a22 <__ledf2+0x72>
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d102      	bne.n	8001a14 <__ledf2+0x64>
 8001a0e:	433c      	orrs	r4, r7
 8001a10:	2c00      	cmp	r4, #0
 8001a12:	d00b      	beq.n	8001a2c <__ledf2+0x7c>
 8001a14:	4281      	cmp	r1, r0
 8001a16:	d014      	beq.n	8001a42 <__ledf2+0x92>
 8001a18:	2002      	movs	r0, #2
 8001a1a:	3901      	subs	r1, #1
 8001a1c:	4008      	ands	r0, r1
 8001a1e:	3801      	subs	r0, #1
 8001a20:	e000      	b.n	8001a24 <__ledf2+0x74>
 8001a22:	2002      	movs	r0, #2
 8001a24:	bcc0      	pop	{r6, r7}
 8001a26:	46b9      	mov	r9, r7
 8001a28:	46b0      	mov	r8, r6
 8001a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d1f9      	bne.n	8001a24 <__ledf2+0x74>
 8001a30:	2001      	movs	r0, #1
 8001a32:	4240      	negs	r0, r0
 8001a34:	e7f6      	b.n	8001a24 <__ledf2+0x74>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1ec      	bne.n	8001a14 <__ledf2+0x64>
 8001a3a:	464c      	mov	r4, r9
 8001a3c:	4326      	orrs	r6, r4
 8001a3e:	d1e9      	bne.n	8001a14 <__ledf2+0x64>
 8001a40:	e7ea      	b.n	8001a18 <__ledf2+0x68>
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dd04      	ble.n	8001a50 <__ledf2+0xa0>
 8001a46:	4243      	negs	r3, r0
 8001a48:	4158      	adcs	r0, r3
 8001a4a:	0040      	lsls	r0, r0, #1
 8001a4c:	3801      	subs	r0, #1
 8001a4e:	e7e9      	b.n	8001a24 <__ledf2+0x74>
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbeb      	blt.n	8001a2c <__ledf2+0x7c>
 8001a54:	454f      	cmp	r7, r9
 8001a56:	d8df      	bhi.n	8001a18 <__ledf2+0x68>
 8001a58:	d006      	beq.n	8001a68 <__ledf2+0xb8>
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	454f      	cmp	r7, r9
 8001a5e:	d2e1      	bcs.n	8001a24 <__ledf2+0x74>
 8001a60:	2900      	cmp	r1, #0
 8001a62:	d0e5      	beq.n	8001a30 <__ledf2+0x80>
 8001a64:	0008      	movs	r0, r1
 8001a66:	e7dd      	b.n	8001a24 <__ledf2+0x74>
 8001a68:	45c4      	cmp	ip, r8
 8001a6a:	d8d5      	bhi.n	8001a18 <__ledf2+0x68>
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	45c4      	cmp	ip, r8
 8001a70:	d2d8      	bcs.n	8001a24 <__ledf2+0x74>
 8001a72:	e7f5      	b.n	8001a60 <__ledf2+0xb0>
 8001a74:	000007ff 	.word	0x000007ff

08001a78 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b090      	sub	sp, #64	; 0x40
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001a80:	200c      	movs	r0, #12
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	22b2      	movs	r2, #178	; 0xb2
 8001a86:	32ff      	adds	r2, #255	; 0xff
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
	new_LoRa.spredingFactor        = SF_7      ;
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	222c      	movs	r2, #44	; 0x2c
 8001a8e:	2107      	movs	r1, #7
 8001a90:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	222d      	movs	r2, #45	; 0x2d
 8001a96:	2107      	movs	r1, #7
 8001a98:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 8001a9a:	183b      	adds	r3, r7, r0
 8001a9c:	222e      	movs	r2, #46	; 0x2e
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	2232      	movs	r2, #50	; 0x32
 8001aa6:	21ff      	movs	r1, #255	; 0xff
 8001aa8:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 8001aaa:	183b      	adds	r3, r7, r0
 8001aac:	2233      	movs	r2, #51	; 0x33
 8001aae:	2164      	movs	r1, #100	; 0x64
 8001ab0:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 8001ab2:	0001      	movs	r1, r0
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	861a      	strh	r2, [r3, #48]	; 0x30
	new_LoRa.newPacket = true;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2201      	movs	r2, #1
 8001abe:	771a      	strb	r2, [r3, #28]

	return new_LoRa;
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	2334      	movs	r3, #52	; 0x34
 8001aca:	001a      	movs	r2, r3
 8001acc:	f002 fed2 	bl	8004874 <memcpy>
}
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b010      	add	sp, #64	; 0x40
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	_LoRa->newPacket = true;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	771a      	strb	r2, [r3, #28]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6898      	ldr	r0, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	899b      	ldrh	r3, [r3, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	0019      	movs	r1, r3
 8001af2:	f001 f967 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 ff28 	bl	800294c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6898      	ldr	r0, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	899b      	ldrh	r3, [r3, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	0019      	movs	r1, r3
 8001b08:	f001 f95c 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b0c:	2064      	movs	r0, #100	; 0x64
 8001b0e:	f000 ff1d 	bl	800294c <HAL_Delay>
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001b1a:	b5b0      	push	{r4, r5, r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001b24:	250e      	movs	r5, #14
 8001b26:	197c      	adds	r4, r7, r5
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 fa00 	bl	8001f32 <LoRa_read>
 8001b32:	0003      	movs	r3, r0
 8001b34:	7023      	strb	r3, [r4, #0]
	data = read;
 8001b36:	200f      	movs	r0, #15
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	0029      	movs	r1, r5
 8001b3c:	187a      	adds	r2, r7, r1
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	187a      	adds	r2, r7, r1
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	2107      	movs	r1, #7
 8001b50:	438a      	bics	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
 8001b5a:	e04e      	b.n	8001bfa <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d110      	bne.n	8001b84 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8001b62:	230e      	movs	r3, #14
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	b25b      	sxtb	r3, r3
 8001b70:	2201      	movs	r2, #1
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b25a      	sxtb	r2, r3
 8001b76:	230f      	movs	r3, #15
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	621a      	str	r2, [r3, #32]
 8001b82:	e03a      	b.n	8001bfa <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d110      	bne.n	8001bac <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8001b8a:	230e      	movs	r3, #14
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	2207      	movs	r2, #7
 8001b94:	4393      	bics	r3, r2
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b25a      	sxtb	r2, r3
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	621a      	str	r2, [r3, #32]
 8001baa:	e026      	b.n	8001bfa <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d110      	bne.n	8001bd4 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 8001bb2:	230e      	movs	r3, #14
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	2207      	movs	r2, #7
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	2205      	movs	r2, #5
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25a      	sxtb	r2, r3
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2205      	movs	r2, #5
 8001bd0:	621a      	str	r2, [r3, #32]
 8001bd2:	e012      	b.n	8001bfa <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d10f      	bne.n	8001bfa <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 8001bda:	230e      	movs	r3, #14
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	2207      	movs	r2, #7
 8001be4:	4393      	bics	r3, r2
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	2206      	movs	r2, #6
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b25a      	sxtb	r2, r3
 8001bee:	230f      	movs	r3, #15
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2206      	movs	r2, #6
 8001bf8:	621a      	str	r2, [r3, #32]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2101      	movs	r1, #1
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 f9b2 	bl	8001f6e <LoRa_write>
	//HAL_Delay(10);
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}

08001c12 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	1dbb      	adds	r3, r7, #6
 8001c20:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	889b      	ldrh	r3, [r3, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	f001 f8c9 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6998      	ldr	r0, [r3, #24]
 8001c36:	23fa      	movs	r3, #250	; 0xfa
 8001c38:	00dc      	lsls	r4, r3, #3
 8001c3a:	1dbb      	adds	r3, r7, #6
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	0023      	movs	r3, r4
 8001c42:	f001 ff9d 	bl	8003b80 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f002 fc0d 	bl	800446c <HAL_SPI_GetState>
 8001c52:	0003      	movs	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d1f7      	bne.n	8001c48 <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6998      	ldr	r0, [r3, #24]
 8001c5c:	23fa      	movs	r3, #250	; 0xfa
 8001c5e:	00dc      	lsls	r4, r3, #3
 8001c60:	2320      	movs	r3, #32
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	881a      	ldrh	r2, [r3, #0]
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	0023      	movs	r3, r4
 8001c6a:	f002 f8e1 	bl	8003e30 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f002 fbf9 	bl	800446c <HAL_SPI_GetState>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d1f7      	bne.n	8001c70 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	f001 f89a 	bl	8002dc4 <HAL_GPIO_WritePin>
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b005      	add	sp, #20
 8001c96:	bd90      	pop	{r4, r7, pc}

08001c98 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	1dbb      	adds	r3, r7, #6
 8001ca6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	889b      	ldrh	r3, [r3, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	f001 f886 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6998      	ldr	r0, [r3, #24]
 8001cbc:	23fa      	movs	r3, #250	; 0xfa
 8001cbe:	00dc      	lsls	r4, r3, #3
 8001cc0:	1dbb      	adds	r3, r7, #6
 8001cc2:	881a      	ldrh	r2, [r3, #0]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	0023      	movs	r3, r4
 8001cc8:	f001 ff5a 	bl	8003b80 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f002 fbca 	bl	800446c <HAL_SPI_GetState>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d1f7      	bne.n	8001cce <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6998      	ldr	r0, [r3, #24]
 8001ce2:	23fa      	movs	r3, #250	; 0xfa
 8001ce4:	00dc      	lsls	r4, r3, #3
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	0023      	movs	r3, r4
 8001cf0:	f001 ff46 	bl	8003b80 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f002 fbb6 	bl	800446c <HAL_SPI_GetState>
 8001d00:	0003      	movs	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d1f7      	bne.n	8001cf6 <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	889b      	ldrh	r3, [r3, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	0019      	movs	r1, r3
 8001d12:	f001 f857 	bl	8002dc4 <HAL_GPIO_WritePin>
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b005      	add	sp, #20
 8001d1c:	bd90      	pop	{r4, r7, pc}
	...

08001d20 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, float freq){
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	//F = (freq * 524288)>>5;
	// F = (uint32_t)(freq * 1000000 / 61.03515625f);
	F = (uint32_t)(freq * 1e6 / 61.03515625f);
 8001d2a:	6838      	ldr	r0, [r7, #0]
 8001d2c:	f7ff fcf4 	bl	8001718 <__aeabi_f2d>
 8001d30:	2200      	movs	r2, #0
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <LoRa_setFrequency+0x94>)
 8001d34:	f7fe febc 	bl	8000ab0 <__aeabi_dmul>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	000b      	movs	r3, r1
 8001d3c:	0010      	movs	r0, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <LoRa_setFrequency+0x98>)
 8001d44:	f7fe fbbe 	bl	80004c4 <__aeabi_ddiv>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	000b      	movs	r3, r1
 8001d4c:	0010      	movs	r0, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	f7fe fb4c 	bl	80003ec <__aeabi_d2uiz>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0c1a      	lsrs	r2, r3, #16
 8001d5c:	240b      	movs	r4, #11
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2106      	movs	r1, #6
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f8ff 	bl	8001f6e <LoRa_write>
	HAL_Delay(5);
 8001d70:	2005      	movs	r0, #5
 8001d72:	f000 fdeb 	bl	800294c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	0a1a      	lsrs	r2, r3, #8
 8001d7a:	193b      	adds	r3, r7, r4
 8001d7c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2107      	movs	r1, #7
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 f8f1 	bl	8001f6e <LoRa_write>
	HAL_Delay(5);
 8001d8c:	2005      	movs	r0, #5
 8001d8e:	f000 fddd 	bl	800294c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2108      	movs	r1, #8
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 f8e4 	bl	8001f6e <LoRa_write>
	HAL_Delay(5);
 8001da6:	2005      	movs	r0, #5
 8001da8:	f000 fdd0 	bl	800294c <HAL_Delay>
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b005      	add	sp, #20
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	412e8480 	.word	0x412e8480
 8001db8:	404e8480 	.word	0x404e8480

08001dbc <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b0c      	cmp	r3, #12
 8001dca:	dd01      	ble.n	8001dd0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001dcc:	230c      	movs	r3, #12
 8001dce:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	dc01      	bgt.n	8001dda <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001dda:	250f      	movs	r5, #15
 8001ddc:	197c      	adds	r4, r7, r5
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	211e      	movs	r1, #30
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f8a5 	bl	8001f32 <LoRa_read>
 8001de8:	0003      	movs	r3, r0
 8001dea:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8001dec:	200a      	movs	r0, #10
 8001dee:	f000 fdad 	bl	800294c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	b2d9      	uxtb	r1, r3
 8001dfa:	197b      	adds	r3, r7, r5
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	220f      	movs	r2, #15
 8001e00:	4013      	ands	r3, r2
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	200e      	movs	r0, #14
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	188a      	adds	r2, r1, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	211e      	movs	r1, #30
 8001e14:	0018      	movs	r0, r3
 8001e16:	f000 f8aa 	bl	8001f6e <LoRa_write>
	HAL_Delay(10);
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f000 fd96 	bl	800294c <HAL_Delay>
}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b004      	add	sp, #16
 8001e26:	bdb0      	pop	{r4, r5, r7, pc}

08001e28 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	000a      	movs	r2, r1
 8001e32:	1cfb      	adds	r3, r7, #3
 8001e34:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001e36:	1cfb      	adds	r3, r7, #3
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2109      	movs	r1, #9
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f895 	bl	8001f6e <LoRa_write>
	HAL_Delay(10);
 8001e44:	200a      	movs	r0, #10
 8001e46:	f000 fd81 	bl	800294c <HAL_Delay>
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	000a      	movs	r2, r1
 8001e5c:	1cfb      	adds	r3, r7, #3
 8001e5e:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
	// bits 7-6 unused
	// bit 5 OcpOn: Enables over current protection for PA (0 disabled, 1 enabled)
	// bits 4-0 OcpTrim: Trimming of OCP:
											// datasheet sayfa 95

	if (current < 45)
 8001e68:	1cfb      	adds	r3, r7, #3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e6e:	d802      	bhi.n	8001e76 <LoRa_setOCP+0x24>
		current = 45;
 8001e70:	1cfb      	adds	r3, r7, #3
 8001e72:	222d      	movs	r2, #45	; 0x2d
 8001e74:	701a      	strb	r2, [r3, #0]

	if (current > 240)
 8001e76:	1cfb      	adds	r3, r7, #3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8001e7c:	d902      	bls.n	8001e84 <LoRa_setOCP+0x32>
	{
		current = 240;
 8001e7e:	1cfb      	adds	r3, r7, #3
 8001e80:	22f0      	movs	r2, #240	; 0xf0
 8001e82:	701a      	strb	r2, [r3, #0]
	}

	if (current <= 120)
 8001e84:	1cfb      	adds	r3, r7, #3
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b78      	cmp	r3, #120	; 0x78
 8001e8a:	d80c      	bhi.n	8001ea6 <LoRa_setOCP+0x54>
		OcpTrim = (current - 45) / 5;
 8001e8c:	1cfb      	adds	r3, r7, #3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3b2d      	subs	r3, #45	; 0x2d
 8001e92:	2105      	movs	r1, #5
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe f9bd 	bl	8000214 <__divsi3>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	230f      	movs	r3, #15
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e00f      	b.n	8001ec6 <LoRa_setOCP+0x74>

	else if (current <= 240)
 8001ea6:	1cfb      	adds	r3, r7, #3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2bf0      	cmp	r3, #240	; 0xf0
 8001eac:	d80b      	bhi.n	8001ec6 <LoRa_setOCP+0x74>
		OcpTrim = (current + 30) / 10;
 8001eae:	1cfb      	adds	r3, r7, #3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	331e      	adds	r3, #30
 8001eb4:	210a      	movs	r1, #10
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7fe f9ac 	bl	8000214 <__divsi3>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	187a      	adds	r2, r7, r1
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	3220      	adds	r2, #32
 8001ed0:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	210b      	movs	r1, #11
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 f847 	bl	8001f6e <LoRa_write>
	//LoRa_write(_LoRa, RegOcp, 0x0B);

	HAL_Delay(10);
 8001ee0:	200a      	movs	r0, #10
 8001ee2:	f000 fd33 	bl	800294c <HAL_Delay>
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b004      	add	sp, #16
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001eee:	b5b0      	push	{r4, r5, r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001ef6:	250f      	movs	r5, #15
 8001ef8:	197c      	adds	r4, r7, r5
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	211e      	movs	r1, #30
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f817 	bl	8001f32 <LoRa_read>
 8001f04:	0003      	movs	r3, r0
 8001f06:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 8001f08:	200e      	movs	r0, #14
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	197a      	adds	r2, r7, r5
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	2107      	movs	r1, #7
 8001f12:	430a      	orrs	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	211e      	movs	r1, #30
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 f825 	bl	8001f6e <LoRa_write>
	HAL_Delay(10);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f000 fd11 	bl	800294c <HAL_Delay>
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}

08001f32 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001f32:	b590      	push	{r4, r7, lr}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af02      	add	r7, sp, #8
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	000a      	movs	r2, r1
 8001f3c:	1cfb      	adds	r3, r7, #3
 8001f3e:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001f40:	1cfb      	adds	r3, r7, #3
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	227f      	movs	r2, #127	; 0x7f
 8001f46:	4013      	ands	r3, r2
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	210e      	movs	r1, #14
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001f50:	240f      	movs	r4, #15
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	1879      	adds	r1, r7, r1
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f7ff fe58 	bl	8001c12 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	781b      	ldrb	r3, [r3, #0]
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b005      	add	sp, #20
 8001f6c:	bd90      	pop	{r4, r7, pc}

08001f6e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af02      	add	r7, sp, #8
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	0008      	movs	r0, r1
 8001f78:	0011      	movs	r1, r2
 8001f7a:	1cfb      	adds	r3, r7, #3
 8001f7c:	1c02      	adds	r2, r0, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	1cbb      	adds	r3, r7, #2
 8001f82:	1c0a      	adds	r2, r1, #0
 8001f84:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001f86:	1cfb      	adds	r3, r7, #3
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	4252      	negs	r2, r2
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	210e      	movs	r1, #14
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	701a      	strb	r2, [r3, #0]
	data = value;
 8001f98:	200f      	movs	r0, #15
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	1cba      	adds	r2, r7, #2
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001fa2:	183b      	adds	r3, r7, r0
 8001fa4:	1879      	adds	r1, r7, r1
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	9200      	str	r2, [sp, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f7ff fe73 	bl	8001c98 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b004      	add	sp, #16
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]

	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2105      	movs	r1, #5
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fd9e 	bl	8001b1a <LoRa_gotoMode>
}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe8:	b089      	sub	sp, #36	; 0x24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001ff4:	231f      	movs	r3, #31
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	e007      	b.n	8002012 <LoRa_receive+0x2c>
		data[i]=0;
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	18d3      	adds	r3, r2, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	3301      	adds	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbf2      	blt.n	8002002 <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2101      	movs	r1, #1
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff fd7a 	bl	8001b1a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8002026:	2513      	movs	r5, #19
 8002028:	197c      	adds	r4, r7, r5
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2112      	movs	r1, #18
 800202e:	0018      	movs	r0, r3
 8002030:	f7ff ff7f 	bl	8001f32 <LoRa_read>
 8002034:	0003      	movs	r3, r0
 8002036:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 8002038:	197b      	adds	r3, r7, r5
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2240      	movs	r2, #64	; 0x40
 800203e:	4013      	ands	r3, r2
 8002040:	d03f      	beq.n	80020c2 <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	2112      	movs	r1, #18
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff ff90 	bl	8001f6e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800204e:	2612      	movs	r6, #18
 8002050:	19bc      	adds	r4, r7, r6
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2113      	movs	r1, #19
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff ff6b 	bl	8001f32 <LoRa_read>
 800205c:	0003      	movs	r3, r0
 800205e:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8002060:	197c      	adds	r4, r7, r5
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2110      	movs	r1, #16
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ff63 	bl	8001f32 <LoRa_read>
 800206c:	0003      	movs	r3, r0
 800206e:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8002070:	197b      	adds	r3, r7, r5
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	210d      	movs	r1, #13
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff ff78 	bl	8001f6e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800207e:	231f      	movs	r3, #31
 8002080:	18fa      	adds	r2, r7, r3
 8002082:	19bb      	adds	r3, r7, r6
 8002084:	1df9      	adds	r1, r7, #7
 8002086:	780c      	ldrb	r4, [r1, #0]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	b2e1      	uxtb	r1, r4
 800208e:	4288      	cmp	r0, r1
 8002090:	d900      	bls.n	8002094 <LoRa_receive+0xae>
 8002092:	1c23      	adds	r3, r4, #0
 8002094:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e00c      	b.n	80020b6 <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	18d4      	adds	r4, r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2100      	movs	r1, #0
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff ff43 	bl	8001f32 <LoRa_read>
 80020ac:	0003      	movs	r3, r0
 80020ae:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	231f      	movs	r3, #31
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbec      	blt.n	800209c <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2105      	movs	r1, #5
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff fd27 	bl	8001b1a <LoRa_gotoMode>
    return min;
 80020cc:	231f      	movs	r3, #31
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781b      	ldrb	r3, [r3, #0]
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b009      	add	sp, #36	; 0x24
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020da <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80020da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff ff68 	bl	8001fba <LoRa_isvalid>
 80020ea:	1e03      	subs	r3, r0, #0
 80020ec:	d100      	bne.n	80020f0 <LoRa_init+0x16>
 80020ee:	e0b7      	b.n	8002260 <LoRa_init+0x186>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2100      	movs	r1, #0
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff fd10 	bl	8001b1a <LoRa_gotoMode>
			HAL_Delay(10);
 80020fa:	200a      	movs	r0, #10
 80020fc:	f000 fc26 	bl	800294c <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002100:	260f      	movs	r6, #15
 8002102:	19bc      	adds	r4, r7, r6
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2101      	movs	r1, #1
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff ff12 	bl	8001f32 <LoRa_read>
 800210e:	0003      	movs	r3, r0
 8002110:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8002112:	200a      	movs	r0, #10
 8002114:	f000 fc1a 	bl	800294c <HAL_Delay>
			data = read | 0x80;
 8002118:	250e      	movs	r5, #14
 800211a:	197b      	adds	r3, r7, r5
 800211c:	0034      	movs	r4, r6
 800211e:	193a      	adds	r2, r7, r4
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	4249      	negs	r1, r1
 8002126:	430a      	orrs	r2, r1
 8002128:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 800212a:	197b      	adds	r3, r7, r5
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2101      	movs	r1, #1
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff ff1b 	bl	8001f6e <LoRa_write>
			HAL_Delay(100);
 8002138:	2064      	movs	r0, #100	; 0x64
 800213a:	f000 fc07 	bl	800294c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	0018      	movs	r0, r3
 8002144:	f7fe f970 	bl	8000428 <__aeabi_i2f>
 8002148:	1c02      	adds	r2, r0, #0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1c11      	adds	r1, r2, #0
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff fde6 	bl	8001d20 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	5c9a      	ldrb	r2, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0011      	movs	r1, r2
 800215e:	0018      	movs	r0, r3
 8002160:	f7ff fe62 	bl	8001e28 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2233      	movs	r2, #51	; 0x33
 8002168:	5c9a      	ldrb	r2, [r3, r2]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0011      	movs	r1, r2
 800216e:	0018      	movs	r0, r3
 8002170:	f7ff fe6f 	bl	8001e52 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2223      	movs	r2, #35	; 0x23
 8002178:	210c      	movs	r1, #12
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff fef7 	bl	8001f6e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	0018      	movs	r0, r3
 8002184:	f7ff feb3 	bl	8001eee <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	222c      	movs	r2, #44	; 0x2c
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	001a      	movs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0011      	movs	r1, r2
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff fe11 	bl	8001dbc <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	22ff      	movs	r2, #255	; 0xff
 800219e:	211f      	movs	r1, #31
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fee4 	bl	8001f6e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80021a6:	197b      	adds	r3, r7, r5
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	222d      	movs	r2, #45	; 0x2d
 80021b0:	5c9b      	ldrb	r3, [r3, r2]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	b2d9      	uxtb	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	222e      	movs	r2, #46	; 0x2e
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	18db      	adds	r3, r3, r3
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	197b      	adds	r3, r7, r5
 80021c2:	188a      	adds	r2, r1, r2
 80021c4:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80021c6:	197b      	adds	r3, r7, r5
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	211d      	movs	r1, #29
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7ff fecd 	bl	8001f6e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2120      	movs	r1, #32
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff fec3 	bl	8001f6e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2121      	movs	r1, #33	; 0x21
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff febb 	bl	8001f6e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80021f8:	0026      	movs	r6, r4
 80021fa:	193c      	adds	r4, r7, r4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff fe96 	bl	8001f32 <LoRa_read>
 8002206:	0003      	movs	r3, r0
 8002208:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 800220a:	197b      	adds	r3, r7, r5
 800220c:	0034      	movs	r4, r6
 800220e:	193a      	adds	r2, r7, r4
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	213f      	movs	r1, #63	; 0x3f
 8002214:	430a      	orrs	r2, r1
 8002216:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002218:	197b      	adds	r3, r7, r5
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff fea4 	bl	8001f6e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2101      	movs	r1, #1
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff fc75 	bl	8001b1a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	621a      	str	r2, [r3, #32]
			HAL_Delay(10);
 8002236:	200a      	movs	r0, #10
 8002238:	f000 fb88 	bl	800294c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800223c:	0025      	movs	r5, r4
 800223e:	193c      	adds	r4, r7, r4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2142      	movs	r1, #66	; 0x42
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff fe74 	bl	8001f32 <LoRa_read>
 800224a:	0003      	movs	r3, r0
 800224c:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 800224e:	197b      	adds	r3, r7, r5
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b12      	cmp	r3, #18
 8002254:	d101      	bne.n	800225a <LoRa_init+0x180>
				return LORA_OK;
 8002256:	23c8      	movs	r3, #200	; 0xc8
 8002258:	e004      	b.n	8002264 <LoRa_init+0x18a>
			else
				return LORA_NOT_FOUND;
 800225a:	23ca      	movs	r3, #202	; 0xca
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	e001      	b.n	8002264 <LoRa_init+0x18a>
	}
	else {
		return LORA_UNAVAILABLE;
 8002260:	23f8      	movs	r3, #248	; 0xf8
 8002262:	33ff      	adds	r3, #255	; 0xff
	}
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b005      	add	sp, #20
 800226a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800226c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b08f      	sub	sp, #60	; 0x3c
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002272:	f000 fae5 	bl	8002840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002276:	f000 f881 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227a:	f000 f945 	bl	8002508 <MX_GPIO_Init>
  MX_I2C2_Init();
 800227e:	f000 f8c5 	bl	800240c <MX_I2C2_Init>
  MX_SPI1_Init();
 8002282:	f000 f903 	bl	800248c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  receiver = newLoRa();
 8002286:	4c38      	ldr	r4, [pc, #224]	; (8002368 <main+0xfc>)
 8002288:	003b      	movs	r3, r7
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fbf4 	bl	8001a78 <newLoRa>
 8002290:	003b      	movs	r3, r7
 8002292:	0020      	movs	r0, r4
 8002294:	0019      	movs	r1, r3
 8002296:	2334      	movs	r3, #52	; 0x34
 8002298:	001a      	movs	r2, r3
 800229a:	f002 faeb 	bl	8004874 <memcpy>

  receiver.hSPIx = &hspi1;
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <main+0xfc>)
 80022a0:	4a32      	ldr	r2, [pc, #200]	; (800236c <main+0x100>)
 80022a2:	619a      	str	r2, [r3, #24]
  receiver.CS_port = GPIOA;
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <main+0xfc>)
 80022a6:	22a0      	movs	r2, #160	; 0xa0
 80022a8:	05d2      	lsls	r2, r2, #23
 80022aa:	601a      	str	r2, [r3, #0]
  receiver.CS_pin = 4;
 80022ac:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <main+0xfc>)
 80022ae:	2204      	movs	r2, #4
 80022b0:	809a      	strh	r2, [r3, #4]
  receiver.reset_port = GPIOA;
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <main+0xfc>)
 80022b4:	22a0      	movs	r2, #160	; 0xa0
 80022b6:	05d2      	lsls	r2, r2, #23
 80022b8:	609a      	str	r2, [r3, #8]
  receiver.reset_pin = 5;
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <main+0xfc>)
 80022bc:	2205      	movs	r2, #5
 80022be:	819a      	strh	r2, [r3, #12]
  receiver.DIO0_port = DIO1_GPIO_Port;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <main+0xfc>)
 80022c2:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <main+0x104>)
 80022c4:	611a      	str	r2, [r3, #16]
  receiver.DIO0_port = 15;
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <main+0xfc>)
 80022c8:	220f      	movs	r2, #15
 80022ca:	611a      	str	r2, [r3, #16]

  receiver.frequency = 434.0;
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <main+0xfc>)
 80022ce:	22d9      	movs	r2, #217	; 0xd9
 80022d0:	0052      	lsls	r2, r2, #1
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
  receiver.spredingFactor = SF_7;
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <main+0xfc>)
 80022d6:	222c      	movs	r2, #44	; 0x2c
 80022d8:	2107      	movs	r1, #7
 80022da:	5499      	strb	r1, [r3, r2]
  receiver.bandWidth = BW_125KHz;
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <main+0xfc>)
 80022de:	222d      	movs	r2, #45	; 0x2d
 80022e0:	2107      	movs	r1, #7
 80022e2:	5499      	strb	r1, [r3, r2]
  receiver.power = POWER_11db;
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <main+0xfc>)
 80022e6:	2232      	movs	r2, #50	; 0x32
 80022e8:	21f6      	movs	r1, #246	; 0xf6
 80022ea:	5499      	strb	r1, [r3, r2]
  receiver.crcRate = CR_4_5;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <main+0xfc>)
 80022ee:	222e      	movs	r2, #46	; 0x2e
 80022f0:	2101      	movs	r1, #1
 80022f2:	5499      	strb	r1, [r3, r2]
  receiver.overCurrentProtection = 100;
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <main+0xfc>)
 80022f6:	2233      	movs	r2, #51	; 0x33
 80022f8:	2164      	movs	r1, #100	; 0x64
 80022fa:	5499      	strb	r1, [r3, r2]
  receiver.preamble = 8;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <main+0xfc>)
 80022fe:	2208      	movs	r2, #8
 8002300:	861a      	strh	r2, [r3, #48]	; 0x30

  LoRa_reset(&receiver);
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <main+0xfc>)
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff fbe7 	bl	8001ad8 <LoRa_reset>
  LoRa_init(&receiver);
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <main+0xfc>)
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff fee4 	bl	80020da <LoRa_init>

  LoRa_startReceiving(&receiver);
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <main+0xfc>)
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff fe59 	bl	8001fcc <LoRa_startReceiving>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LoRa_receive(&receiver, r_buffer, sizeof(r_buffer));
 800231a:	4916      	ldr	r1, [pc, #88]	; (8002374 <main+0x108>)
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <main+0xfc>)
 800231e:	2203      	movs	r2, #3
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff fe60 	bl	8001fe6 <LoRa_receive>
    HAL_GPIO_WritePin(RLY_IN1_GPIO_Port, RLY_IN1_Pin, r_buffer[1]);
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <main+0x108>)
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	b25b      	sxtb	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4812      	ldr	r0, [pc, #72]	; (8002378 <main+0x10c>)
 8002330:	001a      	movs	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	f000 fd46 	bl	8002dc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RLY_IN2_GPIO_Port, RLY_IN2_Pin, r_buffer[0]);
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <main+0x108>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b25b      	sxtb	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <main+0x10c>)
 8002342:	001a      	movs	r2, r3
 8002344:	2108      	movs	r1, #8
 8002346:	f000 fd3d 	bl	8002dc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RLY_IN3_GPIO_Port, RLY_IN3_Pin, r_buffer[2]);
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <main+0x108>)
 800234c:	789b      	ldrb	r3, [r3, #2]
 800234e:	b25b      	sxtb	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4809      	ldr	r0, [pc, #36]	; (8002378 <main+0x10c>)
 8002354:	001a      	movs	r2, r3
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	f000 fd34 	bl	8002dc4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800235c:	23fa      	movs	r3, #250	; 0xfa
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	0018      	movs	r0, r3
 8002362:	f000 faf3 	bl	800294c <HAL_Delay>
    LoRa_receive(&receiver, r_buffer, sizeof(r_buffer));
 8002366:	e7d8      	b.n	800231a <main+0xae>
 8002368:	20000028 	.word	0x20000028
 800236c:	200000ac 	.word	0x200000ac
 8002370:	50000800 	.word	0x50000800
 8002374:	2000005c 	.word	0x2000005c
 8002378:	50000400 	.word	0x50000400

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b093      	sub	sp, #76	; 0x4c
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	2414      	movs	r4, #20
 8002384:	193b      	adds	r3, r7, r4
 8002386:	0018      	movs	r0, r3
 8002388:	2334      	movs	r3, #52	; 0x34
 800238a:	001a      	movs	r2, r3
 800238c:	2100      	movs	r1, #0
 800238e:	f002 fa7a 	bl	8004886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	0018      	movs	r0, r3
 8002396:	2310      	movs	r3, #16
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f002 fa73 	bl	8004886 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fe59 	bl	800305c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023aa:	193b      	adds	r3, r7, r4
 80023ac:	2202      	movs	r2, #2
 80023ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0052      	lsls	r2, r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80023b8:	193b      	adds	r3, r7, r4
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023be:	193b      	adds	r3, r7, r4
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023c4:	193b      	adds	r3, r7, r4
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 fe85 	bl	80030dc <HAL_RCC_OscConfig>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023d6:	f000 f92d 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2200      	movs	r2, #0
 80023e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2100      	movs	r1, #0
 80023f6:	0018      	movs	r0, r3
 80023f8:	f001 f980 	bl	80036fc <HAL_RCC_ClockConfig>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002400:	f000 f918 	bl	8002634 <Error_Handler>
  }
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b013      	add	sp, #76	; 0x4c
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_I2C2_Init+0x74>)
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <MX_I2C2_Init+0x78>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_I2C2_Init+0x74>)
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <MX_I2C2_Init+0x7c>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_I2C2_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_I2C2_Init+0x74>)
 8002424:	2201      	movs	r2, #1
 8002426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_I2C2_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_I2C2_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_I2C2_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_I2C2_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_I2C2_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_I2C2_Init+0x74>)
 8002448:	0018      	movs	r0, r3
 800244a:	f000 fcd9 	bl	8002e00 <HAL_I2C_Init>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002452:	f000 f8ef 	bl	8002634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_I2C2_Init+0x74>)
 8002458:	2100      	movs	r1, #0
 800245a:	0018      	movs	r0, r3
 800245c:	f000 fd66 	bl	8002f2c <HAL_I2CEx_ConfigAnalogFilter>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002464:	f000 f8e6 	bl	8002634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <MX_I2C2_Init+0x74>)
 800246a:	2100      	movs	r1, #0
 800246c:	0018      	movs	r0, r3
 800246e:	f000 fda9 	bl	8002fc4 <HAL_I2CEx_ConfigDigitalFilter>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002476:	f000 f8dd 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000060 	.word	0x20000060
 8002484:	40005800 	.word	0x40005800
 8002488:	00303d5b 	.word	0x00303d5b

0800248c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <MX_SPI1_Init+0x74>)
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <MX_SPI1_Init+0x78>)
 8002494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <MX_SPI1_Init+0x74>)
 8002498:	2282      	movs	r2, #130	; 0x82
 800249a:	0052      	lsls	r2, r2, #1
 800249c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <MX_SPI1_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_SPI1_Init+0x74>)
 80024a6:	22e0      	movs	r2, #224	; 0xe0
 80024a8:	00d2      	lsls	r2, r2, #3
 80024aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <MX_SPI1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_SPI1_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_SPI1_Init+0x74>)
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	02d2      	lsls	r2, r2, #11
 80024be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <MX_SPI1_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_SPI1_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_SPI1_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_SPI1_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_SPI1_Init+0x74>)
 80024da:	2207      	movs	r2, #7
 80024dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_SPI1_Init+0x74>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_SPI1_Init+0x74>)
 80024e6:	2208      	movs	r2, #8
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <MX_SPI1_Init+0x74>)
 80024ec:	0018      	movs	r0, r3
 80024ee:	f001 fa8f 	bl	8003a10 <HAL_SPI_Init>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d001      	beq.n	80024fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024f6:	f000 f89d 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200000ac 	.word	0x200000ac
 8002504:	40013000 	.word	0x40013000

08002508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250e:	240c      	movs	r4, #12
 8002510:	193b      	adds	r3, r7, r4
 8002512:	0018      	movs	r0, r3
 8002514:	2314      	movs	r3, #20
 8002516:	001a      	movs	r2, r3
 8002518:	2100      	movs	r1, #0
 800251a:	f002 f9b4 	bl	8004886 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	4b42      	ldr	r3, [pc, #264]	; (8002628 <MX_GPIO_Init+0x120>)
 8002520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <MX_GPIO_Init+0x120>)
 8002524:	2102      	movs	r1, #2
 8002526:	430a      	orrs	r2, r1
 8002528:	635a      	str	r2, [r3, #52]	; 0x34
 800252a:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <MX_GPIO_Init+0x120>)
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <MX_GPIO_Init+0x120>)
 8002538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <MX_GPIO_Init+0x120>)
 800253c:	2104      	movs	r1, #4
 800253e:	430a      	orrs	r2, r1
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <MX_GPIO_Init+0x120>)
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	2204      	movs	r2, #4
 8002548:	4013      	ands	r3, r2
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <MX_GPIO_Init+0x120>)
 8002550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002552:	4b35      	ldr	r3, [pc, #212]	; (8002628 <MX_GPIO_Init+0x120>)
 8002554:	2101      	movs	r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <MX_GPIO_Init+0x120>)
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2201      	movs	r2, #1
 8002560:	4013      	ands	r3, r2
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RLY_IN3_Pin|RLY_IN2_Pin, GPIO_PIN_RESET);
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <MX_GPIO_Init+0x124>)
 8002568:	2200      	movs	r2, #0
 800256a:	2188      	movs	r1, #136	; 0x88
 800256c:	0018      	movs	r0, r3
 800256e:	f000 fc29 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	482e      	ldr	r0, [pc, #184]	; (8002630 <MX_GPIO_Init+0x128>)
 8002578:	2200      	movs	r2, #0
 800257a:	0019      	movs	r1, r3
 800257c:	f000 fc22 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_RST_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002580:	23a0      	movs	r3, #160	; 0xa0
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	2200      	movs	r2, #0
 8002586:	21a0      	movs	r1, #160	; 0xa0
 8002588:	0018      	movs	r0, r3
 800258a:	f000 fc1b 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RLY_IN3_Pin RLY_IN2_Pin */
  GPIO_InitStruct.Pin = RLY_IN3_Pin|RLY_IN2_Pin;
 800258e:	193b      	adds	r3, r7, r4
 8002590:	2288      	movs	r2, #136	; 0x88
 8002592:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	193b      	adds	r3, r7, r4
 8002596:	2201      	movs	r2, #1
 8002598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	2200      	movs	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <MX_GPIO_Init+0x124>)
 80025aa:	0019      	movs	r1, r3
 80025ac:	0010      	movs	r0, r2
 80025ae:	f000 faa5 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 80025b2:	0021      	movs	r1, r4
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	0212      	lsls	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	000c      	movs	r4, r1
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	2201      	movs	r2, #1
 80025c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <MX_GPIO_Init+0x128>)
 80025d4:	0019      	movs	r1, r3
 80025d6:	0010      	movs	r0, r2
 80025d8:	f000 fa90 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_RST_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LoRa_RST_Pin|BUZZER_Pin;
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	22a0      	movs	r2, #160	; 0xa0
 80025e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	2201      	movs	r2, #1
 80025e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	193b      	adds	r3, r7, r4
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	193a      	adds	r2, r7, r4
 80025f6:	23a0      	movs	r3, #160	; 0xa0
 80025f8:	05db      	lsls	r3, r3, #23
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fa7d 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : RLY_IN1_Pin */
  GPIO_InitStruct.Pin = RLY_IN1_Pin;
 8002602:	193b      	adds	r3, r7, r4
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002608:	193b      	adds	r3, r7, r4
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	193b      	adds	r3, r7, r4
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RLY_IN1_GPIO_Port, &GPIO_InitStruct);
 8002614:	193b      	adds	r3, r7, r4
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <MX_GPIO_Init+0x124>)
 8002618:	0019      	movs	r1, r3
 800261a:	0010      	movs	r0, r2
 800261c:	f000 fa6e 	bl	8002afc <HAL_GPIO_Init>

}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b009      	add	sp, #36	; 0x24
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	50000400 	.word	0x50000400
 8002630:	50000800 	.word	0x50000800

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_MspInit+0x44>)
 8002648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_MspInit+0x44>)
 800264c:	2101      	movs	r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_MspInit+0x44>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_MspInit+0x44>)
 8002660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_MspInit+0x44>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0549      	lsls	r1, r1, #21
 8002668:	430a      	orrs	r2, r1
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_MspInit+0x44>)
 800266e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	055b      	lsls	r3, r3, #21
 8002674:	4013      	ands	r3, r2
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	2414      	movs	r4, #20
 8002692:	193b      	adds	r3, r7, r4
 8002694:	0018      	movs	r0, r3
 8002696:	2314      	movs	r3, #20
 8002698:	001a      	movs	r2, r3
 800269a:	2100      	movs	r1, #0
 800269c:	f002 f8f3 	bl	8004886 <memset>
  if(hi2c->Instance==I2C2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_I2C_MspInit+0x90>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d131      	bne.n	800270e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <HAL_I2C_MspInit+0x94>)
 80026ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_I2C_MspInit+0x94>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_I2C_MspInit+0x94>)
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	2201      	movs	r2, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	22c0      	movs	r2, #192	; 0xc0
 80026c6:	0152      	lsls	r2, r2, #5
 80026c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ca:	0021      	movs	r1, r4
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	2212      	movs	r2, #18
 80026d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	2206      	movs	r2, #6
 80026e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	187a      	adds	r2, r7, r1
 80026e6:	23a0      	movs	r3, #160	; 0xa0
 80026e8:	05db      	lsls	r3, r3, #23
 80026ea:	0011      	movs	r1, r2
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fa05 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_I2C_MspInit+0x94>)
 80026f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_I2C_MspInit+0x94>)
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	03c9      	lsls	r1, r1, #15
 80026fc:	430a      	orrs	r2, r1
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_I2C_MspInit+0x94>)
 8002702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	03db      	lsls	r3, r3, #15
 8002708:	4013      	ands	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b00b      	add	sp, #44	; 0x2c
 8002714:	bd90      	pop	{r4, r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	40005800 	.word	0x40005800
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b08b      	sub	sp, #44	; 0x2c
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	2414      	movs	r4, #20
 800272a:	193b      	adds	r3, r7, r4
 800272c:	0018      	movs	r0, r3
 800272e:	2314      	movs	r3, #20
 8002730:	001a      	movs	r2, r3
 8002732:	2100      	movs	r1, #0
 8002734:	f002 f8a7 	bl	8004886 <memset>
  if(hspi->Instance==SPI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <HAL_SPI_MspInit+0x8c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d130      	bne.n	80027a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_SPI_MspInit+0x90>)
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_SPI_MspInit+0x90>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0149      	lsls	r1, r1, #5
 800274c:	430a      	orrs	r2, r1
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_SPI_MspInit+0x90>)
 8002752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_SPI_MspInit+0x90>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_SPI_MspInit+0x90>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_SPI_MspInit+0x90>)
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	2201      	movs	r2, #1
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8002776:	0021      	movs	r1, r4
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2256      	movs	r2, #86	; 0x56
 800277c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	187b      	adds	r3, r7, r1
 8002780:	2202      	movs	r2, #2
 8002782:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	187b      	adds	r3, r7, r1
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	187b      	adds	r3, r7, r1
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	187a      	adds	r2, r7, r1
 8002798:	23a0      	movs	r3, #160	; 0xa0
 800279a:	05db      	lsls	r3, r3, #23
 800279c:	0011      	movs	r1, r2
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f9ac 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b00b      	add	sp, #44	; 0x2c
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	40013000 	.word	0x40013000
 80027b0:	40021000 	.word	0x40021000

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <NMI_Handler+0x4>

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d8:	f000 f89c 	bl	8002914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027ec:	480d      	ldr	r0, [pc, #52]	; (8002824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027f0:	f7ff fff7 	bl	80027e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f4:	480c      	ldr	r0, [pc, #48]	; (8002828 <LoopForever+0x6>)
  ldr r1, =_edata
 80027f6:	490d      	ldr	r1, [pc, #52]	; (800282c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <LoopForever+0xe>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027fc:	e002      	b.n	8002804 <LoopCopyDataInit>

080027fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002802:	3304      	adds	r3, #4

08002804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002808:	d3f9      	bcc.n	80027fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800280c:	4c0a      	ldr	r4, [pc, #40]	; (8002838 <LoopForever+0x16>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002810:	e001      	b.n	8002816 <LoopFillZerobss>

08002812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002814:	3204      	adds	r2, #4

08002816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002818:	d3fb      	bcc.n	8002812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800281a:	f002 f807 	bl	800482c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800281e:	f7ff fd25 	bl	800226c <main>

08002822 <LoopForever>:

LoopForever:
  b LoopForever
 8002822:	e7fe      	b.n	8002822 <LoopForever>
  ldr   r0, =_estack
 8002824:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002830:	08004978 	.word	0x08004978
  ldr r2, =_sbss
 8002834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002838:	20000114 	.word	0x20000114

0800283c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC1_IRQHandler>
	...

08002840 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_Init+0x3c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_Init+0x3c>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0049      	lsls	r1, r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800285a:	2003      	movs	r0, #3
 800285c:	f000 f810 	bl	8002880 <HAL_InitTick>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d003      	beq.n	800286c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002864:	1dfb      	adds	r3, r7, #7
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e001      	b.n	8002870 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800286c:	f7ff fee8 	bl	8002640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40022000 	.word	0x40022000

08002880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002888:	230f      	movs	r3, #15
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_InitTick+0x88>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d02b      	beq.n	80028f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_InitTick+0x8c>)
 800289a:	681c      	ldr	r4, [r3, #0]
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_InitTick+0x88>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	0019      	movs	r1, r3
 80028a2:	23fa      	movs	r3, #250	; 0xfa
 80028a4:	0098      	lsls	r0, r3, #2
 80028a6:	f7fd fc2b 	bl	8000100 <__udivsi3>
 80028aa:	0003      	movs	r3, r0
 80028ac:	0019      	movs	r1, r3
 80028ae:	0020      	movs	r0, r4
 80028b0:	f7fd fc26 	bl	8000100 <__udivsi3>
 80028b4:	0003      	movs	r3, r0
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f913 	bl	8002ae2 <HAL_SYSTICK_Config>
 80028bc:	1e03      	subs	r3, r0, #0
 80028be:	d112      	bne.n	80028e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d80a      	bhi.n	80028dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	2301      	movs	r3, #1
 80028ca:	425b      	negs	r3, r3
 80028cc:	2200      	movs	r2, #0
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 f8f2 	bl	8002ab8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_InitTick+0x90>)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e00d      	b.n	80028f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80028dc:	230f      	movs	r3, #15
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e008      	b.n	80028f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028e6:	230f      	movs	r3, #15
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e003      	b.n	80028f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028f0:	230f      	movs	r3, #15
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80028f8:	230f      	movs	r3, #15
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b005      	add	sp, #20
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000008 	.word	0x20000008
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_IncTick+0x1c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	001a      	movs	r2, r3
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_IncTick+0x20>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	18d2      	adds	r2, r2, r3
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_IncTick+0x20>)
 8002926:	601a      	str	r2, [r3, #0]
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	20000008 	.word	0x20000008
 8002934:	20000110 	.word	0x20000110

08002938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  return uwTick;
 800293c:	4b02      	ldr	r3, [pc, #8]	; (8002948 <HAL_GetTick+0x10>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	20000110 	.word	0x20000110

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fff0 	bl	8002938 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3301      	adds	r3, #1
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	001a      	movs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	189b      	adds	r3, r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	f7ff ffe0 	bl	8002938 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	20000008 	.word	0x20000008

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	0002      	movs	r2, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b7f      	cmp	r3, #127	; 0x7f
 80029a8:	d828      	bhi.n	80029fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029aa:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <__NVIC_SetPriority+0xd4>)
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	33c0      	adds	r3, #192	; 0xc0
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	589b      	ldr	r3, [r3, r2]
 80029ba:	1dfa      	adds	r2, r7, #7
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	0011      	movs	r1, r2
 80029c0:	2203      	movs	r2, #3
 80029c2:	400a      	ands	r2, r1
 80029c4:	00d2      	lsls	r2, r2, #3
 80029c6:	21ff      	movs	r1, #255	; 0xff
 80029c8:	4091      	lsls	r1, r2
 80029ca:	000a      	movs	r2, r1
 80029cc:	43d2      	mvns	r2, r2
 80029ce:	401a      	ands	r2, r3
 80029d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	401a      	ands	r2, r3
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	0018      	movs	r0, r3
 80029e0:	2303      	movs	r3, #3
 80029e2:	4003      	ands	r3, r0
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e8:	481f      	ldr	r0, [pc, #124]	; (8002a68 <__NVIC_SetPriority+0xd4>)
 80029ea:	1dfb      	adds	r3, r7, #7
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	430a      	orrs	r2, r1
 80029f4:	33c0      	adds	r3, #192	; 0xc0
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029fa:	e031      	b.n	8002a60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <__NVIC_SetPriority+0xd8>)
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	0019      	movs	r1, r3
 8002a04:	230f      	movs	r3, #15
 8002a06:	400b      	ands	r3, r1
 8002a08:	3b08      	subs	r3, #8
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3306      	adds	r3, #6
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	18d3      	adds	r3, r2, r3
 8002a12:	3304      	adds	r3, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1dfa      	adds	r2, r7, #7
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	400a      	ands	r2, r1
 8002a20:	00d2      	lsls	r2, r2, #3
 8002a22:	21ff      	movs	r1, #255	; 0xff
 8002a24:	4091      	lsls	r1, r2
 8002a26:	000a      	movs	r2, r1
 8002a28:	43d2      	mvns	r2, r2
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	019b      	lsls	r3, r3, #6
 8002a32:	22ff      	movs	r2, #255	; 0xff
 8002a34:	401a      	ands	r2, r3
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	4003      	ands	r3, r0
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a44:	4809      	ldr	r0, [pc, #36]	; (8002a6c <__NVIC_SetPriority+0xd8>)
 8002a46:	1dfb      	adds	r3, r7, #7
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	001c      	movs	r4, r3
 8002a4c:	230f      	movs	r3, #15
 8002a4e:	4023      	ands	r3, r4
 8002a50:	3b08      	subs	r3, #8
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	430a      	orrs	r2, r1
 8002a56:	3306      	adds	r3, #6
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	18c3      	adds	r3, r0, r3
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b003      	add	sp, #12
 8002a66:	bd90      	pop	{r4, r7, pc}
 8002a68:	e000e100 	.word	0xe000e100
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1e5a      	subs	r2, r3, #1
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	045b      	lsls	r3, r3, #17
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d301      	bcc.n	8002a88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a84:	2301      	movs	r3, #1
 8002a86:	e010      	b.n	8002aaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <SysTick_Config+0x44>)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	3a01      	subs	r2, #1
 8002a8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a90:	2301      	movs	r3, #1
 8002a92:	425b      	negs	r3, r3
 8002a94:	2103      	movs	r1, #3
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff ff7c 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SysTick_Config+0x44>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <SysTick_Config+0x44>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	1c02      	adds	r2, r0, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b004      	add	sp, #16
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff ffbf 	bl	8002a70 <SysTick_Config>
 8002af2:	0003      	movs	r3, r0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0a:	e147      	b.n	8002d9c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4091      	lsls	r1, r2
 8002b16:	000a      	movs	r2, r1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d100      	bne.n	8002b24 <HAL_GPIO_Init+0x28>
 8002b22:	e138      	b.n	8002d96 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d005      	beq.n	8002b3c <HAL_GPIO_Init+0x40>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d130      	bne.n	8002b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	0013      	movs	r3, r2
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b72:	2201      	movs	r2, #1
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	2201      	movs	r2, #1
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	0013      	movs	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d017      	beq.n	8002bda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2203      	movs	r2, #3
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d123      	bne.n	8002c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	58d3      	ldr	r3, [r2, r3]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	0013      	movs	r3, r2
 8002c02:	43da      	mvns	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2107      	movs	r1, #7
 8002c12:	400b      	ands	r3, r1
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	409a      	lsls	r2, r3
 8002c18:	0013      	movs	r3, r2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	0092      	lsls	r2, r2, #2
 8002c2a:	6939      	ldr	r1, [r7, #16]
 8002c2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	0013      	movs	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	029b      	lsls	r3, r3, #10
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <HAL_GPIO_Init+0x174>
 8002c6e:	e092      	b.n	8002d96 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c70:	4a50      	ldr	r2, [pc, #320]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3318      	adds	r3, #24
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	589b      	ldr	r3, [r3, r2]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	220f      	movs	r2, #15
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	0013      	movs	r3, r2
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	23a0      	movs	r3, #160	; 0xa0
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x1ca>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a45      	ldr	r2, [pc, #276]	; (8002db8 <HAL_GPIO_Init+0x2bc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x1c6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a44      	ldr	r2, [pc, #272]	; (8002dbc <HAL_GPIO_Init+0x2c0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x1c2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a43      	ldr	r2, [pc, #268]	; (8002dc0 <HAL_GPIO_Init+0x2c4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x1be>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x1cc>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x1cc>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x1cc>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x1cc>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	2103      	movs	r1, #3
 8002ccc:	400a      	ands	r2, r1
 8002cce:	00d2      	lsls	r2, r2, #3
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002cd8:	4936      	ldr	r1, [pc, #216]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3318      	adds	r3, #24
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ce6:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	035b      	lsls	r3, r3, #13
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	039b      	lsls	r3, r3, #14
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002d3c:	2384      	movs	r3, #132	; 0x84
 8002d3e:	58d3      	ldr	r3, [r2, r3]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	4013      	ands	r3, r2
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d60:	4914      	ldr	r1, [pc, #80]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002d62:	2284      	movs	r2, #132	; 0x84
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	58d3      	ldr	r3, [r2, r3]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43da      	mvns	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	025b      	lsls	r3, r3, #9
 8002d82:	4013      	ands	r3, r2
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d8e:	4909      	ldr	r1, [pc, #36]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	40da      	lsrs	r2, r3
 8002da4:	1e13      	subs	r3, r2, #0
 8002da6:	d000      	beq.n	8002daa <HAL_GPIO_Init+0x2ae>
 8002da8:	e6b0      	b.n	8002b0c <HAL_GPIO_Init+0x10>
  }
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b006      	add	sp, #24
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021800 	.word	0x40021800
 8002db8:	50000400 	.word	0x50000400
 8002dbc:	50000800 	.word	0x50000800
 8002dc0:	50000c00 	.word	0x50000c00

08002dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	0008      	movs	r0, r1
 8002dce:	0011      	movs	r1, r2
 8002dd0:	1cbb      	adds	r3, r7, #2
 8002dd2:	1c02      	adds	r2, r0, #0
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	1c7b      	adds	r3, r7, #1
 8002dd8:	1c0a      	adds	r2, r1, #0
 8002dda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ddc:	1c7b      	adds	r3, r7, #1
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002de4:	1cbb      	adds	r3, r7, #2
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dee:	1cbb      	adds	r3, r7, #2
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e082      	b.n	8002f18 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2241      	movs	r2, #65	; 0x41
 8002e16:	5c9b      	ldrb	r3, [r3, r2]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d107      	bne.n	8002e2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7ff fc2d 	bl	8002688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2241      	movs	r2, #65	; 0x41
 8002e32:	2124      	movs	r1, #36	; 0x24
 8002e34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2101      	movs	r1, #1
 8002e42:	438a      	bics	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4934      	ldr	r1, [pc, #208]	; (8002f20 <HAL_I2C_Init+0x120>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4931      	ldr	r1, [pc, #196]	; (8002f24 <HAL_I2C_Init+0x124>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d108      	bne.n	8002e7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0209      	lsls	r1, r1, #8
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	e007      	b.n	8002e8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2184      	movs	r1, #132	; 0x84
 8002e88:	0209      	lsls	r1, r1, #8
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d104      	bne.n	8002ea0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	491f      	ldr	r1, [pc, #124]	; (8002f28 <HAL_I2C_Init+0x128>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	491a      	ldr	r1, [pc, #104]	; (8002f24 <HAL_I2C_Init+0x124>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69d9      	ldr	r1, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2241      	movs	r2, #65	; 0x41
 8002f04:	2120      	movs	r1, #32
 8002f06:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2242      	movs	r2, #66	; 0x42
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	f0ffffff 	.word	0xf0ffffff
 8002f24:	ffff7fff 	.word	0xffff7fff
 8002f28:	02008000 	.word	0x02008000

08002f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2241      	movs	r2, #65	; 0x41
 8002f3a:	5c9b      	ldrb	r3, [r3, r2]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d138      	bne.n	8002fb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2240      	movs	r2, #64	; 0x40
 8002f46:	5c9b      	ldrb	r3, [r3, r2]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e032      	b.n	8002fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2241      	movs	r2, #65	; 0x41
 8002f5c:	2124      	movs	r1, #36	; 0x24
 8002f5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4911      	ldr	r1, [pc, #68]	; (8002fc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2241      	movs	r2, #65	; 0x41
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	2100      	movs	r1, #0
 8002fae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	ffffefff 	.word	0xffffefff

08002fc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2241      	movs	r2, #65	; 0x41
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d139      	bne.n	800304e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	5c9b      	ldrb	r3, [r3, r2]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e033      	b.n	8003050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2241      	movs	r2, #65	; 0x41
 8002ff4:	2124      	movs	r1, #36	; 0x24
 8002ff6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2101      	movs	r1, #1
 8003004:	438a      	bics	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2241      	movs	r2, #65	; 0x41
 800303e:	2120      	movs	r1, #32
 8003040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2240      	movs	r2, #64	; 0x40
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b004      	add	sp, #16
 8003056:	bd80      	pop	{r7, pc}
 8003058:	fffff0ff 	.word	0xfffff0ff

0800305c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	430a      	orrs	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	429a      	cmp	r2, r3
 800307e:	d11f      	bne.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	0013      	movs	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	189b      	adds	r3, r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4912      	ldr	r1, [pc, #72]	; (80030d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800308e:	0018      	movs	r0, r3
 8003090:	f7fd f836 	bl	8000100 <__udivsi3>
 8003094:	0003      	movs	r3, r0
 8003096:	3301      	adds	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800309a:	e008      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e001      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e009      	b.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	401a      	ands	r2, r3
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	429a      	cmp	r2, r3
 80030be:	d0ed      	beq.n	800309c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	40007000 	.word	0x40007000
 80030d0:	fffff9ff 	.word	0xfffff9ff
 80030d4:	20000000 	.word	0x20000000
 80030d8:	000f4240 	.word	0x000f4240

080030dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e2f3      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	d100      	bne.n	80030fa <HAL_RCC_OscConfig+0x1e>
 80030f8:	e07c      	b.n	80031f4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fa:	4bc3      	ldr	r3, [pc, #780]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2238      	movs	r2, #56	; 0x38
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003104:	4bc0      	ldr	r3, [pc, #768]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d102      	bne.n	800311a <HAL_RCC_OscConfig+0x3e>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d002      	beq.n	8003120 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d10b      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	4bb9      	ldr	r3, [pc, #740]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	029b      	lsls	r3, r3, #10
 8003128:	4013      	ands	r3, r2
 800312a:	d062      	beq.n	80031f2 <HAL_RCC_OscConfig+0x116>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d15e      	bne.n	80031f2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e2ce      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	025b      	lsls	r3, r3, #9
 8003140:	429a      	cmp	r2, r3
 8003142:	d107      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
 8003144:	4bb0      	ldr	r3, [pc, #704]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4baf      	ldr	r3, [pc, #700]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	0249      	lsls	r1, r1, #9
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e020      	b.n	8003196 <HAL_RCC_OscConfig+0xba>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	23a0      	movs	r3, #160	; 0xa0
 800315a:	02db      	lsls	r3, r3, #11
 800315c:	429a      	cmp	r2, r3
 800315e:	d10e      	bne.n	800317e <HAL_RCC_OscConfig+0xa2>
 8003160:	4ba9      	ldr	r3, [pc, #676]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4ba8      	ldr	r3, [pc, #672]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	02c9      	lsls	r1, r1, #11
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	4ba6      	ldr	r3, [pc, #664]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4ba5      	ldr	r3, [pc, #660]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	0249      	lsls	r1, r1, #9
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0xba>
 800317e:	4ba2      	ldr	r3, [pc, #648]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4ba1      	ldr	r3, [pc, #644]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003184:	49a1      	ldr	r1, [pc, #644]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003186:	400a      	ands	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4b9f      	ldr	r3, [pc, #636]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003190:	499f      	ldr	r1, [pc, #636]	; (8003410 <HAL_RCC_OscConfig+0x334>)
 8003192:	400a      	ands	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7ff fbcb 	bl	8002938 <HAL_GetTick>
 80031a2:	0003      	movs	r3, r0
 80031a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7ff fbc6 	bl	8002938 <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e28d      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	4b93      	ldr	r3, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	4013      	ands	r3, r2
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 80031c6:	e015      	b.n	80031f4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7ff fbb6 	bl	8002938 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d2:	f7ff fbb1 	bl	8002938 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	; 0x64
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e278      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e4:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	4013      	ands	r3, r2
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0xf6>
 80031f0:	e000      	b.n	80031f4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d100      	bne.n	8003200 <HAL_RCC_OscConfig+0x124>
 80031fe:	e099      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003200:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2238      	movs	r2, #56	; 0x38
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320a:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2203      	movs	r2, #3
 8003210:	4013      	ands	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b10      	cmp	r3, #16
 8003218:	d102      	bne.n	8003220 <HAL_RCC_OscConfig+0x144>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d002      	beq.n	8003226 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d135      	bne.n	8003292 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003226:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4013      	ands	r3, r2
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x162>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e24b      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b72      	ldr	r3, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4a74      	ldr	r2, [pc, #464]	; (8003414 <HAL_RCC_OscConfig+0x338>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	021a      	lsls	r2, r3, #8
 800324e:	4b6e      	ldr	r3, [pc, #440]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d112      	bne.n	8003280 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800325a:	4b6b      	ldr	r3, [pc, #428]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x33c>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0adb      	lsrs	r3, r3, #11
 8003274:	2207      	movs	r2, #7
 8003276:	4013      	ands	r3, r2
 8003278:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_RCC_OscConfig+0x340>)
 800327a:	40da      	lsrs	r2, r3
 800327c:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x344>)
 800327e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003280:	4b68      	ldr	r3, [pc, #416]	; (8003424 <HAL_RCC_OscConfig+0x348>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff fafb 	bl	8002880 <HAL_InitTick>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d051      	beq.n	8003332 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e221      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d030      	beq.n	80032fc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800329a:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_RCC_OscConfig+0x33c>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b55      	ldr	r3, [pc, #340]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	2180      	movs	r1, #128	; 0x80
 80032b6:	0049      	lsls	r1, r1, #1
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7ff fb3c 	bl	8002938 <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7ff fb37 	bl	8002938 <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1fe      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d8:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4013      	ands	r3, r2
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b48      	ldr	r3, [pc, #288]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a4a      	ldr	r2, [pc, #296]	; (8003414 <HAL_RCC_OscConfig+0x338>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003302:	4949      	ldr	r1, [pc, #292]	; (8003428 <HAL_RCC_OscConfig+0x34c>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7ff fb16 	bl	8002938 <HAL_GetTick>
 800330c:	0003      	movs	r3, r0
 800330e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003312:	f7ff fb11 	bl	8002938 <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1d8      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4013      	ands	r3, r2
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x236>
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003332:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2208      	movs	r2, #8
 800333a:	4013      	ands	r3, r2
 800333c:	d047      	beq.n	80033ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2238      	movs	r2, #56	; 0x38
 8003344:	4013      	ands	r3, r2
 8003346:	2b18      	cmp	r3, #24
 8003348:	d10a      	bne.n	8003360 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d03c      	beq.n	80033ce <HAL_RCC_OscConfig+0x2f2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d138      	bne.n	80033ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e1ba      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d019      	beq.n	800339c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800336a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800336c:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800336e:	2101      	movs	r1, #1
 8003370:	430a      	orrs	r2, r1
 8003372:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7ff fae0 	bl	8002938 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337e:	f7ff fadb 	bl	8002938 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1a2      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	2202      	movs	r2, #2
 8003396:	4013      	ands	r3, r2
 8003398:	d0f1      	beq.n	800337e <HAL_RCC_OscConfig+0x2a2>
 800339a:	e018      	b.n	80033ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800339e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	438a      	bics	r2, r1
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7ff fac6 	bl	8002938 <HAL_GetTick>
 80033ac:	0003      	movs	r3, r0
 80033ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7ff fac1 	bl	8002938 <HAL_GetTick>
 80033b6:	0002      	movs	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e188      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	2202      	movs	r2, #2
 80033ca:	4013      	ands	r3, r2
 80033cc:	d1f1      	bne.n	80033b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2204      	movs	r2, #4
 80033d4:	4013      	ands	r3, r2
 80033d6:	d100      	bne.n	80033da <HAL_RCC_OscConfig+0x2fe>
 80033d8:	e0c6      	b.n	8003568 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	231f      	movs	r3, #31
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2238      	movs	r2, #56	; 0x38
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d11e      	bne.n	800342c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	2202      	movs	r2, #2
 80033f4:	4013      	ands	r3, r2
 80033f6:	d100      	bne.n	80033fa <HAL_RCC_OscConfig+0x31e>
 80033f8:	e0b6      	b.n	8003568 <HAL_RCC_OscConfig+0x48c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d000      	beq.n	8003404 <HAL_RCC_OscConfig+0x328>
 8003402:	e0b1      	b.n	8003568 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e166      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
 8003408:	40021000 	.word	0x40021000
 800340c:	fffeffff 	.word	0xfffeffff
 8003410:	fffbffff 	.word	0xfffbffff
 8003414:	ffff80ff 	.word	0xffff80ff
 8003418:	ffffc7ff 	.word	0xffffc7ff
 800341c:	00f42400 	.word	0x00f42400
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004
 8003428:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800342c:	4bac      	ldr	r3, [pc, #688]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800342e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	055b      	lsls	r3, r3, #21
 8003434:	4013      	ands	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x360>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x362>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4ba7      	ldr	r3, [pc, #668]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003446:	4ba6      	ldr	r3, [pc, #664]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	0549      	lsls	r1, r1, #21
 800344c:	430a      	orrs	r2, r1
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003450:	4ba3      	ldr	r3, [pc, #652]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	055b      	lsls	r3, r3, #21
 8003458:	4013      	ands	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800345e:	231f      	movs	r3, #31
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003466:	4b9f      	ldr	r3, [pc, #636]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4013      	ands	r3, r2
 8003470:	d11a      	bne.n	80034a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003472:	4b9c      	ldr	r3, [pc, #624]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b9b      	ldr	r3, [pc, #620]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	0049      	lsls	r1, r1, #1
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003480:	f7ff fa5a 	bl	8002938 <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7ff fa55 	bl	8002938 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e11c      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4b91      	ldr	r3, [pc, #580]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4013      	ands	r3, r2
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x3e2>
 80034b0:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034b4:	4b8a      	ldr	r3, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80034bc:	e01c      	b.n	80034f8 <HAL_RCC_OscConfig+0x41c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x404>
 80034c6:	4b86      	ldr	r3, [pc, #536]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034ca:	4b85      	ldr	r3, [pc, #532]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034cc:	2104      	movs	r1, #4
 80034ce:	430a      	orrs	r2, r1
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d2:	4b83      	ldr	r3, [pc, #524]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034d8:	2101      	movs	r1, #1
 80034da:	430a      	orrs	r2, r1
 80034dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0x41c>
 80034e0:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034e4:	4b7e      	ldr	r3, [pc, #504]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	438a      	bics	r2, r1
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ec:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f0:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034f2:	2104      	movs	r1, #4
 80034f4:	438a      	bics	r2, r1
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d014      	beq.n	800352a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7ff fa1a 	bl	8002938 <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003508:	e009      	b.n	800351e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7ff fa15 	bl	8002938 <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	4a74      	ldr	r2, [pc, #464]	; (80036e8 <HAL_RCC_OscConfig+0x60c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0db      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351e:	4b70      	ldr	r3, [pc, #448]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	2202      	movs	r2, #2
 8003524:	4013      	ands	r3, r2
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x42e>
 8003528:	e013      	b.n	8003552 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7ff fa05 	bl	8002938 <HAL_GetTick>
 800352e:	0003      	movs	r3, r0
 8003530:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003532:	e009      	b.n	8003548 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7ff fa00 	bl	8002938 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x60c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0c6      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003548:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	2202      	movs	r2, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003552:	231f      	movs	r3, #31
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b60      	ldr	r3, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800355e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003560:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003562:	4962      	ldr	r1, [pc, #392]	; (80036ec <HAL_RCC_OscConfig+0x610>)
 8003564:	400a      	ands	r2, r1
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d100      	bne.n	8003572 <HAL_RCC_OscConfig+0x496>
 8003570:	e0b0      	b.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2238      	movs	r2, #56	; 0x38
 8003578:	4013      	ands	r3, r2
 800357a:	2b10      	cmp	r3, #16
 800357c:	d100      	bne.n	8003580 <HAL_RCC_OscConfig+0x4a4>
 800357e:	e078      	b.n	8003672 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d153      	bne.n	8003630 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800358e:	4958      	ldr	r1, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x614>)
 8003590:	400a      	ands	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7ff f9d0 	bl	8002938 <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7ff f9cb 	bl	8002938 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e092      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	049b      	lsls	r3, r3, #18
 80035b8:	4013      	ands	r3, r2
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <HAL_RCC_OscConfig+0x618>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	431a      	orrs	r2, r3
 80035e4:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0449      	lsls	r1, r1, #17
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80035f8:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	0549      	lsls	r1, r1, #21
 8003602:	430a      	orrs	r2, r1
 8003604:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7ff f997 	bl	8002938 <HAL_GetTick>
 800360a:	0003      	movs	r3, r0
 800360c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7ff f992 	bl	8002938 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e059      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	049b      	lsls	r3, r3, #18
 800362a:	4013      	ands	r3, r2
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x534>
 800362e:	e051      	b.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003636:	492e      	ldr	r1, [pc, #184]	; (80036f0 <HAL_RCC_OscConfig+0x614>)
 8003638:	400a      	ands	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7ff f97c 	bl	8002938 <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7ff f977 	bl	8002938 <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e03e      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	049b      	lsls	r3, r3, #18
 8003660:	4013      	ands	r3, r2
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800366a:	4923      	ldr	r1, [pc, #140]	; (80036f8 <HAL_RCC_OscConfig+0x61c>)
 800366c:	400a      	ands	r2, r1
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	e030      	b.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e02b      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2203      	movs	r2, #3
 8003688:	401a      	ands	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	429a      	cmp	r2, r3
 8003690:	d11e      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2270      	movs	r2, #112	; 0x70
 8003696:	401a      	ands	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d117      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	23fe      	movs	r3, #254	; 0xfe
 80036a4:	01db      	lsls	r3, r3, #7
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d10e      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	23f8      	movs	r3, #248	; 0xf8
 80036b6:	039b      	lsls	r3, r3, #14
 80036b8:	401a      	ands	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d106      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	0f5b      	lsrs	r3, r3, #29
 80036c6:	075a      	lsls	r2, r3, #29
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b008      	add	sp, #32
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	00001388 	.word	0x00001388
 80036ec:	efffffff 	.word	0xefffffff
 80036f0:	feffffff 	.word	0xfeffffff
 80036f4:	1fc1808c 	.word	0x1fc1808c
 80036f8:	effefffc 	.word	0xeffefffc

080036fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0e9      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2207      	movs	r2, #7
 8003716:	4013      	ands	r3, r2
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d91e      	bls.n	800375c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b73      	ldr	r3, [pc, #460]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2207      	movs	r2, #7
 8003724:	4393      	bics	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	4b70      	ldr	r3, [pc, #448]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003730:	f7ff f902 	bl	8002938 <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003738:	e009      	b.n	800374e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373a:	f7ff f8fd 	bl	8002938 <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_RCC_ClockConfig+0x1f4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0ca      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800374e:	4b67      	ldr	r3, [pc, #412]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2207      	movs	r2, #7
 8003754:	4013      	ands	r3, r2
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d1ee      	bne.n	800373a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2202      	movs	r2, #2
 8003762:	4013      	ands	r3, r2
 8003764:	d015      	beq.n	8003792 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2204      	movs	r2, #4
 800376c:	4013      	ands	r3, r2
 800376e:	d006      	beq.n	800377e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003770:	4b60      	ldr	r3, [pc, #384]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003776:	21e0      	movs	r1, #224	; 0xe0
 8003778:	01c9      	lsls	r1, r1, #7
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4a5d      	ldr	r2, [pc, #372]	; (80038f8 <HAL_RCC_ClockConfig+0x1fc>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d057      	beq.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	029b      	lsls	r3, r3, #10
 80037ac:	4013      	ands	r3, r2
 80037ae:	d12b      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e097      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037bc:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	049b      	lsls	r3, r3, #18
 80037c4:	4013      	ands	r3, r2
 80037c6:	d11f      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e08b      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d4:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4013      	ands	r3, r2
 80037de:	d113      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e07f      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f0:	2202      	movs	r2, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d108      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e074      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2202      	movs	r2, #2
 8003800:	4013      	ands	r3, r2
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e06d      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003808:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2207      	movs	r2, #7
 800380e:	4393      	bics	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003818:	430a      	orrs	r2, r1
 800381a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7ff f88c 	bl	8002938 <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003824:	e009      	b.n	800383a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003826:	f7ff f887 	bl	8002938 <HAL_GetTick>
 800382a:	0002      	movs	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <HAL_RCC_ClockConfig+0x1f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e054      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2238      	movs	r2, #56	; 0x38
 8003840:	401a      	ands	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	429a      	cmp	r2, r3
 800384a:	d1ec      	bne.n	8003826 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2207      	movs	r2, #7
 8003852:	4013      	ands	r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d21e      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2207      	movs	r2, #7
 8003860:	4393      	bics	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800386c:	f7ff f864 	bl	8002938 <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003874:	e009      	b.n	800388a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003876:	f7ff f85f 	bl	8002938 <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_RCC_ClockConfig+0x1f4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e02c      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2207      	movs	r2, #7
 8003890:	4013      	ands	r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ee      	bne.n	8003876 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2204      	movs	r2, #4
 800389e:	4013      	ands	r3, r2
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_RCC_ClockConfig+0x200>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038b6:	f000 f829 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ba:	0001      	movs	r1, r0
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	220f      	movs	r2, #15
 80038c4:	401a      	ands	r2, r3
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCC_ClockConfig+0x204>)
 80038c8:	0092      	lsls	r2, r2, #2
 80038ca:	58d3      	ldr	r3, [r2, r3]
 80038cc:	221f      	movs	r2, #31
 80038ce:	4013      	ands	r3, r2
 80038d0:	000a      	movs	r2, r1
 80038d2:	40da      	lsrs	r2, r3
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x208>)
 80038d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x20c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fe ffcf 	bl	8002880 <HAL_InitTick>
 80038e2:	0003      	movs	r3, r0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40022000 	.word	0x40022000
 80038f0:	00001388 	.word	0x00001388
 80038f4:	40021000 	.word	0x40021000
 80038f8:	fffff0ff 	.word	0xfffff0ff
 80038fc:	ffff8fff 	.word	0xffff8fff
 8003900:	08004930 	.word	0x08004930
 8003904:	20000000 	.word	0x20000000
 8003908:	20000004 	.word	0x20000004

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2238      	movs	r2, #56	; 0x38
 8003918:	4013      	ands	r3, r2
 800391a:	d10f      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800391c:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0adb      	lsrs	r3, r3, #11
 8003922:	2207      	movs	r2, #7
 8003924:	4013      	ands	r3, r2
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	0013      	movs	r3, r2
 800392c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	4835      	ldr	r0, [pc, #212]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003932:	f7fc fbe5 	bl	8000100 <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	e05d      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800393c:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2238      	movs	r2, #56	; 0x38
 8003942:	4013      	ands	r3, r2
 8003944:	2b08      	cmp	r3, #8
 8003946:	d102      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003948:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x100>)
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e054      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394e:	4b2d      	ldr	r3, [pc, #180]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2238      	movs	r2, #56	; 0x38
 8003954:	4013      	ands	r3, r2
 8003956:	2b10      	cmp	r3, #16
 8003958:	d138      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800395a:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2203      	movs	r2, #3
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	2207      	movs	r2, #7
 800396c:	4013      	ands	r3, r2
 800396e:	3301      	adds	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d10d      	bne.n	8003994 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4824      	ldr	r0, [pc, #144]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x100>)
 800397c:	f7fc fbc0 	bl	8000100 <__udivsi3>
 8003980:	0003      	movs	r3, r0
 8003982:	0019      	movs	r1, r3
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	227f      	movs	r2, #127	; 0x7f
 800398c:	4013      	ands	r3, r2
 800398e:	434b      	muls	r3, r1
 8003990:	617b      	str	r3, [r7, #20]
        break;
 8003992:	e00d      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	481c      	ldr	r0, [pc, #112]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003998:	f7fc fbb2 	bl	8000100 <__udivsi3>
 800399c:	0003      	movs	r3, r0
 800399e:	0019      	movs	r1, r3
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	227f      	movs	r2, #127	; 0x7f
 80039a8:	4013      	ands	r3, r2
 80039aa:	434b      	muls	r3, r1
 80039ac:	617b      	str	r3, [r7, #20]
        break;
 80039ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0f5b      	lsrs	r3, r3, #29
 80039b6:	2207      	movs	r2, #7
 80039b8:	4013      	ands	r3, r2
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	6978      	ldr	r0, [r7, #20]
 80039c2:	f7fc fb9d 	bl	8000100 <__udivsi3>
 80039c6:	0003      	movs	r3, r0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e015      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2238      	movs	r2, #56	; 0x38
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d103      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2238      	movs	r2, #56	; 0x38
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b18      	cmp	r3, #24
 80039ea:	d103      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80039ec:	23fa      	movs	r3, #250	; 0xfa
 80039ee:	01db      	lsls	r3, r3, #7
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e001      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039f8:	693b      	ldr	r3, [r7, #16]
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b006      	add	sp, #24
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40021000 	.word	0x40021000
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0a8      	b.n	8003b74 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	2382      	movs	r3, #130	; 0x82
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d009      	beq.n	8003a4a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	61da      	str	r2, [r3, #28]
 8003a3c:	e005      	b.n	8003a4a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	225d      	movs	r2, #93	; 0x5d
 8003a54:	5c9b      	ldrb	r3, [r3, r2]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	225c      	movs	r2, #92	; 0x5c
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fe fe5a 	bl	8002720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	225d      	movs	r2, #93	; 0x5d
 8003a70:	2102      	movs	r1, #2
 8003a72:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2140      	movs	r1, #64	; 0x40
 8003a80:	438a      	bics	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	23e0      	movs	r3, #224	; 0xe0
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d902      	bls.n	8003a96 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e002      	b.n	8003a9c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	015b      	lsls	r3, r3, #5
 8003a9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	23f0      	movs	r3, #240	; 0xf0
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d008      	beq.n	8003aba <HAL_SPI_Init+0xaa>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	23e0      	movs	r3, #224	; 0xe0
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d002      	beq.n	8003aba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	2382      	movs	r3, #130	; 0x82
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	2384      	movs	r3, #132	; 0x84
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	400b      	ands	r3, r1
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	400b      	ands	r3, r1
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	400b      	ands	r3, r1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6999      	ldr	r1, [r3, #24]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	400b      	ands	r3, r1
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	2138      	movs	r1, #56	; 0x38
 8003af6:	400b      	ands	r3, r1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	400b      	ands	r3, r1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	0011      	movs	r1, r2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	2204      	movs	r2, #4
 8003b20:	401a      	ands	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	2110      	movs	r1, #16
 8003b28:	400b      	ands	r3, r1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	2108      	movs	r1, #8
 8003b32:	400b      	ands	r3, r1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68d9      	ldr	r1, [r3, #12]
 8003b3a:	23f0      	movs	r3, #240	; 0xf0
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	400b      	ands	r3, r1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	0011      	movs	r1, r2
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	015b      	lsls	r3, r3, #5
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4907      	ldr	r1, [pc, #28]	; (8003b7c <HAL_SPI_Init+0x16c>)
 8003b60:	400a      	ands	r2, r1
 8003b62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	225d      	movs	r2, #93	; 0x5d
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	fffff7ff 	.word	0xfffff7ff

08003b80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	1dbb      	adds	r3, r7, #6
 8003b8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b90:	231f      	movs	r3, #31
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	225c      	movs	r2, #92	; 0x5c
 8003b9c:	5c9b      	ldrb	r3, [r3, r2]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_Transmit+0x26>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e140      	b.n	8003e28 <HAL_SPI_Transmit+0x2a8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	225c      	movs	r2, #92	; 0x5c
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bae:	f7fe fec3 	bl	8002938 <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003bb6:	2316      	movs	r3, #22
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	1dba      	adds	r2, r7, #6
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	225d      	movs	r2, #93	; 0x5d
 8003bc4:	5c9b      	ldrb	r3, [r3, r2]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d004      	beq.n	8003bd6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003bcc:	231f      	movs	r3, #31
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bd4:	e11d      	b.n	8003e12 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_SPI_Transmit+0x64>
 8003bdc:	1dbb      	adds	r3, r7, #6
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003be4:	231f      	movs	r3, #31
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bec:	e111      	b.n	8003e12 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	225d      	movs	r2, #93	; 0x5d
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1dba      	adds	r2, r7, #6
 8003c06:	8812      	ldrh	r2, [r2, #0]
 8003c08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1dba      	adds	r2, r7, #6
 8003c0e:	8812      	ldrh	r2, [r2, #0]
 8003c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2244      	movs	r2, #68	; 0x44
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2246      	movs	r2, #70	; 0x46
 8003c24:	2100      	movs	r1, #0
 8003c26:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d110      	bne.n	8003c62 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2140      	movs	r1, #64	; 0x40
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	01c9      	lsls	r1, r1, #7
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d007      	beq.n	8003c80 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	23e0      	movs	r3, #224	; 0xe0
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d94e      	bls.n	8003d2a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <HAL_SPI_Transmit+0x11e>
 8003c94:	2316      	movs	r3, #22
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d13f      	bne.n	8003d1e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	881a      	ldrh	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cc2:	e02c      	b.n	8003d1e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d112      	bne.n	8003cf8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	881a      	ldrh	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf6:	e012      	b.n	8003d1e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf8:	f7fe fe1e 	bl	8002938 <HAL_GetTick>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d802      	bhi.n	8003d0e <HAL_SPI_Transmit+0x18e>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_SPI_Transmit+0x194>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003d14:	231f      	movs	r3, #31
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2203      	movs	r2, #3
 8003d1a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d1c:	e079      	b.n	8003e12 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1cd      	bne.n	8003cc4 <HAL_SPI_Transmit+0x144>
 8003d28:	e04f      	b.n	8003dca <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_SPI_Transmit+0x1bc>
 8003d32:	2316      	movs	r3, #22
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d141      	bne.n	8003dc0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	7812      	ldrb	r2, [r2, #0]
 8003d48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003d62:	e02d      	b.n	8003dc0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d113      	bne.n	8003d9a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d98:	e012      	b.n	8003dc0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d9a:	f7fe fdcd 	bl	8002938 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d802      	bhi.n	8003db0 <HAL_SPI_Transmit+0x230>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_SPI_Transmit+0x236>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003db6:	231f      	movs	r3, #31
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2203      	movs	r2, #3
 8003dbc:	701a      	strb	r2, [r3, #0]
          goto error;
 8003dbe:	e028      	b.n	8003e12 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1cc      	bne.n	8003d64 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 fce5 	bl	80047a0 <SPI_EndRxTxTransaction>
 8003dd6:	1e03      	subs	r3, r0, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003e06:	231f      	movs	r3, #31
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e000      	b.n	8003e12 <HAL_SPI_Transmit+0x292>
  }

error:
 8003e10:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	225d      	movs	r2, #93	; 0x5d
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	225c      	movs	r2, #92	; 0x5c
 8003e1e:	2100      	movs	r1, #0
 8003e20:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e22:	231f      	movs	r3, #31
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	781b      	ldrb	r3, [r3, #0]
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b008      	add	sp, #32
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	1dbb      	adds	r3, r7, #6
 8003e3e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e40:	2317      	movs	r3, #23
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	2382      	movs	r3, #130	; 0x82
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d113      	bne.n	8003e7c <HAL_SPI_Receive+0x4c>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10f      	bne.n	8003e7c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	225d      	movs	r2, #93	; 0x5d
 8003e60:	2104      	movs	r1, #4
 8003e62:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e64:	1dbb      	adds	r3, r7, #6
 8003e66:	881c      	ldrh	r4, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	0023      	movs	r3, r4
 8003e74:	f000 f928 	bl	80040c8 <HAL_SPI_TransmitReceive>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	e11c      	b.n	80040b6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	225c      	movs	r2, #92	; 0x5c
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_SPI_Receive+0x5a>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e115      	b.n	80040b6 <HAL_SPI_Receive+0x286>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	225c      	movs	r2, #92	; 0x5c
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e92:	f7fe fd51 	bl	8002938 <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	225d      	movs	r2, #93	; 0x5d
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d004      	beq.n	8003eb0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003ea6:	2317      	movs	r3, #23
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
    goto error;
 8003eae:	e0f7      	b.n	80040a0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_SPI_Receive+0x8e>
 8003eb6:	1dbb      	adds	r3, r7, #6
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003ebe:	2317      	movs	r3, #23
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ec6:	e0eb      	b.n	80040a0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	225d      	movs	r2, #93	; 0x5d
 8003ecc:	2104      	movs	r1, #4
 8003ece:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1dba      	adds	r2, r7, #6
 8003ee0:	2144      	movs	r1, #68	; 0x44
 8003ee2:	8812      	ldrh	r2, [r2, #0]
 8003ee4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1dba      	adds	r2, r7, #6
 8003eea:	2146      	movs	r1, #70	; 0x46
 8003eec:	8812      	ldrh	r2, [r2, #0]
 8003eee:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	23e0      	movs	r3, #224	; 0xe0
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d908      	bls.n	8003f2c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4966      	ldr	r1, [pc, #408]	; (80040c0 <HAL_SPI_Receive+0x290>)
 8003f26:	400a      	ands	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	e008      	b.n	8003f3e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	0149      	lsls	r1, r1, #5
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d10f      	bne.n	8003f6a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	438a      	bics	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4957      	ldr	r1, [pc, #348]	; (80040c4 <HAL_SPI_Receive+0x294>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2240      	movs	r2, #64	; 0x40
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d007      	beq.n	8003f88 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2140      	movs	r1, #64	; 0x40
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	23e0      	movs	r3, #224	; 0xe0
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d900      	bls.n	8003f96 <HAL_SPI_Receive+0x166>
 8003f94:	e069      	b.n	800406a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f96:	e031      	b.n	8003ffc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d117      	bne.n	8003fd6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	001a      	movs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2246      	movs	r2, #70	; 0x46
 8003fc6:	5a9b      	ldrh	r3, [r3, r2]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b299      	uxth	r1, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2246      	movs	r2, #70	; 0x46
 8003fd2:	5299      	strh	r1, [r3, r2]
 8003fd4:	e012      	b.n	8003ffc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd6:	f7fe fcaf 	bl	8002938 <HAL_GetTick>
 8003fda:	0002      	movs	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d802      	bhi.n	8003fec <HAL_SPI_Receive+0x1bc>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_SPI_Receive+0x1c2>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003ff2:	2317      	movs	r3, #23
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ffa:	e051      	b.n	80040a0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2246      	movs	r2, #70	; 0x46
 8004000:	5a9b      	ldrh	r3, [r3, r2]
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1c7      	bne.n	8003f98 <HAL_SPI_Receive+0x168>
 8004008:	e035      	b.n	8004076 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2201      	movs	r2, #1
 8004012:	4013      	ands	r3, r2
 8004014:	2b01      	cmp	r3, #1
 8004016:	d115      	bne.n	8004044 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	b292      	uxth	r2, r2
 8004024:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2246      	movs	r2, #70	; 0x46
 8004034:	5a9b      	ldrh	r3, [r3, r2]
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b299      	uxth	r1, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2246      	movs	r2, #70	; 0x46
 8004040:	5299      	strh	r1, [r3, r2]
 8004042:	e012      	b.n	800406a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004044:	f7fe fc78 	bl	8002938 <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d802      	bhi.n	800405a <HAL_SPI_Receive+0x22a>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	3301      	adds	r3, #1
 8004058:	d102      	bne.n	8004060 <HAL_SPI_Receive+0x230>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004060:	2317      	movs	r3, #23
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2203      	movs	r2, #3
 8004066:	701a      	strb	r2, [r3, #0]
          goto error;
 8004068:	e01a      	b.n	80040a0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2246      	movs	r2, #70	; 0x46
 800406e:	5a9b      	ldrh	r3, [r3, r2]
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1c9      	bne.n	800400a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	0018      	movs	r0, r3
 800407e:	f000 fb31 	bl	80046e4 <SPI_EndRxTransaction>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004094:	2317      	movs	r3, #23
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e000      	b.n	80040a0 <HAL_SPI_Receive+0x270>
  }

error :
 800409e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	225d      	movs	r2, #93	; 0x5d
 80040a4:	2101      	movs	r1, #1
 80040a6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	225c      	movs	r2, #92	; 0x5c
 80040ac:	2100      	movs	r1, #0
 80040ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b007      	add	sp, #28
 80040bc:	bd90      	pop	{r4, r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	ffffefff 	.word	0xffffefff
 80040c4:	ffffbfff 	.word	0xffffbfff

080040c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	001a      	movs	r2, r3
 80040d6:	1cbb      	adds	r3, r7, #2
 80040d8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040da:	2301      	movs	r3, #1
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040de:	2323      	movs	r3, #35	; 0x23
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	225c      	movs	r2, #92	; 0x5c
 80040ea:	5c9b      	ldrb	r3, [r3, r2]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x2c>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e1b5      	b.n	8004460 <HAL_SPI_TransmitReceive+0x398>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	225c      	movs	r2, #92	; 0x5c
 80040f8:	2101      	movs	r1, #1
 80040fa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fc:	f7fe fc1c 	bl	8002938 <HAL_GetTick>
 8004100:	0003      	movs	r3, r0
 8004102:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004104:	201b      	movs	r0, #27
 8004106:	183b      	adds	r3, r7, r0
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	215d      	movs	r1, #93	; 0x5d
 800410c:	5c52      	ldrb	r2, [r2, r1]
 800410e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004116:	2312      	movs	r3, #18
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	1cba      	adds	r2, r7, #2
 800411c:	8812      	ldrh	r2, [r2, #0]
 800411e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004120:	183b      	adds	r3, r7, r0
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d011      	beq.n	800414c <HAL_SPI_TransmitReceive+0x84>
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	2382      	movs	r3, #130	; 0x82
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	429a      	cmp	r2, r3
 8004130:	d107      	bne.n	8004142 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_SPI_TransmitReceive+0x7a>
 800413a:	183b      	adds	r3, r7, r0
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d004      	beq.n	800414c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004142:	2323      	movs	r3, #35	; 0x23
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2202      	movs	r2, #2
 8004148:	701a      	strb	r2, [r3, #0]
    goto error;
 800414a:	e17e      	b.n	800444a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x98>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x98>
 8004158:	1cbb      	adds	r3, r7, #2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004160:	2323      	movs	r3, #35	; 0x23
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
    goto error;
 8004168:	e16f      	b.n	800444a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	225d      	movs	r2, #93	; 0x5d
 800416e:	5c9b      	ldrb	r3, [r3, r2]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	225d      	movs	r2, #93	; 0x5d
 800417a:	2105      	movs	r1, #5
 800417c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1cba      	adds	r2, r7, #2
 800418e:	2146      	movs	r1, #70	; 0x46
 8004190:	8812      	ldrh	r2, [r2, #0]
 8004192:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1cba      	adds	r2, r7, #2
 8004198:	2144      	movs	r1, #68	; 0x44
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1cba      	adds	r2, r7, #2
 80041a8:	8812      	ldrh	r2, [r2, #0]
 80041aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1cba      	adds	r2, r7, #2
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	23e0      	movs	r3, #224	; 0xe0
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d908      	bls.n	80041de <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	49a4      	ldr	r1, [pc, #656]	; (8004468 <HAL_SPI_TransmitReceive+0x3a0>)
 80041d8:	400a      	ands	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	e008      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	0149      	lsls	r1, r1, #5
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d007      	beq.n	800420e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2140      	movs	r1, #64	; 0x40
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	23e0      	movs	r3, #224	; 0xe0
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	429a      	cmp	r2, r3
 8004218:	d800      	bhi.n	800421c <HAL_SPI_TransmitReceive+0x154>
 800421a:	e07f      	b.n	800431c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x168>
 8004224:	2312      	movs	r3, #18
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d000      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x168>
 800422e:	e069      	b.n	8004304 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004254:	e056      	b.n	8004304 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2202      	movs	r2, #2
 800425e:	4013      	ands	r3, r2
 8004260:	2b02      	cmp	r3, #2
 8004262:	d11b      	bne.n	800429c <HAL_SPI_TransmitReceive+0x1d4>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_SPI_TransmitReceive+0x1d4>
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	2b01      	cmp	r3, #1
 8004272:	d113      	bne.n	800429c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	881a      	ldrh	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	1c9a      	adds	r2, r3, #2
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2201      	movs	r2, #1
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d11c      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x21c>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2246      	movs	r2, #70	; 0x46
 80042ae:	5a9b      	ldrh	r3, [r3, r2]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	b292      	uxth	r2, r2
 80042c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2246      	movs	r2, #70	; 0x46
 80042d2:	5a9b      	ldrh	r3, [r3, r2]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b299      	uxth	r1, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2246      	movs	r2, #70	; 0x46
 80042de:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042e0:	2301      	movs	r3, #1
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042e4:	f7fe fb28 	bl	8002938 <HAL_GetTick>
 80042e8:	0002      	movs	r2, r0
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d807      	bhi.n	8004304 <HAL_SPI_TransmitReceive+0x23c>
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	3301      	adds	r3, #1
 80042f8:	d004      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80042fa:	2323      	movs	r3, #35	; 0x23
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2203      	movs	r2, #3
 8004300:	701a      	strb	r2, [r3, #0]
        goto error;
 8004302:	e0a2      	b.n	800444a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1a3      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x18e>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2246      	movs	r2, #70	; 0x46
 8004312:	5a9b      	ldrh	r3, [r3, r2]
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d19d      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x18e>
 800431a:	e085      	b.n	8004428 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x268>
 8004324:	2312      	movs	r3, #18
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d000      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x268>
 800432e:	e070      	b.n	8004412 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	7812      	ldrb	r2, [r2, #0]
 800433c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004356:	e05c      	b.n	8004412 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d11c      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x2d8>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d017      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x2d8>
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	2b01      	cmp	r3, #1
 8004374:	d114      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2201      	movs	r2, #1
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d11e      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x324>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2246      	movs	r2, #70	; 0x46
 80043b2:	5a9b      	ldrh	r3, [r3, r2]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	001a      	movs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2246      	movs	r2, #70	; 0x46
 80043da:	5a9b      	ldrh	r3, [r3, r2]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b299      	uxth	r1, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2246      	movs	r2, #70	; 0x46
 80043e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e8:	2301      	movs	r3, #1
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043ec:	f7fe faa4 	bl	8002938 <HAL_GetTick>
 80043f0:	0002      	movs	r2, r0
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d802      	bhi.n	8004402 <HAL_SPI_TransmitReceive+0x33a>
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	3301      	adds	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x340>
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004408:	2323      	movs	r3, #35	; 0x23
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	2203      	movs	r2, #3
 800440e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004410:	e01b      	b.n	800444a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d19d      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x290>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2246      	movs	r2, #70	; 0x46
 8004420:	5a9b      	ldrh	r3, [r3, r2]
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d197      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	0018      	movs	r0, r3
 8004430:	f000 f9b6 	bl	80047a0 <SPI_EndRxTxTransaction>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d007      	beq.n	8004448 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004438:	2323      	movs	r3, #35	; 0x23
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	661a      	str	r2, [r3, #96]	; 0x60
 8004446:	e000      	b.n	800444a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004448:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	225d      	movs	r2, #93	; 0x5d
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	225c      	movs	r2, #92	; 0x5c
 8004456:	2100      	movs	r1, #0
 8004458:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800445a:	2323      	movs	r3, #35	; 0x23
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	781b      	ldrb	r3, [r3, #0]
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b00a      	add	sp, #40	; 0x28
 8004466:	bd80      	pop	{r7, pc}
 8004468:	ffffefff 	.word	0xffffefff

0800446c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	225d      	movs	r2, #93	; 0x5d
 8004478:	5c9b      	ldrb	r3, [r3, r2]
 800447a:	b2db      	uxtb	r3, r3
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	1dfb      	adds	r3, r7, #7
 8004492:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004494:	f7fe fa50 	bl	8002938 <HAL_GetTick>
 8004498:	0002      	movs	r2, r0
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	18d3      	adds	r3, r2, r3
 80044a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044a4:	f7fe fa48 	bl	8002938 <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044ac:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	015b      	lsls	r3, r3, #5
 80044b2:	0d1b      	lsrs	r3, r3, #20
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	4353      	muls	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ba:	e058      	b.n	800456e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	d055      	beq.n	800456e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044c2:	f7fe fa39 	bl	8002938 <HAL_GetTick>
 80044c6:	0002      	movs	r2, r0
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d902      	bls.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d142      	bne.n	800455e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	21e0      	movs	r1, #224	; 0xe0
 80044e4:	438a      	bics	r2, r1
 80044e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	2382      	movs	r3, #130	; 0x82
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d113      	bne.n	800451c <SPI_WaitFlagStateUntilTimeout+0x98>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d005      	beq.n	800450c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	429a      	cmp	r2, r3
 800450a:	d107      	bne.n	800451c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	438a      	bics	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	019b      	lsls	r3, r3, #6
 8004524:	429a      	cmp	r2, r3
 8004526:	d110      	bne.n	800454a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	491a      	ldr	r1, [pc, #104]	; (800459c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004534:	400a      	ands	r2, r1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	0189      	lsls	r1, r1, #6
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	225d      	movs	r2, #93	; 0x5d
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	225c      	movs	r2, #92	; 0x5c
 8004556:	2100      	movs	r1, #0
 8004558:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e017      	b.n	800458e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3b01      	subs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	425a      	negs	r2, r3
 800457e:	4153      	adcs	r3, r2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	001a      	movs	r2, r3
 8004584:	1dfb      	adds	r3, r7, #7
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d197      	bne.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b008      	add	sp, #32
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	20000000 	.word	0x20000000
 800459c:	ffffdfff 	.word	0xffffdfff

080045a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045ae:	2317      	movs	r3, #23
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045b6:	f7fe f9bf 	bl	8002938 <HAL_GetTick>
 80045ba:	0002      	movs	r2, r0
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	18d3      	adds	r3, r2, r3
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045c6:	f7fe f9b7 	bl	8002938 <HAL_GetTick>
 80045ca:	0003      	movs	r3, r0
 80045cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045d6:	4b41      	ldr	r3, [pc, #260]	; (80046dc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	0013      	movs	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	189b      	adds	r3, r3, r2
 80045e0:	00da      	lsls	r2, r3, #3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	0d1b      	lsrs	r3, r3, #20
 80045e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e8:	4353      	muls	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045ec:	e068      	b.n	80046c0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	23c0      	movs	r3, #192	; 0xc0
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d10a      	bne.n	800460e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	2117      	movs	r1, #23
 8004606:	187b      	adds	r3, r7, r1
 8004608:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800460a:	187b      	adds	r3, r7, r1
 800460c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	3301      	adds	r3, #1
 8004612:	d055      	beq.n	80046c0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004614:	f7fe f990 	bl	8002938 <HAL_GetTick>
 8004618:	0002      	movs	r2, r0
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	429a      	cmp	r2, r3
 8004622:	d902      	bls.n	800462a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	2b00      	cmp	r3, #0
 8004628:	d142      	bne.n	80046b0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	21e0      	movs	r1, #224	; 0xe0
 8004636:	438a      	bics	r2, r1
 8004638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	2382      	movs	r3, #130	; 0x82
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	429a      	cmp	r2, r3
 8004644:	d113      	bne.n	800466e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	429a      	cmp	r2, r3
 8004650:	d005      	beq.n	800465e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	429a      	cmp	r2, r3
 800465c:	d107      	bne.n	800466e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2140      	movs	r1, #64	; 0x40
 800466a:	438a      	bics	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	019b      	lsls	r3, r3, #6
 8004676:	429a      	cmp	r2, r3
 8004678:	d110      	bne.n	800469c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4916      	ldr	r1, [pc, #88]	; (80046e0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004686:	400a      	ands	r2, r1
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	0189      	lsls	r1, r1, #6
 8004698:	430a      	orrs	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	225d      	movs	r2, #93	; 0x5d
 80046a0:	2101      	movs	r1, #1
 80046a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	225c      	movs	r2, #92	; 0x5c
 80046a8:	2100      	movs	r1, #0
 80046aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e010      	b.n	80046d2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	3b01      	subs	r3, #1
 80046be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	4013      	ands	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d18e      	bne.n	80045ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	0018      	movs	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b00a      	add	sp, #40	; 0x28
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	20000000 	.word	0x20000000
 80046e0:	ffffdfff 	.word	0xffffdfff

080046e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	2382      	movs	r3, #130	; 0x82
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d113      	bne.n	8004724 <SPI_EndRxTransaction+0x40>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	429a      	cmp	r2, r3
 8004706:	d005      	beq.n	8004714 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	429a      	cmp	r2, r3
 8004712:	d107      	bne.n	8004724 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2140      	movs	r1, #64	; 0x40
 8004720:	438a      	bics	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	0013      	movs	r3, r2
 800472e:	2200      	movs	r2, #0
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	f7ff fea7 	bl	8004484 <SPI_WaitFlagStateUntilTimeout>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d007      	beq.n	800474a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473e:	2220      	movs	r2, #32
 8004740:	431a      	orrs	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e026      	b.n	8004798 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	2382      	movs	r3, #130	; 0x82
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	429a      	cmp	r2, r3
 8004754:	d11f      	bne.n	8004796 <SPI_EndRxTransaction+0xb2>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	429a      	cmp	r2, r3
 8004760:	d005      	beq.n	800476e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	429a      	cmp	r2, r3
 800476c:	d113      	bne.n	8004796 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	23c0      	movs	r3, #192	; 0xc0
 8004772:	00d9      	lsls	r1, r3, #3
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	0013      	movs	r3, r2
 800477c:	2200      	movs	r2, #0
 800477e:	f7ff ff0f 	bl	80045a0 <SPI_WaitFifoStateUntilTimeout>
 8004782:	1e03      	subs	r3, r0, #0
 8004784:	d007      	beq.n	8004796 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478a:	2220      	movs	r2, #32
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e000      	b.n	8004798 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b004      	add	sp, #16
 800479e:	bd80      	pop	{r7, pc}

080047a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	23c0      	movs	r3, #192	; 0xc0
 80047b0:	0159      	lsls	r1, r3, #5
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	0013      	movs	r3, r2
 80047ba:	2200      	movs	r2, #0
 80047bc:	f7ff fef0 	bl	80045a0 <SPI_WaitFifoStateUntilTimeout>
 80047c0:	1e03      	subs	r3, r0, #0
 80047c2:	d007      	beq.n	80047d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c8:	2220      	movs	r2, #32
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e027      	b.n	8004824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	0013      	movs	r3, r2
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	; 0x80
 80047e2:	f7ff fe4f 	bl	8004484 <SPI_WaitFlagStateUntilTimeout>
 80047e6:	1e03      	subs	r3, r0, #0
 80047e8:	d007      	beq.n	80047fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ee:	2220      	movs	r2, #32
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e014      	b.n	8004824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	23c0      	movs	r3, #192	; 0xc0
 80047fe:	00d9      	lsls	r1, r3, #3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	0013      	movs	r3, r2
 8004808:	2200      	movs	r2, #0
 800480a:	f7ff fec9 	bl	80045a0 <SPI_WaitFifoStateUntilTimeout>
 800480e:	1e03      	subs	r3, r0, #0
 8004810:	d007      	beq.n	8004822 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004816:	2220      	movs	r2, #32
 8004818:	431a      	orrs	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e000      	b.n	8004824 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	0018      	movs	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	b004      	add	sp, #16
 800482a:	bd80      	pop	{r7, pc}

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	2600      	movs	r6, #0
 8004830:	4d0c      	ldr	r5, [pc, #48]	; (8004864 <__libc_init_array+0x38>)
 8004832:	4c0d      	ldr	r4, [pc, #52]	; (8004868 <__libc_init_array+0x3c>)
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	42a6      	cmp	r6, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	2600      	movs	r6, #0
 800483e:	f000 f82b 	bl	8004898 <_init>
 8004842:	4d0a      	ldr	r5, [pc, #40]	; (800486c <__libc_init_array+0x40>)
 8004844:	4c0a      	ldr	r4, [pc, #40]	; (8004870 <__libc_init_array+0x44>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	42a6      	cmp	r6, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	00b3      	lsls	r3, r6, #2
 8004852:	58eb      	ldr	r3, [r5, r3]
 8004854:	4798      	blx	r3
 8004856:	3601      	adds	r6, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	00b3      	lsls	r3, r6, #2
 800485c:	58eb      	ldr	r3, [r5, r3]
 800485e:	4798      	blx	r3
 8004860:	3601      	adds	r6, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	08004970 	.word	0x08004970
 8004868:	08004970 	.word	0x08004970
 800486c:	08004970 	.word	0x08004970
 8004870:	08004974 	.word	0x08004974

08004874 <memcpy>:
 8004874:	2300      	movs	r3, #0
 8004876:	b510      	push	{r4, lr}
 8004878:	429a      	cmp	r2, r3
 800487a:	d100      	bne.n	800487e <memcpy+0xa>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	5ccc      	ldrb	r4, [r1, r3]
 8004880:	54c4      	strb	r4, [r0, r3]
 8004882:	3301      	adds	r3, #1
 8004884:	e7f8      	b.n	8004878 <memcpy+0x4>

08004886 <memset>:
 8004886:	0003      	movs	r3, r0
 8004888:	1882      	adds	r2, r0, r2
 800488a:	4293      	cmp	r3, r2
 800488c:	d100      	bne.n	8004890 <memset+0xa>
 800488e:	4770      	bx	lr
 8004890:	7019      	strb	r1, [r3, #0]
 8004892:	3301      	adds	r3, #1
 8004894:	e7f9      	b.n	800488a <memset+0x4>
	...

08004898 <_init>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr

080048a4 <_fini>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr
